namespace com.ibm.streamsx.network.domains;

use com.ibm.streamsx.network.domains::*;

composite TestExtractDomain {
//    param
//        expression <uint32>  $iterations     : (uint32)getSubmissionTimeValue("iterations", "1000");
//        expression <uint64>  $expectedSetSize : (uint64)getSubmissionTimeValue("expectedSetSize", "1000");
//        expression <float64>  $collisionRate     : (float64)getSubmissionTimeValue("collisionRate","0.1");
//        expression <float64>  $metricsInterval     : (float64)getSubmissionTimeValue("metricsInterval","60");
//        expression <uint64> $rotationTupleCount : (uint64)getSubmissionTimeValue("rotationTupleCount", "0");
//        expression <float64> $prefillRatio : (float64)getSubmissionTimeValue("prefillRatio", "0.0");


    graph

        stream<rstring fqdn, rstring domain> InputStream = FileSource() {
        param
            file: "testDomains.txt";
            format: line;
//            initDelay: 15.0;

        output
            InputStream: domain="";
        }

        stream<rstring fqdn, rstring domain> Extracted = SimpleExtractDomain(InputStream) {
        param
            tldsDir: "";
            tldsFilenamePattern: "^ascii_tlds$";
            domainNameAttr: fqdn;
            outputAttr: domain;
            blankOnInvalidTLD: false;
        }

        () as LogSink = Custom(Extracted) {
            logic onTuple Extracted: {
                printStringLn((rstring)"[" + fqdn + "] [" + domain + "]");
            }
        }

}
