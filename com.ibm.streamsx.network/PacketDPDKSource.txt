Copyright (C) 2015  International Business Machines Corporation
All Rights Reserved



Network Toolkit: PacketDPDKSource operator
------------------------------------------


_____Description_____


PacketDPDKSource is an operator for the IBM InfoSphere Streams product that
captures live network packets from one of the network interfaces attached to the
machine where it executes. The operator function and structure are very 
similar to PacketLiveSource; see that operator's documentation for details
of common functions and general background.  The primary difference between
these related operators is that PacketDPDKSource leverages the DPDK libraries
(see http://www.dpdk.org) for higher performance and lower processing 
overhead.

This operator is part of the network toolkit. The toolkit includes several
sample applications that illustrate how to use the operator.


_____Dependencies_____


The PacketDPDKSource operator depends upon the DPDK libraries available from
http://dpdk.org. The library must be installed on the machine where this 
operator executes.   It has been tested with the following versions:
  DPDK 2.0
  DPDK 2.1
  DPDK 2.2

There are very good documents for DPDK build/install/use that should be 
referenced.  Here are some notes of the steps that will help getting started
on Streams:
  - Download & untar the dpdk.tgz file from dpdk.org.

  - Set environment variables (these are needed for DPDK & Streams builds):
    export EXTRA_CFLAGS=-fPIC
    export RTE_TARGET=x86_64-native-linuxapp-gcc
      OR
    export RTE_TARGET=ppc_64-default-linuxapp-gcc
    export RTE_SDK=/home/userid/dpdk-2.0.0 (point to install directory)

  - Configure the DPDK build from the top directory
    make config T=x86_64-native-linuxapp-gcc
      OR
    make config T=ppc_64-power8-linuxapp-gcc

    vi ./build/.config
      Change as needed.  For example:
        CONFIG_RTE_BUILD_SHARED_LIB=y (e1000 NIC)
        COMBINE_LIBS=y
          OR
        CONFIG_RTE_BUILD_SHARED_LIB=n (MLX4 NIC)
        COMBINE_LIBS=y
        LIBRTE_MLX4_PMD=y
  - make
  - make install T=x86_64-native-linuxapp-gcc    
  - cp build/lib/libintel_dpdk.so <toolkit>/com.ibm.streamsx.network/impl/lib/source/
      OR
    cp build/lib/libdpdk.a <toolkit>/com.ibm.streamsx.network/impl/lib/source/
 
There is also a Streams to DPDK glue library that must be built.  To
do this, take the following steps:
  - cd <toolkit>/com.ibm.streamsx.network/impl/src/source/dpdk
  - Set the RTE env variables noted above.
  - make
  - cp streams_source.h <toolkit>/com.ibm.streamsx.network/impl/lib/include 
  - cp build/lib/libstreams_source.a <toolkit>/com.ibm.streamsx.network/impl/lib/source/ 

Building the Streams example application requires the following steps:
  - cd <toolkit>/streamsx.network/samples/SamplePacketDPDKSource
  - vi Makefile
    Primary change is to pick the right dpdk library. 
  - vi TestPacketDPDKSource.splmm
    Primary change is to modify the operator parameters.  
  - make

Configuring & enabling acces to key system resources:
  General items (run as root typically)
    - mkdir -p /mnt/huge
    - mount -t hugetlbfs nodev /mnt/huge
    - echo 1000 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages
    - Create a dpdk group for permisssions.  Note that udev rules would be a
      better approach -- documentation is being worked.  
        - groupadd dpdk
        - usermod -G <userid>,dpdk <userid>
        - groups <userid>
    - chown root:dpdk /dev/hugepages
    - chmod 775 /dev/hugepages
    - chown root:dpdk /mnt/huge/
    - chmod 775 /mnt/huge/

  e1000 Example:
    - ifconfig <interface of the e1000> down
    - modprobe uio
    - insmod <dpdk>/dpdk-2.1.0/build/kmod/igb_uio.ko
    - <dpdkpath>/dpdk-2.1.0/tools/dpdk_nic_bind.py --bind=igb_uio <interface>
    - <dpdkpath>/dpdk-2.1.0/tools/dpdk_nic_bind.py --status
    - chown root:dpdk /dev/uio0
    - chmod 660 /dev/uio0
    - chown root:dpdk /sys/class/uio/uio0/device/config
    - cdmod 660 /sys/class/uio/uio0/device/config
    - chown root:dpdk /sys/class/uio/uio0/device/resource*
    - chmod 660 /sys/class/uio/uio0/device/resource*

  Mellanox Example
    - May need kernel sources on the system: yum install kernel-devel
    - Download & install the OFED packages from mellanox.com
      - Build as described in the Mellanox documentation.
      - Useful shortcut command: 
        "mlnxofedinstall --add-kernelsupport --force --all --skip-distro-check"
    - vi /etc/modprobe.d/mlnx.conf, add the line: 
      "options ib_uverbs disable_raw_qp_enforcement=1"
    - modprobe mlx4_en
    - /etc/init.d/openibd restart
    - "ibstat" and "/etc/init.d/openibd status" are useful commands.

Running the Streams application
  - Normal submit : streamtool submitjob output/TestPacketDPDKSource.sab
  - Packet output can be found in the "data" directory.


_____Input Ports_____


The PacketDPDKSource operator has no input ports.  


_____Output Ports_____


The PacketDPDKSource operator has one or more output is consistent with
PacketLiveSource's definition.


_____Parameters_____

   pmdDriver -- Absolute path to the DPDK PMD drivers on the system.
                Note that only the first instance of the PacketDPDKSource
                must set this parm.  All others are ignored.

   coreMask -- Hex bit mask listing the cores used for DPDK polling loops.
               The low order bit corresponds to the master lcore and all
               other bits indicate cores that will be assigned to
               ports/queues.
               Note that only the first instance of the PacketDPDKSource
               must set this parm.  All others are ignored.

   lcore -- Logical core number on which this operator will run.

   nicPort -- NIC port of type uint32 which sources packets for this 
              operator instance.  Obtaining the proper mapping may require
              use of multiple tools, and varies by NIC.  Suggested tools:
                ifconfig
                dpdk-2.1.0/tools/dpdk_nic_bind.py --status
                ibstat (for Mellanox NICs)
                lspci | grep -i net

   nicQueue -- NIC queue of type uint32 which sources packets for this 
              operator instance.

   promiscuous -- This optional parameter takes an expression of type 'boolean'
      that specifies whether or not 'promiscuous' mode should be enabled on the
      network interface.

   metricsInterval -- This optional parameter takes an expression of type
      'float64' that specifies the interval, in seconds, for sending operator
      metrics to the Streams runtime. If the value is zero or less, the operator
      will not report metrics to the runtime, and the output assigment functions
      for 'libpcap' statistics will be zero.

      The default value of the 'metricsInterval' parameter is '10.0'.


_____Windowing_____


The PacketDPDKSource operator does not accept any window congfiguration.


_____Assignments____


The PacketDPDKSource operator emits one output tuple for each packet read from
an ethernet interface.  All attributes of output tuples must be assigned values,
either with explicit assignment expressions, or implicitly by copy from input
tuples (when an input port is specified).  See the PacketLiveSource 
documentation for details of the assignment expressions.


_____Threads_____


Each PacketDPDKSource operator instance creates a separate thread which 
runs in the DPDK subsytem until a packet is available after which it
executes the operator code and submits the packet data downstream.

The PacketDPDKSource operator contains a separate thread for reporting 
its metrics to the Streams runtime if the 'metricsInterval' parameter is 
greater than zero.


_____Metrics_____


The PacketDPDKSource operator provides these Streams metrics when it is executed
in Distributed mode application.  The interface is the same as defined for
PacketLiveSource.


_____Exceptions_____


Pending.


_____Tuning_____


Pending.


_____Examples_____


The SamplePacketDPDKSource project in this toolkit contains examples of this
operator.  The SampleNetworkToolkitData project in this toolkit contains data
for the sample applications.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
