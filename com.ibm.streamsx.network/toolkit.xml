<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<toolkitModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/toolkit" productVersion="4.1.1.0" xmlns:common="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:ti="http://www.ibm.com/xmlns/prod/streams/spl/toolkitInfo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <toolkit name="com.ibm.streamsx.network" requiredProductVersion="4.0.1.0" version="2.8.1">
    <description>Operators and functions for ingesting and parsing raw network data at the packet level.</description>
    <uriTable>
      <uri index="5" value="com.ibm.streamsx.network.parse/native.function/function.xml"/>
      <uri index="11" value="com.ibm.streamsx.network.enrichment/IPSpatialEnricher"/>
      <uri index="2" value="com.ibm.streamsx.network.enrichment/IPSpatialTypes.spl"/>
      <uri index="18" value="com.ibm.streamsx.network.source/PacketFileSource"/>
      <uri index="13" value="com.ibm.streamsx.network.ipv6/native.function/function.xml"/>
      <uri index="16" value="com.ibm.streamsx.network.content/PacketContentAssembler"/>
      <uri index="3" value="com.ibm.streamsx.network.location/native.function/function.xml"/>
      <uri index="14" value="com.ibm.streamsx.network.mac/native.function/function.xml"/>
      <uri index="12" value="com.ibm.streamsx.network.enrichment/IPASNEnricher"/>
      <uri index="7" value="com.ibm.streamsx.network.parse/NetflowMessageParser"/>
      <uri index="19" value="com.ibm.streamsx.network.source/PacketDPDKSource"/>
      <uri index="9" value="com.ibm.streamsx.network.parse/DNSMessageParser"/>
      <uri index="4" value="com.ibm.streamsx.network.location/IPAddressLocation"/>
      <uri index="20" value="com.ibm.streamsx.network.source/PacketLiveSource"/>
      <uri index="15" value="com.ibm.streamsx.network.content/native.function/function.xml"/>
      <uri index="17" value="com.ibm.streamsx.network.source/native.function/function.xml"/>
      <uri index="10" value="com.ibm.streamsx.network.ipv4/native.function/function.xml"/>
      <uri index="6" value="com.ibm.streamsx.network.parse/DHCPMessageParser"/>
      <uri index="8" value="com.ibm.streamsx.network.parse/IPFIXMessageParser"/>
      <uri index="1" value="com.ibm.streamsx.network.datetimeformat/DateTimeFormattingFunctions.spl"/>
    </uriTable>
    <namespace name="com.ibm.streamsx.network.location">
      <primitiveOp language="Cpp" modelUriIndex="4" name="IPAddressLocation" public="true">
        <description>

IPAddressLocation is an operator for the IBM InfoSphere Streams product that
finds the geographical location of IP addresses received in input tuples,
based on the subnets they are part of, and
emits output tuples containing the country, state or province, city, latitude, and longitude of the subnets.
The operator may be configured with one or more output ports,
and each port may be configured to emit different tuples,
as specified by output filters.

The IPAddressLocation operator consumes input tuples containing IP version 4 and 6 addresses,
selects messages to emit as output tuples with filter expressions,
and assigns values to them with output attribute assignment expressions.
Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the IPAddressLocation operator: 

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.location.html|location result functions]

The IPAddressLocation operator emits a tuple on each output port for each input tuple,
optionally filtered by the 'outputFilters'
parameter.  Geographical location data is assigned to output
attributes with the location result functions, based on the IP addresses specified with the functions.
All attributes of all output ports must be assigned values, either with explicit
assignment expressions, or implicitly by copy from input tuples.

This operator is part of the network toolkit. To use it in an application,
include this statement in the SPL source file:

    use com.ibm.streamsx.network.location::*;

# Dependencies

The IPAddressLocation operator depends upon geographical location data 
provided by [https://www.maxmind.com/|Maxmind, Inc.]:

* GeoLite2 data is available free from [http://dev.maxmind.com/geoip/geoip2/geolite2/]

* GeoIP2 data, which is more accurate, may be purchased from [https://www.maxmind.com/en/geoip2-city/]

The required parameter `geographyDiectory` parameter must point to a directory containing
geography files, after downloading and unpacking. 

For GeoLite2 data, the geography files are:

    GeoLite2-City-Locations-en.csv
    GeoLite2-City-Blocks-IPv4.csv   
    GeoLite2-City-Blocks-IPv6.csv

For GeoIP2 data, the geography files are:

    GeoIP2-City-Locations-en.csv
    GeoIP2-City-Blocks-IPv4.csv   
    GeoIP2-City-Blocks-IPv6.csv

The format of the geography files is described here:

* [http://dev.maxmind.com/geoip/geoip2/geoip2-csv-databases/]

# Threads

The IPAddressLocation runs on the thread of the upstream operator that sends
input tuples to it. It does not start any threads of its own.

# Exceptions

The IPAddressLocation operator will throw an exception and terminate in these
situations:

* No output ports are specified.

* The `outputFilters` parameter is specified, and the number of expressions 
specified does not match the number of output ports specified.

# Sample Applications

The network toolkit includes several
[./tk$SampleIPAddressLocation/tk$SampleIPAddressLocation.html|sample applications]
that illustrate how to use this operator.

# References

The result functions that can be used in boolean
expressions for the `outputFilters` parameter
and in output attribute assignment expressions are described here:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.location.html|location result functions].  

The format of the GeoIP2 and GeoLite2 CSV files provided by [https://www.maxmind.com/|Maxmind, Inc.] is described here:

* [http://dev.maxmind.com/geoip/geoip2/geoip2-csv-databases/]

      </description>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="AttributeFree" name="geographyDirectory" optional="false" type="rstring">
          <description>
          This required parameter specifies a directory containing GeoIP2 or GeoLite2 files
          downloaded from [http://www.maxmind.com|MaxMind, Inc.] 
        </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="outputFilters" optional="true" type="boolean">
          <description>
          This optional parameter takes a list of SPL expressions that specify which input tuples
          should be emitted by the corresponding output port. The number of
          expressions in the list must match the number of output ports, and each
          expression must evaluate to a `boolean` value.  The output filter expressions may include any
          of the
          [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.location.html|location result functions].  
          
          The default value of the `outputFilters` parameter is an empty list, which
          causes each input tuple to be emitted by all output ports.
        </description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>
          The IPAddressLocation operator requires one input port. One or more input attributes
          must be of type `uint32` or `list&lt;uint8&gt;\[16\]` containing IP version 4 or 6 addresses, respectively.
          These attributes are specifed as arguments to the location result functions.
        </description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Preserving">
          <description>
          The IPAddressLocation operator requires one or more output ports.
          
          Each output port will produce one output tuple for each input tuple
          if the corresponding expression in the `outputFilters` parameter evaluates `true`,
          or if no `outputFilters` parameter is specified. 
          
          Output attributes can be assigned values with any SPL expression that evaluates
          to the proper type, and the expressions may include any of the 
          [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.location.html|location result functions].  
          Output attributes that match input attributes in name and
          type are copied automatically.
        </description>
        </outputPort>
      </primitiveOp>
      <function modelUriIndex="3" name="locationFound" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns true 
          if the location of the specified IP version 4 address was found, or false if not.
        </description>
        <prototype>public boolean locationFound(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationSubnet" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the IP subnet address and mask, in CIDR notation, 
          for the specified IP version 4 address,
          if one was found, or an empty string if not.
        </description>
        <prototype>public rstring locationSubnet(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationID" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the location identifier 
          for the specified IP version 4 address,
          if one was found, or an empty string if not.
        </description>
        <prototype>public rstring locationID(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationSubnetAddress" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This result function returns the IP version 4 subnet address 
          for the specified IP version 4 address,
          if one was found, or zero if not.
        </description>
        <prototype>public uint32 locationSubnetAddress(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationSubnetMask" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This result function returns the IP version 4 subnet mask
          for the specified IP version 4 address,
          if one was found, or zero if not.
        </description>
        <prototype>public uint32 locationSubnetMask(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationPostalCode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the postal code 
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationPostalCode(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationLatitude" native="true" public="true" returnType="float64" uriIndex="0">
        <description>
          This result function returns the latitude
          for the specified IP version 4 address,
          if its location was found, or zero if not.
        </description>
        <prototype>public float64 locationLatitude(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationLongitude" native="true" public="true" returnType="float64" uriIndex="0">
        <description>
          This result function returns the longitude
          for the specified IP version 4 address,
          if its location was found, or zero if not.
        </description>
        <prototype>public float64 locationLongitude(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationContinentName" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the continent name
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationContinentName(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationContinentCode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the continent code
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationContinentCode(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationCountryName" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the country name
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationCountryName(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationCountryCode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the country code
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationCountryCode(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision1Name" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the first division name (typically a state or province)
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationSubdivision1Name(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision1Code" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the first division code (typically a state or province)
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationSubdivision1Code(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision2Name" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the second division name
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationSubdivision2Name(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision2Code" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the second division code
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationSubdivision2Code(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationCityName" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the city name
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationCityName(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationMetroCode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the metro code 
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationMetroCode(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationTimezone" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the continent time zone
          for the specified IP version 4 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationTimezone(uint32 ipv4Address)</prototype>
        <parameter name="ipv4Address" type="uint32"/>
      </function>
      <function modelUriIndex="3" name="locationFound" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns true 
          if the location of the specified IP version 6 address was found, or false if not.
        </description>
        <prototype>public boolean locationFound(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationSubnet" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the IP subnet address and mask, in CIDR notation, 
          for the specified IP version 6 address,
          if one was found, or an empty string if not.
        </description>
        <prototype>public rstring locationSubnet(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationID" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the location identifier
          for the specified IP version 6 address,
          if one was found, or an empty string if not.
        </description>
        <prototype>public rstring locationID(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationSubnetAddress" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This result function returns the IP version 6 subnet address 
          for the specified IP version 6 address,
          if one was found, or zero if not.
        </description>
        <prototype>public list&lt;uint8&gt;[16] locationSubnetAddress(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationSubnetMask" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This result function returns the IP version 6 subnet mask
          for the specified IP version 6 address,
          if one was found, or zero if not.
        </description>
        <prototype>public list&lt;uint8&gt;[16] locationSubnetMask(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationPostalCode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the postal code 
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationPostalCode(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationLatitude" native="true" public="true" returnType="float64" uriIndex="0">
        <description>
          This result function returns the latitude
          for the specified IP version 6 address,
          if its location was found, or zero if not.
        </description>
        <prototype>public float64 locationLatitude(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationLongitude" native="true" public="true" returnType="float64" uriIndex="0">
        <description>
          This result function returns the longitude
          for the specified IP version 6 address,
          if its location was found, or zero if not.
        </description>
        <prototype>public float64 locationLongitude(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationContinentName" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the continent name
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationContinentName(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationContinentCode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the continent code
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationContinentCode(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationCountryName" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the country name
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationCountryName(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationCountryCode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the country code
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationCountryCode(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision1Name" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the first division name (typically a state or province)
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationSubdivision1Name(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision1Code" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the first division code (typically a state or province)
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationSubdivision1Code(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision2Name" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the second division name
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationSubdivision2Name(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision2Code" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the second division code
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationSubdivision2Code(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationCityName" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the city name
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationCityName(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationMetroCode" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the metro code 
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationMetroCode(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationTimezone" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the continent time zone
          for the specified IP version 6 address,
          if its location was found and it has one, or an empty string if not.
        </description>
        <prototype>public rstring locationTimezone(list&lt;uint8&gt;[16] ipv6Address)</prototype>
        <parameter name="ipv6Address" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="3" name="locationsFound" native="true" public="true" returnType="list&lt;boolean>" uriIndex="0">
        <description>
          This result function returns a list of booleans indicating whether or not the specified list of IP version 4 addresses were found.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;boolean&gt; locationsFound(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationSubnets" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of IP subnets and masks, in CIDR notation, corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationSubnets(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationIDs" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of IDs corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationIDs(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationSubnetAddresses" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of subnet addresses corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationSubnetAddresses(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationSubnetMasks" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of subnet masks corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationSubnetMasks(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationPostalCodes" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of postal codes corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationPostalCodes(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationLatitudes" native="true" public="true" returnType="list&lt;float64>" uriIndex="0">
        <description>
          This result function returns a list of latitudes corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;float64&gt; locationLatitudes(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationLongitudes" native="true" public="true" returnType="list&lt;float64>" uriIndex="0">
        <description>
          This result function returns a list of longitudes corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;float64&gt; locationLongitudes(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationContinentNames" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of continent names corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationContinentNames(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationContinentCodes" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of continent codes corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationContinentCodes(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationCountryNames" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of country names corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationCountryNames(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationCountryCodes" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of country codes corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationCountryCodes(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision1Names" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of the first subdivision names corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationSubdivision1Names(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision1Codes" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of first subdivision codes corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationSubdivision1Codes(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision2Names" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of the second subdivision names corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationSubdivision2Names(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationSubdivision2Codes" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of second subdivision codes corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationSubdivision2Codes(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationCityNames" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of city names corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationCityNames(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
      <function modelUriIndex="3" name="locationTimezones" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns a list of time zones corresponding to the specified list of IP version 4 addresses.
          Empty strings are returned for IP addresses where no location is found.
        </description>
        <prototype>public list&lt;rstring&gt; locationTimezones(list&lt;uint32&gt; ipv4Addresses)</prototype>
        <parameter name="ipv4Addresses" type="list&lt;uint32>"/>
      </function>
    </namespace>
    <namespace name="com.ibm.streamsx.network.parse">
      <primitiveOp language="Cpp" modelUriIndex="6" name="DHCPMessageParser" public="true">
        <description>

DHCPMessageParser is an operator for the IBM InfoSphere Streams product that
parses individual fields of DHCP messages received in input tuples, 
and emits tuples containing message data.  
The operator may be configured with one or more output ports,
and each port may be configured to emit different tuples,
as specified by output filters.
The tuples contain individual fields from the input message, as
specified by output attribute assignments.  

The DHCPMessageParser operator expects only DHCP messages in its input tuples,
without any of the headers that precede them in network packets.  
The [PacketLiveSource] and [PacketFileSource] operators can produce tuples that contain
DNS messages with the [PAYLOAD_DATA()] output attribute assignment function.

The DHCPMessageParser operator consumes input tuples containing DHCP messages,
parses individual fields in the messages, 
selects messages to emit as output tuples with output filter expressions,
and assigns values to them with output attribute assignment expressions.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the DHCPMessageParser operator: 

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|DHCP parser result functions]

The DHCPMessageParser operator emits a tuple on each output port for each input tuple,
optionally filtered by the 'outputFilters'
parameter.  Specified fields from the DHCP message in the input tuple are assigned to output
attributes with the DHCP parser result functions.
All attributes of all output ports must be assigned values, either with explicit
assignment expressions, or implicitly by copy from input tuples.

This operator is part of the network toolkit. To use it in an
application, include this statement in the SPL source file:

    use com.ibm.streamsx.network.parse::*;

# Threads

The DHCPMessageParser runs on the thread of the upstream operator that sends
input tuples to it. It does not start any threads of its own.

# Exceptions

The DHCPMessageParser operator will throw an exception and terminate in these
situations:

* No output ports are specified.

* The 'outputFilters' parameter is specified, and the number of expressions      
specified does not match the number of output ports specified.

# Sample Applications

The network toolkit includes several
[./tk$SampleDNSMessageParser/tk$SampleDNSMessageParser.html|sample applications]
that illustrate how to use this operator.

# References

DHCP messages and the fields they contain are described here:
  
* [https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol]
* [https://tools.ietf.org/html/rfc2131]
* [https://tools.ietf.org/html/rfc2132]
* [http://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml]

The result functions that can be used in boolean
expressions for the `outputFilters` parameter
and in output attribute assignment expressions are described here:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|DHCP result functions].  

      </description>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Attribute" name="messageAttribute" optional="false" type="blob">
          <description>

This required parameter specifies an input attribute of      
type `blob` that contains a DHCP messages to be parsed by the operator.

        </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="outputFilters" optional="true" type="boolean">
          <description>

This optional parameter takes a list of SPL expressions that specify which DHCP
messages should be emitted by the corresponding output port. The number of
expressions in the list must match the number of output ports, and each
expression must evaluate to a `boolean` value.  The output filter expressions may include any
of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|DHCP result functions].  

The default value of the `outputFilters` parameter is an empty list, which
causes all DHCP messages processed to be emitted by all output ports.
        
        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="processorAffinity" optional="true" type="uint32">
          <description>

This optional parameter takes one expression of type `uint32` that specifies
which processor core the operator's thread will run on.  The maximum value is
*P-1*, where *P* is the number of processors on the machine where the operator
will run.

Where the operator runs on a thread of its own, this parameter applies to the
operator's thread.  This is the situation when the operator's input port is
configured as a threaded input port, and when the operator has an @parallel
annotation.

Where the operator runs on the thread of an upstream operator, this parameter
affects the thread of the operator that sends tuples to it. This is the
situation when the operator is fused with an upstream operator.

The default is to dispatch the operator's thread on any available processor.

        </description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>

The DHCPMessageParser operator requires one input port.  One input attribute must be
of type `blob` and must contain a DHCP message, excluding the network headers that
proceed them in network packets, as specified by the required parameter
`messageAttribute`.

The [PAYLOAD_DATA()] output assignment function of the [PacketLiveSource] and
[PacketFileSource] operators produces attributes that
can be consumed by the DHCPMessageParser operator.

        </description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Preserving">
          <description>

The DHCPMessageParser operator requires one or more output ports.

Each output port will produce one output tuple for each input tuple
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified. 

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the 
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|DHCP result functions].  
Output attributes that match input attributes in name and
type are copied automatically.

        </description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="7" name="NetflowMessageParser" public="true">
        <description>

NetflowMessageParser is an operator for the IBM InfoSphere Streams product that 
parses individual fields of Netflow messages received in input tuples, 
and emits tuples containing message data.  
The operator may be configured with one or more output ports,
and each port may be configured to emit different tuples,
as specified by output filters.
The tuples contain individual fields from the input message, as
specified by output attribute assignments.  

The NetflowMessageParser operator expects only Netflow messages in its input tuples,
without any of the headers that precede them in network packets.  The
[PacketLiveSource] and [PacketFileSource] operators can produce tuples that contain
Netflow messages with the [PAYLOAD_DATA()] output attribute assignment function.

The NetflowMessageParser operator consumes input tuples containing Netflow messages,
parses indivdual fields in flow records within Netflow version 5 and version 9 messages, 
selects flows to emit as output tuples with filter expressions,
and assigns values to them with output attribute assignment expressions.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the NetflowMessageParser operator: 

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|Netflow parser result functions]

For Netflow version 5 messages, there are result functions for each field in the
message header and flow records.  For Netflow version 9 messages, there are
result functions for each field in the message header and the standardized
fields in flow records.  Nonstandardized fields in flow records can be accessed
by field number.

The NetflowMessageParser operator emits a tuple on each output port for each flow
record within a Netflow version 5 or 9 message, optionally filtered by the 'outputFilters'
parameter.  Specified fields from each flow record are assigned to output
attributes with the Netflow parser result functions.
All attributes of all output ports must be assigned values, either with explicit
assignment expressions, or implicitly by copy from input tuples.

This operator is part of the network toolkit. To use it in an application,
include this statement in the SPL source file:

    use com.ibm.streamsx.network.parse::*;

# Sample Applications

The network toolkit includes several
[./tk$SampleNetflowMessageParser/tk$SampleNetflowMessageParser.html|sample applications]
that illustrate how to use this operator.

# References

Netflow version 5 messages and the fields they contain are described here:

* [http://tools.ietf.org/html/rfc1035]
* [http://www.cisco.com/c/en/us/td/docs/net_mgmt/netflow_collection_engine/3-6/user/guide/format.html#wp1006108]

Netflow version 9 messages and the fields they contain are described here:
    
* [https://www.ietf.org/rfc/rfc3954.txt]
* [http://www.iana.org/assignments/ipfix/ipfix.xhtml]
* [http://www.cisco.com/en/US/technologies/tk648/tk362/technologies_white_paper09186a00800a3db9.html]

The result functions that can be used in boolean
expressions for the `outputFilters` parameter
and in output attribute assignment expressions are described here:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|Netflow result functions].  

      </description>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Attribute" name="messageAttribute" optional="false" type="blob">
          <description>

This required parameter specifies an input attribute of type `blob` that
contains a Netflow message to be parsed by the operator.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="sourceAttribute" optional="false" type="uint32">
          <description>


        </description></parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="outputFilters" optional="true" type="boolean">
          <description>

This optional parameter takes a list of SPL expressions that specify which Netflow
messages should be emitted by the corresponding output port. The number of
expressions in the list must match the number of output ports, and each
expression must evaluate to a `boolean` value.  The output filter expressions may include any
of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|Netflow result functions].  

The default value of the `outputFilters` parameter is an empty list, which
causes all Netflow messages processed to be emitted by all output ports.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="processorAffinity" optional="true" type="uint32">
          <description>

This optional parameter takes one expression of type `uint32` that specifies
which processor core the operator's thread will run on.  The maximum value is
*P-1*, where *P* is the number of processors on the machine where the operator
will run.

Where the operator runs on a thread of its own, this parameter applies to the
operator's thread.  This is the situation when the operator's input port is
configured as a threaded input port, and when the operator has an @parallel
annotation.

Where the operator runs on the thread of an upstream operator, this parameter
affects the thread of the operator that sends tuples to it. This is the
situation when the operator is fused with an upstream operator.

The default is to dispatch the operator's thread on any available processor.

        </description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>

The NetflowMessageParser operator requires one input port.  One input attribute must be
of type `blob` and must contain a Netflow message, excluding the network headers that
proceed them in network packets, as specified by the required parameter
`messageAttribute`.

The [PAYLOAD_DATA()] output assignment function of the [PacketLiveSource] and
[PacketFileSource] operators produces attributes that
can be consumed by the NetflowMessageParser operator.

        </description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Preserving">
          <description>

The NetflowMessageParser operator requires one or more output ports.

Each output port will produce one output tuple for each input tuple
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified. 

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the 
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|Netflow result functions].  
Output attributes that match input attributes in name and
type are copied automatically.

        </description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="8" name="IPFIXMessageParser" public="true">
        <description>

IPFIXMessageParser is an operator for the IBM InfoSphere Streams product that 
parses individual fields of IPFIX messages received in input tuples, 
and emits tuples containing message data.  
The operator may be configured with one or more output ports,
and each port may be configured to emit different tuples,
as specified by output filters.
The tuples contain individual fields from the input message, as
specified by output attribute assignments.  

The IPFIXMessageParser operator expects only IPFIX messages in its input tuples,
without any of the headers that precede them in network packets.  The
[PacketLiveSource] and [PacketFileSource] operators can produce tuples that contain
IPFIX messages with the [PAYLOAD_DATA()] output attribute assignment function.

The IPFIXMessageParser operator consumes input tuples containing IPFIX messages,
parses indivdual fields in flow records within IPFIX messages, 
selects flows to emit as output tuples with filter expressions,
and assigns values to them with output attribute assignment expressions.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the IPFIXMessageParser operator: 

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|IPFIX parser result functions]

There are result functions for each of the standardized fields.
Nonstandardized fields in flow records can be accessed by field number.

The IPFIXMessageParser operator emits a tuple on each output port for each flow
record within a IPFIX message, optionally filtered by the 'outputFilters'
parameter.  Specified fields from each flow record are assigned to output
attributes with the IPFIX parser result functions.
All attributes of all output ports must be assigned values, either with explicit
assignment expressions, or implicitly by copy from input tuples.

This operator is part of the network toolkit. To use it in an application,
include this statement in the SPL source file:

    use com.ibm.streamsx.network.parse::*;

# Sample Applications

The network toolkit includes several
[./tk$SampleIPFIXMessageParser/tk$SampleIPFIXMessageParser.html|sample applications]
that illustrate how to use this operator.

# References

IPFIX messages and the fields they contain are described here:

* [https://tools.ietf.org/html/rfc5101]
* [https://tools.ietf.org/html/rfc5102]
* [https://tools.ietf.org/html/rfc6313]
* [http://www.iana.org/assignments/ipfix/ipfix.xml#ipfix-information-element-registration-procedures]
* [http://www.iana.org/assignments/ipfix/ipfix.xhtml#ipfix-structured-data-types-semantics]
* [http://www.iana.org/assignments/enterprise-numbers/enterprise-numbers]

The result functions that can be used in boolean
expressions for the `outputFilters` parameter
and in output attribute assignment expressions are described here:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|IPFIX result functions].  

      </description>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Attribute" name="messageAttribute" optional="false" type="blob">
          <description>

This required parameter specifies an input attribute of type `blob` that
contains a IPFIX message to be parsed by the operator.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="sourceAttribute" optional="false" type="uint32">
          <description>


        </description></parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="outputFilters" optional="true" type="boolean">
          <description>

This optional parameter takes a list of SPL expressions that specify which IPFIX
messages should be emitted by the corresponding output port. The number of
expressions in the list must match the number of output ports, and each
expression must evaluate to a `boolean` value.  The output filter expressions may include any
of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|IPFIX result functions].  

The default value of the `outputFilters` parameter is an empty list, which
causes all IPFIX messages processed to be emitted by all output ports.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="processorAffinity" optional="true" type="uint32">
          <description>

This optional parameter takes one expression of type `uint32` that specifies
which processor core the operator's thread will run on.  The maximum value is
*P-1*, where *P* is the number of processors on the machine where the operator
will run.

Where the operator runs on a thread of its own, this parameter applies to the
operator's thread.  This is the situation when the operator's input port is
configured as a threaded input port, and when the operator has an @parallel
annotation.

Where the operator runs on the thread of an upstream operator, this parameter
affects the thread of the operator that sends tuples to it. This is the
situation when the operator is fused with an upstream operator.

The default is to dispatch the operator's thread on any available processor.

        </description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>

The IPFIXMessageParser operator requires one input port.  One input attribute must be
of type `blob` and must contain a IPFIX message, excluding the network headers that
proceed them in network packets, as specified by the required parameter
`messageAttribute`.

The [PAYLOAD_DATA()] output assignment function of the [PacketLiveSource] and
[PacketFileSource] operators produces attributes that
can be consumed by the IPFIXMessageParser operator.

        </description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Preserving">
          <description>

The IPFIXMessageParser operator requires one or more output ports.

Each output port will produce one output tuple for each input tuple
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified. 

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the 
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|IPFIX result functions].  
Output attributes that match input attributes in name and
type are copied automatically.

        </description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="9" name="DNSMessageParser" public="true">
        <description>

DNSMessageParser is an operator for the IBM InfoSphere Streams product that
parses individual fields of DNS messages received in input tuples, 
and emits tuples containing message data.  
The operator may be configured with one or more output ports,
and each port may be configured to emit different tuples,
as specified by output filters.
The tuples contain individual fields from the input message, as
specified by output attribute assignments.  

The DNSMessageParser operator expects only DNS messages in its input tuples,
without any of the headers that precede them in network packets.  The
[PacketLiveSource] and [PacketFileSource] operators can produce tuples that contain
DNS messages with the [PAYLOAD_DATA()] output attribute assignment function.

The DNSMessageParser operator consumes input tuples containing DNS messages,
parses individual fields in the messages, 
selects messages to emit as output tuples with filter expressions,
and assigns values to them with output attribute assignment expressions.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the DNSMessageParser operator: 

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|DNS parser result functions]

The DNSMessageParser operator emits a tuple on each output port for each input tuple,
optionally filtered by the 'outputFilters'
parameter.  Specified fields from the DNS message in the input tuple are assigned to output
attributes with the DNS parser result functions.
All attributes of all output ports must be assigned values, either with explicit
assignment expressions, or implicitly by copy from input tuples.

This operator is part of the network toolkit. To use it in an application,
include this statement in the SPL source file:

    use com.ibm.streamsx.network.parse::*;

# Threads

The DNSMessageParser runs on the thread of the upstream operator that sends
input tuples to it. It does not start any threads of its own.

# Exceptions

The DNSMessageParser operator will throw an exception and terminate in these
situations:

* No output ports are specified.

* The `outputFilters` parameter is specified, and the number of expressions 
specified does not match the number of output ports specified.

# Sample Applications

The network toolkit includes several
[./tk$SampleDNSMessageParser/tk$SampleDNSMessageParser.html|sample applications]
that illustrate how to use this operator.

# References

DNS messages and the fields they contain are described here:
  
* [http://en.wikipedia.org/wiki/Domain_Name_System]
* [http://tools.ietf.org/html/rfc1035]

The result functions that can be used in boolean
expressions for the `outputFilters` parameter
and in output attribute assignment expressions are described here:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|DNS result functions].  

      </description>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Attribute" name="messageAttribute" optional="false" type="blob">
          <description>

This required parameter specifies an input attribute of type `blob` that
contains a DNS message to be parsed by the operator.

        </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="outputFilters" optional="true" type="boolean">
          <description>

This optional parameter takes a list of SPL expressions that specify which DNS
messages should be emitted by the corresponding output port. The number of
expressions in the list must match the number of output ports, and each
expression must evaluate to a `boolean` value.  The output filter expressions may include any
of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|DNS result functions].  

The default value of the `outputFilters` parameter is an empty list, which
causes all DNS messages processed to be emitted by all output ports.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="processorAffinity" optional="true" type="uint32">
          <description>

This optional parameter takes one expression of type `uint32` that specifies
which processor core the operator's thread will run on.  The maximum value is
*P-1*, where *P* is the number of processors on the machine where the operator
will run.

Where the operator runs on a thread of its own, this parameter applies to the
operator's thread.  This is the situation when the operator's input port is
configured as a threaded input port, and when the operator has an @parallel
annotation.

Where the operator runs on the thread of an upstream operator, this parameter
affects the thread of the operator that sends tuples to it. This is the
situation when the operator is fused with an upstream operator.

The default is to dispatch the operator's thread on any available processor.

        </description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>

The DNSMessageParser operator requires one input port.  One input attribute must be
of type `blob` and must contain a DNS message, excluding the network headers that
proceed them in network packets, as specified by the required parameter
`messageAttribute`.

The [PAYLOAD_DATA()] output assignment function of the [PacketLiveSource] and
[PacketFileSource] operators produces attributes that
can be consumed by the DNSMessageParser operator.

        </description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Preserving">
          <description>

The DNSMessageParser operator requires one or more output ports.

Each output port will produce one output tuple for each input tuple
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified. 

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the 
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.parse.html|DNS result functions].  
Output attributes that match input attributes in name and
type are copied automatically.

        </description>
        </outputPort>
      </primitiveOp>
      <function modelUriIndex="5" name="parseError" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true` if an encoding error was detected while decoding the current packet,
          or `false` otherwise. Note that a value of `false` does not necessarily mean the packet has
          no encoding errors, since the operator only decodes the fields needed.
        </description>
        <prototype>public boolean parseError()</prototype>
      </function>
      <function modelUriIndex="5" name="parseErrorDescription" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns a description of an encoding error found while decoding the current packet,
          or an empty string if no enoding errors were found.
        </description>
        <prototype>public rstring parseErrorDescription()</prototype>
      </function>
      <function modelUriIndex="5" name="parseErrorOffset" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the offset from the beginning of the message to the encoding error found,
          or zero if no encoding errors were found.
        </description>
        <prototype>public uint32 parseErrorOffset()</prototype>
      </function>
      <function modelUriIndex="5" name="messagesProcessed" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of messages processed by the operator since it started,
          including the current message.
        </description>
        <prototype>public uint64 messagesProcessed()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_OPCODE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the DHCP message type
          ('1' for request, '2' for reply).
        </description>
        <prototype>public uint8 DHCP_OPCODE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_CLIENT_HARDWARE_TYPE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the
          client's hardware address type, for example, '1' for ethernet.
        </description>
        <prototype>public uint8 DHCP_CLIENT_HARDWARE_TYPE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_CLIENT_HARDWARE_ADDRESS" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns the DHCP client's network hardware address, for example, the MAC address
          of its ethernet adapter.
        </description>
        <prototype>public list&lt;uint8&gt; DHCP_CLIENT_HARDWARE_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_HOP_COUNT" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the number of relay agents separating the DHCP client and server.
        </description>
        <prototype>public uint8 DHCP_HOP_COUNT()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_TRANSACTION_IDENTIFIER" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the request correlator chosen by the DHCP client in its request and returned to it by server in its response.
        </description>
        <prototype>public uint32 DHCP_TRANSACTION_IDENTIFIER()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_SECONDS" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the elased time, in seconds, between the request and the response.
        </description>
        <prototype>public uint16 DHCP_SECONDS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_FLAGS" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the DHCP broadcast flag.
        </description>
        <prototype>public uint16 DHCP_FLAGS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_CLIENT_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the DHCP client's IP version 4 address when it requests renewal of its lease.
        </description>
        <prototype>public uint32 DHCP_CLIENT_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_YOUR_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 address
          leased to the client by the DHCP server, if the message is an
          acknowledgement granting a lease, or zero if not.
        </description>
        <prototype>public uint32 DHCP_YOUR_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_SERVER_NEXT" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 address of the next DHCP server to use.
        </description>
        <prototype>public uint32 DHCP_SERVER_NEXT()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_RELAY_AGENT" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 address of the relay agent between the DHCP client and server,
          if there is one, or zero otherwise.
        </description>
        <prototype>public uint32 DHCP_RELAY_AGENT()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_SERVER_HOSTNAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the name of the DHCP server, if it has one, or an empty string otherwise. This may be DHCP option 66, depending upon option 52.
        </description>
        <prototype>public rstring DHCP_SERVER_HOSTNAME()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_BOOTFILE_NAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the pathname of a boot file the client can use, if there is one, or an empty string otherwise. This may be DHCP option 67, depending upon option 52.
        </description>
        <prototype>public rstring DHCP_BOOTFILE_NAME()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_SUBNET_MASK" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the mask of the
          client's subnet, represented as an IP version 4 address, if DHCP option 1 is
          included in the message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_SUBNET_MASK()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_TIME_OFFSET" native="true" public="true" returnType="int32" uriIndex="0">
        <description>
          This parser result function returns the time offset of
          the client's subnet, relative to GMT/UTC, in seconds, if DHCP option 2
          is included in the message, or zero if not.
        </description>
        <prototype>public int32 DHCP_TIME_OFFSET()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_ROUTERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          routers on client's subnet, represented as IP version 4 addresses, if DHCP
          option 3 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_ROUTERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_TIME_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          time servers, represented as IP version 4 addresses, if DHCP option 4 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_TIME_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NAME_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          name servers (not DNS servers, see next option), represented as IP version 4
          addresses, if DHCP option 5 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_NAME_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_DNS_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          DNS servers, represented as IP version 4 addresses, if DHCP option 6 is included
          in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_DNS_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_LOG_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          log servers, represented as IP version 4 addresses, if DHCP option 7 is included
          in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_LOG_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_COOKIE_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          cookie servers, represented as IP version 4 addresses, if DHCP option 8 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_COOKIE_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_LPR_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          print servers, represented as IP version 4 addresses, if DHCP option 9 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_LPR_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_IMPRESS_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list
          of Impress servers, represented as IP version 4 addresses, if DHCP option 10 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_IMPRESS_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_RESOURCE_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list
          of resource location servers, represented as IP version 4 addresses, if DHCP
          option 11 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_RESOURCE_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_HOST_NAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the hostname of the
          client, if DHCP option 12 is included in the message, or an empty string if not.
        </description>
        <prototype>public rstring DHCP_HOST_NAME()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_BOOT_FILE_SIZE" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the size of
          boot file in 512 byte blocks, if DHCP option 13 is included in the
          message, or zero if not.
        </description>
        <prototype>public uint16 DHCP_BOOT_FILE_SIZE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_MERIT_DUMP_FILE" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the pathname
          of a file for client's core dump image, if DHCP option 14 is included in
          the message, or an empty string if not.
        </description>
        <prototype>public rstring DHCP_MERIT_DUMP_FILE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_DOMAIN_NAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the domain name
          the client should use with DNS, if DHCP option 15 is included in the
          message, or an empty string if not.
        </description>
        <prototype>public rstring DHCP_DOMAIN_NAME()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_SWAP_SERVER" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 address
          of the client's swap server, if DHCP option 16 is included in the
          message.
        </description>
        <prototype>public uint32 DHCP_SWAP_SERVER()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_ROOT_PATH" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the pathname of the
          client's root disk (for diskless workstations), if DHCP option 17 is
          included in the message, or an empty string if not.
        </description>
        <prototype>public rstring DHCP_ROOT_PATH()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_EXTENSIONS_PATH" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns BOOTP
          extensions, if DHCP option 18 is included in the message, or an empty
          string if not.
        </description>
        <prototype>public rstring DHCP_EXTENSIONS_PATH()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_IP_FORWARDING" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true` if the
          client should forward IP packets, if DHCP option 19 is included in the
          message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_IP_FORWARDING()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NONLOCAL_SOURCE_ROUTING" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns
          `true` if the client should forward IP packets with non-local source
          routing, if DHCP option 20 is included in the message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_NONLOCAL_SOURCE_ROUTING()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NONLOCAL_SOURCE_FILTERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns
          a list of IP version 4 address/mask pairs for filtering source packets, if DHCP
          option 21 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_NONLOCAL_SOURCE_FILTERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_MAXIMUM_REASSEMBLY_SIZE" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the
          maximum size of reassembled packets, if DHCP option 22 is included in
          the message, or zero if not.
        </description>
        <prototype>public uint16 DHCP_MAXIMUM_REASSEMBLY_SIZE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_IP_DEFAULT_TTL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the default IP
          time-to-live for outgoing packets, if DHCP option 23 is included in the
          message, or zero if not.
        </description>
        <prototype>public uint8 DHCP_IP_DEFAULT_TTL()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_MTU_AGING_TIMEOUT" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the time to
          use when aging path MTU values, in seconds, if DHCP option 24 is
          included in the message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_MTU_AGING_TIMEOUT()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_MTU_PLATEAU_TABLE" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list
          of MTU sizes for path discovery, if DHCP option 25 is included in the
          message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint16&gt; DHCP_MTU_PLATEAU_TABLE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_INTERFACE_MTU" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the MTU size to
          use on this interface, if DHCP option 26 is included in the message, or
          zero if not.
        </description>
        <prototype>public uint16 DHCP_INTERFACE_MTU()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_ALL_SUBNETS_LOCAL" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true` if
          all subnets use the same MTU size, if DHCP option 27 is included in the
          message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_ALL_SUBNETS_LOCAL()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_BROADCAST_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4
          address to use when broadcasting on subnet, if DHCP option 28 is
          included in the message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_BROADCAST_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_PERFORM_MASK_DISCOVERY" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true`
          when client should perform subnet mask discovery, if DHCP option 29 is
          included in the message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_PERFORM_MASK_DISCOVERY()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_MASK_SUPPLIER" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true` when
          client should respond to subnet mask discovery, if DHCP option 30 is
          included in the message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_MASK_SUPPLIER()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_PERFORM_ROUTER_DISCOVERY" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns
          `true` when the client should solicit routers, if DHCP option 31 is
          included in the message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_PERFORM_ROUTER_DISCOVERY()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_ROUTER_SOLICITATION_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns
          the IP version 4 address to which router solicitations should be sent, if DHCP
          option 32 is included in the message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_ROUTER_SOLICITATION_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_STATIC_ROUTES" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          IP version 4 address pairs for the client's static routing table, if DHCP option
          33 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_STATIC_ROUTES()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_TRAILER_ENCAPSULATION" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true`
          when the client should negotiate trailers, if DHCP option 34 is included
          in the message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_TRAILER_ENCAPSULATION()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_ARP_CACHE_TIMEOUT" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the timeout
          for ARP cache entries, in seconds, if DHCP option 35 is included in the
          message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_ARP_CACHE_TIMEOUT()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_ETHERNET_ENCAPSULATION" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true`
          when the client should use ethernet encapsulation, if DHCP option 36 is
          included in the message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_ETHERNET_ENCAPSULATION()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_TCP_DEFUALT_TTL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the default TCP
          time-to-live for outgoing segments, if DHCP option 37 is included in the
          message, or zero if not.
        </description>
        <prototype>public uint8 DHCP_TCP_DEFUALT_TTL()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_TCP_KEEPALIVE_INTERVAL" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the
          time the client should wait before sending TCP keepalive messages, in
          seconds, if DHCP option 38 is included in the message, or zero if not.          
        </description>
        <prototype>public uint32 DHCP_TCP_KEEPALIVE_INTERVAL()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_TCP_KEEPALIVE_GARBAGE" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true`
          when the client should send a byte of garbage with TCP keepalive
          messages, if DHCP option 39 is included in the message, or `false` if not.
        </description>
        <prototype>public boolean DHCP_TCP_KEEPALIVE_GARBAGE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NIS_DOMAIN" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the name of the
          client's NIS domain, if DHCP option 40 is included in the message, or an
          empty string if not.
        </description>
        <prototype>public rstring DHCP_NIS_DOMAIN()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NIS_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          NIS servers, represented as IP version 4 addresses, if DHCP option 41 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_NIS_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NTP_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          NTP servers, represented as IP version 4 addresses, if DHCP option 42 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_NTP_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_VENDOR_INFORMATION" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns
          vendor-specific information, if DHCP option 43 is included in the
          message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint8&gt; DHCP_VENDOR_INFORMATION()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NETBIOS_NAME_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a
          list of NetBIOS-over-TCP name servers, represented as IP version 4 addresses, if
          DHCP option 44 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_NETBIOS_NAME_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NETBIOS_NBDD_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a
          list of NetBIOS-over-TCP NBDD servers, represented as IP version 4 addresses, if
          DHCP option 45 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_NETBIOS_NBDD_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NETBIOS_NODE_TYPE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the type of
          NetBIOS-over-TCP node, if DHCP option 46 is included in the message, or
          zero if not.
        </description>
        <prototype>public uint8 DHCP_NETBIOS_NODE_TYPE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NETBIOS_SCOPE" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the client's
          NetBIOS-over-TCP scope parameter, if DHCP option 47 is included in the
          message, or an empty string if not.
        </description>
        <prototype>public rstring DHCP_NETBIOS_SCOPE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_XWINDOW_FONT_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a
          list of X-Windows font servers, represented as IP version 4 addresses, if DHCP
          option 48 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_XWINDOW_FONT_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_XWINDOW_DISPLAY_MANAGERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns
          a list of X-Windows display managers, represented as IP version 4 addresses, if
          DHCP option 49 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_XWINDOW_DISPLAY_MANAGERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_REQUESTED_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the client's
          requested address, as an IP version 4 address, if DHCP option 50 is included in
          the message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_REQUESTED_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_ADDRESS_LEASE_TIME" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the
          duration of the address lease, in seconds, if DHCP option 51 is included
          in the message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_ADDRESS_LEASE_TIME()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_OPTION_OVERLOAD_FLAGS" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns flags indicating whether the `sname` and `file` fields
          in the DHCP message header contain the server's host name and client's boot file name,
          or additional DHCP options, if DHCP option 52 is included in the message, or zero if not.
        </description>
        <prototype>public uint8 DHCP_OPTION_OVERLOAD_FLAGS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_MESSAGE_TYPE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the type of this DHCP message, if DHCP option 53 is included in the message, or zero if
          not, for example:

          * '1' for Discover, 
          * '2' for Offer, 
          * '3' for Request, 
          * '4' for Decline, 
          * '5' for Positive Acknowledge, 
          * '6' for Negative Acknowledge, 
          * '7' for Release, or
          * '8' for Inform.
        </description>
        <prototype>public uint8 DHCP_MESSAGE_TYPE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_SERVER_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4
          address of DHCP server, if DHCP option 54 is included in the message, or
          zero if not.
        </description>
        <prototype>public uint32 DHCP_SERVER_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_PARAMETER_REQUESTS" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns a list
          of requested DHCP parameters, expressed as option codes, if DHCP option
          55 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint8&gt; DHCP_PARAMETER_REQUESTS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_ERROR_MESSAGE" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns an error
          message from server, if request failed, if DHCP option 56 is included in
          the message.
        </description>
        <prototype>public rstring DHCP_ERROR_MESSAGE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_MAXIMUM_MESSAGE_SIZE" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the
          maximum size of DHCP message, if DHCP option 57 is included in the
          message, or zero if not.
        </description>
        <prototype>public uint16 DHCP_MAXIMUM_MESSAGE_SIZE()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_RENEWAL_TIME" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns then time from
          address lease to renewal, in seconds, if DHCP option 58 is included in
          the message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_RENEWAL_TIME()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_REBINDING_TIME" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the time from
          address lease to rebinding, in seconds, if DHCP option 59 is included in
          the message, or zero if not.
        </description>
        <prototype>public uint32 DHCP_REBINDING_TIME()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_VENDOR_IDENTIFIER" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns
          vendor-specific information, if DHCP option 60 is included in the
          message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint8&gt; DHCP_VENDOR_IDENTIFIER()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_CLIENT_IDENTIFIER" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns
          client-specific information, if DHCP option 61 is included in the
          message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint8&gt; DHCP_CLIENT_IDENTIFIER()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NISPLUS_DOMAIN" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the name of
          the client's NIS+ domain, if DHCP option 64 is included in the message.
        </description>
        <prototype>public rstring DHCP_NISPLUS_DOMAIN()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NISPLUS_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list
          of NIS+ servers, represented as IP version 4 addresses, if DHCP option 65 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_NISPLUS_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_MOBILE_IP_HOME_AGENTS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a
          list of mobile IP home agents, represented as IP version 4 addresses, if DHCP
          option 68 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_MOBILE_IP_HOME_AGENTS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_SMTP_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          SMTP servers, represented as IP version 4 addresses, if DHCP option 69 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_SMTP_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_POP3_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          POP3 servers, represented as IP version 4 addresses, if DHCP option 70 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_POP3_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_NNTP_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          NNTP servers, represented as IP version 4 addresses, if DHCP option 71 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_NNTP_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_WWW_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          WWW servers, represented as IP version 4 addresses, if DHCP option 72 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_WWW_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_FINGER_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          Finger servers, represented as IP version 4 addresses, if DHCP option 73 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_FINGER_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_IRC_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          IRC servers, represented as IP version 4 addresses, if DHCP option 74 is
          included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_IRC_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_STREETTALK_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a
          list of StreetTalk servers, represented as IP version 4 addresses, if DHCP
          option 75 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_STREETTALK_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DHCP_STDA_SERVERS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of
          StreetTalk Directory Assistance servers, represented as IP version 4 addresses,
          if DHCP option 76 is included in the message, or an empty list if not.
        </description>
        <prototype>public list&lt;uint32&gt; DHCP_STDA_SERVERS()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_IDENTIFIER" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the DNS client's request correlator in the current message, and returned by the server in its response.
        </description>
        <prototype>public uint16 DNS_IDENTIFIER()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_OPCODE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the operation code requested by the DNS client in the current message, for example,

          * '1' for standard queries, 
          * '2' for inverse queries, or
          * '3' for server status requests.
        </description>
        <prototype>public uint8 DNS_OPCODE()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_RESPONSE_CODE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the response code from the DNS server in the current message, for example,

          * '0' for OK, 
          * '1' for Format Error, 
          * '2' for Server Failure, 
          * '3' for Name Error, 
          * '4' for not implemented, or
          * '5' for Server Refused.
        </description>
        <prototype>public uint8 DNS_RESPONSE_CODE()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_RESPONSE_FLAG" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true` if the current message is a response sent by a DNS server,
          or `false` if it is a request sent by a DNS client.
        </description>
        <prototype>public boolean DNS_RESPONSE_FLAG()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_AUTHORITATIVE_FLAG" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true` if the 'authoritative' flag is set in the current message, 
          or `false` if not.
        </description>
        <prototype>public boolean DNS_AUTHORITATIVE_FLAG()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_TRUNCATION_FLAG" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This parser result function returns `true` if the 'truncation' flag is set in the current message, 
          or `false` if not.
        </description>
        <prototype>public boolean DNS_TRUNCATION_FLAG()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_QUESTION_COUNT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the number of 'question' resource records in the current message.
        </description>
        <prototype>public uint16 DNS_QUESTION_COUNT()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_QUESTION_NAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the 'name' field of the first 'question' resource record in the current message,
          if there is one, or an empty string if not.
          Note that if the DNS message does contain a 'question'
          resource record, and the name is encoded incorrecty, this function may
          return an empty or truncated string.  In this case, the `parseError()`
          function will return `true`.
        </description>
        <prototype>public rstring DNS_QUESTION_NAME()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_QUESTION_NAMES" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'name' fields in the 'question' resource records in the current message.
          Note that if any of the names are encoded
          incorrectly, this function may return an empty or truncated list, and
          some or all of the names may be empty or truncated. In this case, the
          `parseError()` function will return `true`.
        </description>
        <prototype>public list&lt;rstring&gt; DNS_QUESTION_NAMES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_QUESTION_TYPE" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the 'type' field of the first 'question' resource record in the current message,
          for example:

          * '1' for IP version 4 address to domain name lookup ('A' records),
          * '5' for domain name to canonical domain name lookup ('CNAME' records),
          * '12' for domain name to IP address lookup ('TXT' records), or
          * '28' for IP version 6 address to domain name lookup ('AAAA' records).
        </description>
        <prototype>public uint16 DNS_QUESTION_TYPE()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_QUESTION_TYPES" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'type' fields in the 'question' resource records in the current message.
        </description>
        <prototype>public list&lt;uint16&gt; DNS_QUESTION_TYPES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_QUESTION_CLASS" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the 'class' field of the first 'question' resource record in the current message,
          for example, '1' for Internet adddresses ('IN' records),
        </description>
        <prototype>public uint16 DNS_QUESTION_CLASS()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_QUESTION_CLASSES" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'class' fields in the 'question' resource records in the current message.
        </description>
        <prototype>public list&lt;uint16&gt; DNS_QUESTION_CLASSES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_COUNT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the number of 'answer' resource records in the current message.
        </description>
        <prototype>public uint16 DNS_ANSWER_COUNT()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_NAMES" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'name' fields in the 'answer' resource records in the current message.
          Note that if any of the names are encoded
          incorrectly, this function may return an empty or truncated list, and
          some or all of the names may be empty or truncated. In this case, the
          `parseError()` function will return `true`.
        </description>
        <prototype>public list&lt;rstring&gt; DNS_ANSWER_NAMES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_TYPES" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'type' fields in the 'answer' resource records in the current message.
        </description>
        <prototype>public list&lt;uint16&gt; DNS_ANSWER_TYPES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_CLASSES" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'class' fields in the 'answer' resource records in the current message.
        </description>
        <prototype>public list&lt;uint16&gt; DNS_ANSWER_CLASSES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_TTLS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'time to live' fields in the 'answer' resource records in the current message.
        </description>
        <prototype>public list&lt;uint32&gt; DNS_ANSWER_TTLS()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_DATA" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'data' fields in the 'answer' resource records in the current message.
        </description>
        <prototype>public list&lt;rstring&gt; DNS_ANSWER_DATA()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_CANONICAL" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the 'data' field of the first 'answer' resource record,
          if there is one with
          a 'type' value of '5' (meaning, the answer is a canonical domain name from a type 'CNAME' record),
          or an empty string if not.
        </description>
        <prototype>public rstring DNS_ANSWER_CANONICAL()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_ADDRESS" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the 'data' field of the first 'answer' resource record,
          if there is one with a 'type' value 
          of '1' or '28' (meaning, the answer is an IP version 4 or version 6 address from a type 'A' or 'AAAA' record, respectively),
          as a string value,
          or an empty string if not.
        </description>
        <prototype>public rstring DNS_ANSWER_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_IPV4_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the 'data' field of the first 'answer' resource record, if 
          there is one with a
          'type' value of '1' (meaning, the answer is an IP version 4 address from a type 'A' record),
          as a binary value,
          or zero if not.
        </description>
        <prototype>public uint32 DNS_ANSWER_IPV4_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_IPV6_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This parser result function returns the 'data' field of the first 'answer' resource record, if 
          there is one with a 
          'type' value of '28' (meaning, the answer is an IP version 6 address from a type 'AAAA' record),
          as a binary value,
          or zero if not.
        </description>
        <prototype>public list&lt;uint8&gt;[16] DNS_ANSWER_IPV6_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_ADDRESSES" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'data' fields in the 'answer' resource records 
          that have a 'type' value of 
          '1' or '28' (meaning, the answer is an IP version 4 or version 6 address from a type 'A' or 'AAAA' record, respectively),
          as string values.
        </description>
        <prototype>public list&lt;rstring&gt; DNS_ANSWER_ADDRESSES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_IPV4_ADDRESSES" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns the 'data' fields of the 'answer' resource records that have 
          'type' values of '1' (meaning, the answers are IP version 4 addresses from type 'A' records),
          as a list of binary values.
        </description>
        <prototype>public list&lt;uint32&gt; DNS_ANSWER_IPV4_ADDRESSES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ANSWER_IPV6_ADDRESSES" native="true" public="true" returnType="list&lt;list&lt;uint8>[16]>" uriIndex="0">
        <description>
          This parser result function returns the 'data' fields of the 'answer' resource records that have 
          'type' values of '28' (meaning, the answers IP version 6 addresses from type 'AAAA' records),
          as a binary values.
        </description>
        <prototype>public list&lt;list&lt;uint8&gt;[16]&gt; DNS_ANSWER_IPV6_ADDRESSES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_NAMESERVER_COUNT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the number of 'name server' resource records in the current message.
        </description>
        <prototype>public uint16 DNS_NAMESERVER_COUNT()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_NAMESERVER_NAMES" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'name' fields in the 'name server' resource records in the current message.
          Note that if any of the names are encoded
          incorrectly, this function may return an empty or truncated list, and
          some or all of the names may be empty or truncated. In this case, the
          `parseError()` function will return `true`.
        </description>
        <prototype>public list&lt;rstring&gt; DNS_NAMESERVER_NAMES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_NAMESERVER_TYPES" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'type' fields in the 'name server' resource records in the current message.
        </description>
        <prototype>public list&lt;uint16&gt; DNS_NAMESERVER_TYPES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_NAMESERVER_CLASSES" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'class' fields in the 'name server' resource records in the current message.
        </description>
        <prototype>public list&lt;uint16&gt; DNS_NAMESERVER_CLASSES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_NAMESERVER_TTLS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'time to live' fields in the 'name server' resource records in the current message.
        </description>
        <prototype>public list&lt;uint32&gt; DNS_NAMESERVER_TTLS()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_NAMESERVER_DATA" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'data' fields in the 'name server' resource records in the current message.
        </description>
        <prototype>public list&lt;rstring&gt; DNS_NAMESERVER_DATA()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ADDITIONAL_COUNT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the number of 'additional' resource records in the current message.
        </description>
        <prototype>public uint16 DNS_ADDITIONAL_COUNT()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ADDITIONAL_NAMES" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'name' fields in the 'additional' resource records in the current message.
          Note that if any of the names are encoded
          incorrectly, this function may return an empty or truncated list, and
          some or all of the names may be empty or truncated. In this case, the
          `parseError()` function will return `true`.
        </description>
        <prototype>public list&lt;rstring&gt; DNS_ADDITIONAL_NAMES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ADDITIONAL_TYPES" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'type' fields in the 'name server' resource records in the current message.
        </description>
        <prototype>public list&lt;uint16&gt; DNS_ADDITIONAL_TYPES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ADDITIONAL_CLASSES" native="true" public="true" returnType="list&lt;uint16>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'class' fields in the 'name server' resource records in the current message.
        </description>
        <prototype>public list&lt;uint16&gt; DNS_ADDITIONAL_CLASSES()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ADDITIONAL_TTLS" native="true" public="true" returnType="list&lt;uint32>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'time to live' fields in the 'name server' resource records in the current message.
        </description>
        <prototype>public list&lt;uint32&gt; DNS_ADDITIONAL_TTLS()</prototype>
      </function>
      <function modelUriIndex="5" name="DNS_ADDITIONAL_DATA" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This parser result function returns a list of the 'data' fields in the 'name server' resource records in the current message.
        </description>
        <prototype>public list&lt;rstring&gt; DNS_ADDITIONAL_DATA()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_VERSION" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the Netflow version of the current message, either '5' or '9'.
        </description>
        <prototype>public uint16 NETFLOW_VERSION()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_COUNT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the number of Netflow records in the current message,
          including templates, options, and flows.
        </description>
        <prototype>public uint16 NETFLOW_COUNT()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SYSTEM_UPTIME" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the elapsed time from when the router started until the current message was sent,
          in milliseconds.
        </description>
        <prototype>public uint32 NETFLOW_SYSTEM_UPTIME()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_UNIX_SECONDS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the time that the current message was sent, in seconds,
          according to the router's clock, relative to the beginning of the Unix epoch 
          (at midnight on the first of January in Greenwich, England).
        </description>
        <prototype>public uint32 NETFLOW_UNIX_SECONDS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_UNIX_NANOSECONDS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the fractional part of NETFLOW_UNIX_SECONDS(), in nanoseconds,
          for Netflow version 5 messages only.
        </description>
        <prototype>public uint32 NETFLOW_UNIX_NANOSECONDS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SEQUENCE_NUMBER" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the sequence number assigned to the current message by the router.
        </description>
        <prototype>public uint32 NETFLOW_SEQUENCE_NUMBER()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SOURCE_ID" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the port identifier of the router.
        </description>
        <prototype>public uint32 NETFLOW_SOURCE_ID()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FIELD_AS_INTEGER" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the value of the specified Netflow version 9 field in the current flow record, 
          if present,
          represented as an unsigned integer, or zero if not.
        </description>
        <prototype>public uint64 NETFLOW_FIELD_AS_INTEGER(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FIELD_AS_STRING" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the value of the specified Netflow version 9 field in the current flow record, 
          if present, 
          represented as a string, or an empty string if not.
        </description>
        <prototype>public rstring NETFLOW_FIELD_AS_STRING(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FIELD_AS_BYTE_LIST" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns the value of the specified Netflow version 9 field in the current flow record, 
          if present, 
          represented as list of unsigned bytes, or an empty list if not.
        </description>
        <prototype>public list&lt;uint8&gt; NETFLOW_FIELD_AS_BYTE_LIST(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IN_BYTES" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of bytes that entered the router for the current flow record, 
          if available, or zero if not.
          For Netflow version 5, this is the `dOctets` field.
          For Netflow version 9, this is field 1.
        </description>
        <prototype>public uint64 NETFLOW_IN_BYTES()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IN_PKTS" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of packets that entered the router for the current flow record, 
          if available, or zero if not.
          For Netflow version 5, this is the `dPkts` field.
          For Netflow version 9, this is field 2.
        </description>
        <prototype>public uint64 NETFLOW_IN_PKTS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FLOWS" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of flows that were aggregated for the current flow record,
          if available, or zero if not.
          For Netflow version 9, this is field 3.
        </description>
        <prototype>public uint64 NETFLOW_FLOWS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_PROTOCOL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the IP protocol number for the current flow record, 
          if available,
          for example, '17' for UDP, or '6' for TCP, or zero if not.
          For Netflow version 5, this is the `prot` field.
          For Netflow version 9, this is field 4.
        </description>
        <prototype>public uint8 NETFLOW_PROTOCOL()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SRC_TOS" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the IP 'type of service' byte for the current flow record on entering the router,
          if available, or zero if not.
          For Netflow version 5, this is the `tos` field.
          For Netflow version 9, this is field 5.
        </description>
        <prototype>public uint8 NETFLOW_SRC_TOS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_TCP_FLAGS" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the cumulative value of all TCP flags in the current flow record, 
          that is, the logical 'or' of the TCP flags in all packets in the flow,
          if available, or zero if not.
          For Netflow version 5, this is the `tcp_flags` field.
          For Netflow version 9, this is field 6.
        </description>
        <prototype>public uint8 NETFLOW_TCP_FLAGS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SRC_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the TCP or UDP port number of the source endpoint of the current flow record,
          if available, or zero if not.
          For Netflow version 5, this is the `srcport` field.
          For Netflow version 9, this is field 7.
        </description>
        <prototype>public uint16 NETFLOW_SRC_PORT()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV4_SRC_ADDR" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 address of the source endpoint of the current flow record,
          if available, or zero if not.
          For Netflow version 5, this is the `srcaddr` field.
          For Netflow version 9, this is field 8.
        </description>
        <prototype>public uint32 NETFLOW_IPV4_SRC_ADDR()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SRC_MASK" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the number of significant bits in the 
          IP version 4 address of the source endpoint of the current flow record,
          if available, or zero if not.
          For Netflow version 5, this is the `src_mask` field.
          For Netflow version 9, this is field 9.
        </description>
        <prototype>public uint8 NETFLOW_SRC_MASK()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_INPUT_INTERFACE" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the interface index where the current flow entered the router,
          if available, or zero if not.
          For Netflow version 5, this is the `input` field.
          For Netflow version 9, this is field 10.
        </description>
        <prototype>public uint32 NETFLOW_INPUT_INTERFACE()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_DST_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the TCP or UDP port number of the destination endpoint of the current flow record,
          if available, or zero if not.
          For Netflow version 5, this is the `dstport` field.
          For Netflow version 9, this is field 11.
        </description>
        <prototype>public uint16 NETFLOW_DST_PORT()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV4_DST_ADDR" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 address of the destination endpoint of the current flow record,
          if available, or zero if not.
          For Netflow version 5, this is the `dstaddr` field.
          For Netflow version 9, this is field 12.
        </description>
        <prototype>public uint32 NETFLOW_IPV4_DST_ADDR()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_DST_MASK" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the number of significant bits in the 
          IP version 4 address of the destination endpoint of the current flow record,
          if available, or zero if not.
          For Netflow version 5, this is the `dst_mask` field.
          For Netflow version 9, this is field 13.
        </description>
        <prototype>public uint8 NETFLOW_DST_MASK()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_OUTPUT_INTERFACE" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the interface index where the current flow left the router,
          if available, or zero if not.
          For Netflow version 5, this is the `output` field.
          For Netflow version 9, this is field 14.
        </description>
        <prototype>public uint32 NETFLOW_OUTPUT_INTERFACE()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV4_NEXT_HOP" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 address of the next router towards the destination endpoint of the current flow.
          For Netflow version 5, this is the `nexthop` field.
          For Netflow version 9, this is field 15.
        </description>
        <prototype>public uint32 NETFLOW_IPV4_NEXT_HOP()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SRC_AS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the BGP autonomous system number of the source endpoint of the current flow.
          For Netflow version 5, this is the `src_as` field.
          For Netflow version 9, this is field 16. 
        </description>
        <prototype>public uint32 NETFLOW_SRC_AS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_DST_AS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the BGP autonomous system number of the destination endpoint of the current flow.
          For Netflow version 5, this is the `dst_as` field.
          For Netflow version 9, this is field 17. 
        </description>
        <prototype>public uint32 NETFLOW_DST_AS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_BGP_IPV4_NEXT_HOP" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 address of the next router in the BGP domain.
          For Netflow version 9, this is field 18. 
        </description>
        <prototype>public uint32 NETFLOW_BGP_IPV4_NEXT_HOP()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MUL_DST_PKTS" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of outgoing multicast packets in the current flow.
          For Netflow version 9, this is field 19.
        </description>
        <prototype>public uint64 NETFLOW_MUL_DST_PKTS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MUL_DST_BYTES" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of outgoing multicast bytes in the current flow.
          For Netflow version 9, this is field 20.
        </description>
        <prototype>public uint64 NETFLOW_MUL_DST_BYTES()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_LAST_SWITCHED" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the value of NETFLOW_SYSTEM_UPTIME() for the last packet of the current flow,
          that is,
          the time that the last packet in this flow
          passed through the router, relative to when the router was booted, in milliseconds.
          For Netflow version 5, this is the `last` field.
          For Netflow version 9, this is field 21.
        </description>
        <prototype>public uint32 NETFLOW_LAST_SWITCHED()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FIRST_SWITCHED" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the value of NETFLOW_SYSTEM_UPTIME() for the first packet of the current flow,
          that is,
          the time that the first packet in this flow
          passed through the router, relative to when the router was booted, in milliseconds.
          For Netflow version 5, this is the `first` field.
          For Netflow version 9, this is field 22.
        </description>
        <prototype>public uint32 NETFLOW_FIRST_SWITCHED()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_OUT_BYTES" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of bytes that left the router for the current flow.
          For Netflow version 9, this is field 23.
        </description>
        <prototype>public uint64 NETFLOW_OUT_BYTES()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_OUT_PKTS" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of packets that left the router for the current flow.
          For Netflow version 9, this is field 24.
        </description>
        <prototype>public uint64 NETFLOW_OUT_PKTS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MIN_PKT_LNGTH" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the minimum packet length for the current flow.
          For Netflow version 9, this is field 25.
        </description>
        <prototype>public uint16 NETFLOW_MIN_PKT_LNGTH()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MAX_PKT_LNGTH" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the maximum packet length for the current flow.
          For Netflow version 9, this is field 26.
        </description>
        <prototype>public uint16 NETFLOW_MAX_PKT_LNGTH()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV6_SRC_ADDR" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This parser result function returns the IP version 6 address of the source endpoint of the current flow record,
          if available, or an empty list if not.
          For Netflow version 9, this is field 27.
        </description>
        <prototype>public list&lt;uint8&gt;[16] NETFLOW_IPV6_SRC_ADDR()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV6_DST_ADDR" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This parser result function returns the IP version 6 address of the destination endpoint of the current flow record,
          if available, or an empty list if not.
          For Netflow version 9, this is field 28.
        </description>
        <prototype>public list&lt;uint8&gt;[16] NETFLOW_IPV6_DST_ADDR()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV6_SRC_MASK" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the number of significant bits in the 
          IP version 6 address of the source endpoint of the current flow record,
          if available, or zero if not.
          For Netflow version 9, this is field 29.
        </description>
        <prototype>public uint8 NETFLOW_IPV6_SRC_MASK()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV6_DST_MASK" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the number of significant bits in the 
          IP version 6 address of the source endpoint of the current flow record,
          if available, or zero if not.
          For Netflow version 9, this is field 30.
        </description>
        <prototype>public uint8 NETFLOW_IPV6_DST_MASK()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV6_FLOW_LABEL" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 6 flow label.
          For Netflow version 9, this is field 31.
        </description>
        <prototype>public uint32 NETFLOW_IPV6_FLOW_LABEL()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_ICMP_TYPE" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the ICMP packet type.
          For Netflow version 9, this is field 32.
        </description>
        <prototype>public uint16 NETFLOW_ICMP_TYPE()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MUL_IGMP_TYPE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the IGMP packet type.
          For Netflow version 9, this is field 33.
        </description>
        <prototype>public uint8 NETFLOW_MUL_IGMP_TYPE()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SAMPLING_INTERVAL" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the sampling rate, when Netflow is sampled,
          for example, a value of 100 indicates that one of every 100 packets is sampled.
          For Netflow version 9, this is field 34. 
        </description>
        <prototype>public uint32 NETFLOW_SAMPLING_INTERVAL()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SAMPLING_ALGORITHM" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the sampling algorithm, when Netflow is sampled, with 
          '1' for deterministic sampling, and '2' for random sampling. 
          For Netflow version 9, this is field 35.
        </description>
        <prototype>public uint8 NETFLOW_SAMPLING_ALGORITHM()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FLOW_ACTIVE_TIMEOUT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the timeout value, in seconds, for active flow entries in the Netflow cache. 
          For Netflow version 9, this is field 36.
        </description>
        <prototype>public uint16 NETFLOW_FLOW_ACTIVE_TIMEOUT()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FLOW_INACTIVE_TIMEOUT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the timeout value, in seconds, for inactive flow entries in the Netflow cache. 
          For Netflow version 9, this is field 37.
        </description>
        <prototype>public uint16 NETFLOW_FLOW_INACTIVE_TIMEOUT()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_ENGINE_TYPE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the type code of the switching engine in the router.
          For Netflow version 9, this is field 38.
        </description>
        <prototype>public uint8 NETFLOW_ENGINE_TYPE()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_ENGINE_ID" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the identifier of the switching engine in the router.
          For Netflow version 9, this is field 39.
        </description>
        <prototype>public uint8 NETFLOW_ENGINE_ID()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_TOTAL_BYTES_EXP" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of bytes exported by the Observation Domain. 
          For Netflow version 9, this is field 40.
        </description>
        <prototype>public uint64 NETFLOW_TOTAL_BYTES_EXP()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_TOTAL_PKTS_EXP" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of packets exported by the Observation Domain. 
          For Netflow version 9, this is field 41.
        </description>
        <prototype>public uint64 NETFLOW_TOTAL_PKTS_EXP()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_TOTAL_FLOWS_EXP" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the number of flows exported by the Observation Domain. 
          For Netflow version 9, this is field 42.
        </description>
        <prototype>public uint64 NETFLOW_TOTAL_FLOWS_EXP()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV4_SRC_PREFIX" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 source address prefix (specific for Cisco Catalyst architecture). 
          For Netflow version 9, this is field 44.
        </description>
        <prototype>public uint32 NETFLOW_IPV4_SRC_PREFIX()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV4_DST_PREFIX" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 4 destination address prefix (specific for Cisco Catalyst architecture). 
          For Netflow version 9, this is field 45.
        </description>
        <prototype>public uint32 NETFLOW_IPV4_DST_PREFIX()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MPLS_TOP_LABEL_TYPE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the MPLS top label type, '0' for  UNKNOWN, '1' for TE-MIDPT, '2' for ATOM, '3' for VPN '4' for BGP, '5' for LDP. 
          For Netflow version 9, this is field 46.
        </description>
        <prototype>public uint8 NETFLOW_MPLS_TOP_LABEL_TYPE()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MPLS_TOP_LABEL_IPV4_ADDR" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the Forwarding Equivalent Class corresponding to the MPLS Top Label. 
          For Netflow version 9, this is field 47.
        </description>
        <prototype>public uint32 NETFLOW_MPLS_TOP_LABEL_IPV4_ADDR()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FLOW_SAMPLER_ID" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the identifier shown in "show flow-sampler". 
          For Netflow version 9, this is field 48.
        </description>
        <prototype>public uint8 NETFLOW_FLOW_SAMPLER_ID()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FLOW_SAMPLER_MODE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the sampling mode, when Netflow is sampled,
          For Netflow version 9, this is field 49.
        </description>
        <prototype>public uint8 NETFLOW_FLOW_SAMPLER_MODE()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FLOW_SAMPLER_RANDOM_INTERVAL" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the packet sampling interval, when Netflow is sampled.
          For Netflow version 9, this is field 50.
        </description>
        <prototype>public uint32 NETFLOW_FLOW_SAMPLER_RANDOM_INTERVAL()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MIN_TTL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the minimum 'time to live' for incoming packets of the flow. 
          For Netflow version 9, this is field 52.
        </description>
        <prototype>public uint8 NETFLOW_MIN_TTL()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MAX_TTL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the maximum 'time to live' for incoming packets of the flow. 
          For Netflow version 9, this is field 53.
        </description>
        <prototype>public uint8 NETFLOW_MAX_TTL()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV4_IDENT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns The IP version 4 identification field of the flow. 
          For Netflow version 9, this is field 54.
        </description>
        <prototype>public uint16 NETFLOW_IPV4_IDENT()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_DST_TOS" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the 'type of service' byte setting for the flow when exiting the outgoing interface. 
          For Netflow version 9, this is field 55.
        </description>
        <prototype>public uint8 NETFLOW_DST_TOS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MAC_SRC_ADDR_IN" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>
          This parser result function returns the incoming source MAC address for the flow. 
          For Netflow version 9, this is field 56.
        </description>
        <prototype>public list&lt;uint8&gt;[6] NETFLOW_MAC_SRC_ADDR_IN()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MAC_DST_ADDR_OUT" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>
          This parser result function returns the incoming destination MAC address for the flow. 
          For Netflow version 9, this is field 56.
        </description>
        <prototype>public list&lt;uint8&gt;[6] NETFLOW_MAC_DST_ADDR_OUT()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SRC_VLAN" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the virtual LAN identifier associated with the ingress interface. 
          For Netflow version 9, this is field 58.
        </description>
        <prototype>public uint16 NETFLOW_SRC_VLAN()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_DST_VLAN" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the virtual LAN identifier associated with the egress interface. 
          For Netflow version 9, this is field 59.
        </description>
        <prototype>public uint16 NETFLOW_DST_VLAN()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IP_PROTOCOL_VERSION" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the IP version for the flow, either '4' or '6'.
          For Netflow version 9, this is field 60.
        </description>
        <prototype>public uint8 NETFLOW_IP_PROTOCOL_VERSION()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_DIRECTION" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the direction of the flow,
          '0' for ingress, '1' for egress. 
          For Netflow version 9, this is field 61.
        </description>
        <prototype>public uint8 NETFLOW_DIRECTION()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV6_NEXT_HOP" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This parser result function returns the IP version 6 address of the next-hop router. 
          For Netflow version 9, this is field 62.
        </description>
        <prototype>public list&lt;uint8&gt;[16] NETFLOW_IPV6_NEXT_HOP()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_BPG_IPV6_NEXT_HOP" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This parser result function returns the next router in the BGP domain. 
          For Netflow version 9, this is field 63.
        </description>
        <prototype>public list&lt;uint8&gt;[16] NETFLOW_BPG_IPV6_NEXT_HOP()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IPV6_OPTION_HEADERS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the IP version 6 option headers found in the flow. 
          For Netflow version 9, this is field 64.
        </description>
        <prototype>public uint32 NETFLOW_IPV6_OPTION_HEADERS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MPLS_LABEL" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns the MPLS label at the specified position in the stack,
          where the position is specified with an argument between 1 and 10.
          This comprises 20 bits of MPLS label, 3 experimental bits and 1 end-of-stack bit.
          For Netflow version 9, these are fields 71 through 79.
        </description>
        <prototype>public list&lt;uint8&gt; NETFLOW_MPLS_LABEL(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MAC_DST_ADDR_IN" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>
          This parser result function returns the incoming destination MAC address. 
          For Netflow version 9, this is field 80.
        </description>
        <prototype>public list&lt;uint8&gt;[6] NETFLOW_MAC_DST_ADDR_IN()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MAC_SRC_ADDR_OUT" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>
          This parser result function returns the outgoing source MAC address. 
          For Netflow version 9, this is field 81.
        </description>
        <prototype>public list&lt;uint8&gt;[6] NETFLOW_MAC_SRC_ADDR_OUT()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IF_NAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the router's interface name. 
          For Netflow version 9, this is field 82. 
        </description>
        <prototype>public rstring NETFLOW_IF_NAME()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IF_DESC" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the router's interface description. 
          For Netflow version 9, this is field 83. 
        </description>
        <prototype>public rstring NETFLOW_IF_DESC()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SAMPLER_NAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the name of the flow sampler, when Netflow is sampled.
          For Netflow version 9, this is field 84.
        </description>
        <prototype>public rstring NETFLOW_SAMPLER_NAME()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IN_PERMANENT_BYTES" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the running byte counter for a permanent flow. 
          For Netflow version 9, this is field 85.
        </description>
        <prototype>public uint64 NETFLOW_IN_PERMANENT_BYTES()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_IN_PERMANENT_PKTS" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This parser result function returns the running packet counter for a permanent flow. 
          For Netflow version 9, this is field 86.
        </description>
        <prototype>public uint64 NETFLOW_IN_PERMANENT_PKTS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FRAGMENT_OFFSET" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This parser result function returns the fragment offset value from fragmented IP packets. 
          For Netflow version 9, this is field 88.
        </description>
        <prototype>public uint16 NETFLOW_FRAGMENT_OFFSET()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_FORWARDING_STATUS" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the forwarding status, with the 2 left bits giving the status and the 6 remaining bits giving the reason code.
          For Netflow version 9, this is field 89.
        </description>
        <prototype>public uint8 NETFLOW_FORWARDING_STATUS()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MPLS_PAL_RD" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns the MPLS PAL Route Distinguisher. 
          For Netflow version 9, this is field 90.
        </description>
        <prototype>public list&lt;uint8&gt; NETFLOW_MPLS_PAL_RD()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_MPLS_PREFIX_LEN" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the number of consecutive bits in the MPLS prefix length.
          For Netflow version 9, this is field 91.
        </description>
        <prototype>public uint8 NETFLOW_MPLS_PREFIX_LEN()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_SRC_TRAFFIC_INDEX" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns BGP policy accounting source traffic index. 
          For Netflow version 9, this is field 92.
        </description>
        <prototype>public uint32 NETFLOW_SRC_TRAFFIC_INDEX()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_DST_TRAFFIC_INDEX" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns BGP policy accounting destination traffic index. 
          For Netflow version 9, this is field 93.
        </description>
        <prototype>public uint32 NETFLOW_DST_TRAFFIC_INDEX()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_APPLICATION_DESCRIPTION" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the application description.
          For Netflow version 9, this is field 94.
        </description>
        <prototype>public rstring NETFLOW_APPLICATION_DESCRIPTION()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_APPLICATION_TAG" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This parser result function returns 8 bits of engine ID, followed by *n* bits of classification.
          For Netflow version 9, this is field 95.
        </description>
        <prototype>public list&lt;uint8&gt; NETFLOW_APPLICATION_TAG()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_APPLICATION_NAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This parser result function returns the name associated with a classification.
          For Netflow version 9, this is field 96.
        </description>
        <prototype>public rstring NETFLOW_APPLICATION_NAME()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_POST_IP_DSCP" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This parser result function returns the value of a Differentiated Services Code Point (DSCP) encoded in the Differentiated Services Field, after modification.
          For Netflow version 9, this is field 98.
        </description>
        <prototype>public uint8 NETFLOW_POST_IP_DSCP()</prototype>
      </function>
      <function modelUriIndex="5" name="NETFLOW_REPLICATION_FACTOR" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This parser result function returns the multicast replication factor.
          For Netflow version 9, this is field 99.
        </description>
        <prototype>public uint32 NETFLOW_REPLICATION_FACTOR()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_standardFieldAsInteger" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'standard' field as an integer, if
          it is present in the 'data flow' record, or zero if absent.
        </description>
        <prototype>public uint64 IPFIX_standardFieldAsInteger(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_standardFieldAsString" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'standard' field as a string, if
          it is present in the 'data flow' record, or zero if absent.
        </description>
        <prototype>public rstring IPFIX_standardFieldAsString(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_standardFieldAsByteList" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'standard' field as a list of bytes, if
          it is present in the 'data flow' record, or zero if absent.
        </description>
        <prototype>public list&lt;uint8&gt; IPFIX_standardFieldAsByteList(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseFieldAsInteger" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'enterprise' field as an integer, if
          it is present in the 'data flow' record, or zero if absent.
        </description>
        <prototype>public uint64 IPFIX_enterpriseFieldAsInteger(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseFieldAsString" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'enterprise' field as a string, if
          it is present in the 'data flow' record, or zero if absent.
        </description>
        <prototype>public rstring IPFIX_enterpriseFieldAsString(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseFieldAsByteList" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'enterprise' field as a list of bytes, if
          it is present in the 'data flow' record, or zero if absent.
        </description>
        <prototype>public list&lt;uint8&gt; IPFIX_enterpriseFieldAsByteList(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseIdentifier" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This function returns the value of the 'enterprise identifier' corresponding to the specified 
          IPFIX 'field identifier', if one is present in the 'data flow' record, or zero if absent.
        </description>
        <prototype>public uint32 IPFIX_enterpriseIdentifier(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseBasicListFieldAsIntegers" native="true" public="true" returnType="list&lt;uint64>" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'enterprise' field as a list of integers, if
          it is present in the 'data flow' record and it was encoded as an IPFIX 'basic list', 
          or an empty list if absent.
        </description>
        <prototype>public list&lt;uint64&gt; IPFIX_enterpriseBasicListFieldAsIntegers(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseBasicListFieldAsStrings" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'enterprise' field as a list of strings, if
          it is present in the 'data flow' record and it was encoded as an IPFIX 'basic list', 
          or an empty list if absent.
        </description>
        <prototype>public list&lt;rstring&gt; IPFIX_enterpriseBasicListFieldAsStrings(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseBasicListFieldAsByteLists" native="true" public="true" returnType="list&lt;list&lt;uint8>>" uriIndex="0">
        <description>
          This function returns the value of the specified IPFIX 'enterprise' field as a list of byte lists, if
          it is present in the 'data flow' record and it was encoded as an IPFIX 'basic list', 
          or an empty list if absent.
        </description>
        <prototype>public list&lt;list&lt;uint8&gt;&gt; IPFIX_enterpriseBasicListFieldAsByteLists(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseBasicListFieldSemantic" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This function returns the value of the 'semantic code' corresponding to the specified 
           IPFIX 'enterprise' field, if one is present in the 'data flow' record and it was encoded as an IPFIX 'basic list', 
           or zero if absent.
        </description>
        <prototype>public uint8 IPFIX_enterpriseBasicListFieldSemantic(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseBasicListFieldElementIdentifier" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          This function returns the value of the 'element identifier' corresponding to the specified 
          IPFIX 'enterprise' 'field, if one is present in the 'data flow' record and it was encoded as an IPFIX 'basic list', 
          or zero if absent.
        </description>
        <prototype>public uint16 IPFIX_enterpriseBasicListFieldElementIdentifier(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_enterpriseBasicListFieldEnterpriseIdentifier" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This function returns the value of the 'enterprise identifier' corresponding to the specified 
          IPFIX 'enterprise' field, if one is present in the 'data flow' record and it was encoded as an IPFIX 'basic list', 
          or zero if absent.
        </description>
        <prototype>public uint32 IPFIX_enterpriseBasicListFieldEnterpriseIdentifier(int32)</prototype>
        <parameter name="__p1" type="int32"/>
      </function>
      <function modelUriIndex="5" name="IPFIX_lineCardId" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 141: 
          An identifier of a line card that is unique per IPFIX
          Device hosting an Observation Point.  Typically, this
          Information Element is used for limiting the scope
          of other Information Elements.
        </description>
        <prototype>public uint32 IPFIX_lineCardId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_portId" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 142: 
          An identifier of a line port that is unique per IPFIX
          Device hosting an Observation Point.  Typically, this
          Information Element is used for limiting the scope
          of other Information Elements.
        </description>
        <prototype>public uint32 IPFIX_portId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ingressInterface" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 10: 
          The index of the IP interface where packets of this Flow
          are being received.  The value matches the value of managed
          object 'ifIndex' as defined in RFC 2863.
          Note that ifIndex values are not assigned statically to an
          interface and that the interfaces may be renumbered every
          time the device's management system is re-initialized, as
          specified in RFC 2863.
        </description>
        <prototype>public uint32 IPFIX_ingressInterface()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_egressInterface" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 14: 
          The index of the IP interface where packets of
          this Flow are being sent.  The value matches the value of
          managed object 'ifIndex' as defined in RFC 2863.
          Note that ifIndex values are not assigned statically to an
          interface and that the interfaces may be renumbered every
          time the device's management system is re-initialized, as
          specified in RFC 2863.
        </description>
        <prototype>public uint32 IPFIX_egressInterface()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_meteringProcessId" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 143: 
          An identifier of a Metering Process that is unique per
          IPFIX Device.  Typically, this Information Element is used
          for limiting the scope of other Information Elements.
          Note that process identifiers are typically assigned
          dynamically.
          The Metering Process may be re-started with a different ID.
        </description>
        <prototype>public uint32 IPFIX_meteringProcessId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exportingProcessId" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 144: 
          An identifier of an Exporting Process that is unique per
          IPFIX Device.  Typically, this Information Element is used
          for limiting the scope of other Information Elements.
          Note that process identifiers are typically assigned
          dynamically.  The Exporting Process may be re-started
          with a different ID.
        </description>
        <prototype>public uint32 IPFIX_exportingProcessId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowId" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 148: 
          An identifier of a Flow that is unique within an Observation
          Domain.  This Information Element can be used to distinguish
          between different Flows if Flow Keys such as IP addresses and
          port numbers are not reported or are reported in separate
          records.
        </description>
        <prototype>public uint64 IPFIX_flowId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_templateId" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 145: 
          An identifier of a Template that is locally unique within a
          combination of a Transport session and an Observation Domain.

          Template IDs 0-255 are reserved for Template Sets, Options
          Template Sets, and other reserved Sets yet to be created.
          Template IDs of Data Sets are numbered from 256 to 65535.

          Typically, this Information Element is used for limiting
          the scope of other Information Elements.
          Note that after a re-start of the Exporting Process Template
          identifiers may be re-assigned.
        </description>
        <prototype>public uint16 IPFIX_templateId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_observationDomainId" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 149: 
          An identifier of an Observation Domain that is locally
          unique to an Exporting Process.  The Exporting Process uses
          the Observation Domain ID to uniquely identify to the
          Collecting Process the Observation Domain where Flows
          were metered.  It is RECOMMENDED that this identifier is
          also unique per IPFIX Device.

          A value of 0 indicates that no specific Observation Domain
          is identified by this Information Element.

          Typically, this Information Element is used for limiting
          the scope of other Information Elements.
        </description>
        <prototype>public uint32 IPFIX_observationDomainId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_observationPointId" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 138: 
          An identifier of an Observation Point that is unique per
          Observation Domain.  It is RECOMMENDED that this identifier is
          also unique per IPFIX Device.  Typically, this Information
          Element is used for limiting the scope of other Information
          Elements.
        </description>
        <prototype>public uint32 IPFIX_observationPointId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_commonPropertiesId" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 137: 
          An identifier of a set of common properties that is
          unique per Observation Domain and Transport Session.
          Typically, this Information Element is used to link to
          information reported in separate Data Records.
        </description>
        <prototype>public uint64 IPFIX_commonPropertiesId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exporterIPv4Address" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 130: 
          The IPv4 address used by the Exporting Process.  This is used
          by the Collector to identify the Exporter in cases where the
          identity of the Exporter may have been obscured by the use of
          a proxy.
        </description>
        <prototype>public uint32 IPFIX_exporterIPv4Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exporterIPv6Address" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 131: 
          The IPv6 address used by the Exporting Process.  This is used
          by the Collector to identify the Exporter in cases where the
          identity of the Exporter may have been obscured by the use of
          a proxy.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_exporterIPv6Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exporterTransportPort" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 217: 
          The source port identifier from which the Exporting
          Process sends Flow information.  For the transport protocols
          UDP, TCP, and SCTP, this is the source port number.
          This field MAY also be used for future transport protocols
          that have 16-bit source port identifiers.  This field may
          be useful for distinguishing multiple Exporting Processes
          that use the same IP address.
        </description>
        <prototype>public uint16 IPFIX_exporterTransportPort()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_collectorIPv4Address" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 211: 
          An IPv4 address to which the Exporting Process sends Flow
          information.
        </description>
        <prototype>public uint32 IPFIX_collectorIPv4Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_collectorIPv6Address" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 212: 
          An IPv6 address to which the Exporting Process sends Flow
          information.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_collectorIPv6Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exportInterface" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 213: 
          The index of the interface from which IPFIX Messages sent
          by the Exporting Process to a Collector leave the IPFIX
          Device.  The value matches the value of
          managed object 'ifIndex' as defined in RFC 2863.
          Note that ifIndex values are not assigned statically to an
          interface and that the interfaces may be renumbered every
          time the device's management system is re-initialized, as
          specified in RFC 2863.
        </description>
        <prototype>public uint32 IPFIX_exportInterface()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exportProtocolVersion" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 214: 
          The protocol version used by the Exporting Process for
          sending Flow information.  The protocol version is given
          by the value of the Version Number field in the Message
          Header.

          The protocol version is 10 for IPFIX and 9 for NetFlow
          version 9.
          A value of 0 indicates that no export protocol is in use.
        </description>
        <prototype>public uint8 IPFIX_exportProtocolVersion()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exportTransportProtocol" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 215: 
          The value of the protocol number used by the Exporting Process
          for sending Flow information.
          The protocol number identifies the IP packet payload type.
          Protocol numbers are defined in the IANA Protocol Numbers
          registry.

          In Internet Protocol version 4 (IPv4), this is carried in the
          Protocol field.  In Internet Protocol version 6 (IPv6), this
          is carried in the Next Header field in the last extension
          header of the packet.
        </description>
        <prototype>public uint8 IPFIX_exportTransportProtocol()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_collectorTransportPort" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 216: 
          The destination port identifier to which the Exporting
          Process sends Flow information.  For the transport protocols
          UDP, TCP, and SCTP, this is the destination port number.
          This field MAY also be used for future transport protocols
          that have 16-bit source port identifiers.
        </description>
        <prototype>public uint16 IPFIX_collectorTransportPort()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowKeyIndicator" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 173: 
          This set of bit fields is used for marking the Information
          Elements of a Data Record that serve as Flow Key.  Each bit
          represents an Information Element in the Data Record with
          the n-th bit representing the n-th Information Element.
          A bit set to value 1 indicates that the corresponding
          Information Element is a Flow Key of the reported Flow.
          A bit set to value 0 indicates that this is not the case.

          If the Data Record contains more than 64 Information Elements,
          the corresponding Template SHOULD be designed such that all
          Flow Keys are among the first 64 Information Elements, because
          the flowKeyIndicator only contains 64 bits.  If the Data Record
          contains less than 64 Information Elements, then the bits in
          the flowKeyIndicator for which no corresponding Information
          Element exists MUST have the value 0.
        </description>
        <prototype>public uint64 IPFIX_flowKeyIndicator()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exportedMessageTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 41: 
          The total number of IPFIX Messages that the Exporting Process
          has sent since the Exporting Process (re-)initialization to
          a particular Collecting Process.
          The reported number excludes the IPFIX Message that carries
          the counter value.
          If this Information Element is sent to a particular
          Collecting Process, then by default it specifies the number
          of IPFIX Messages sent to this Collecting Process.
        </description>
        <prototype>public uint64 IPFIX_exportedMessageTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exportedOctetTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 40: 
          The total number of octets that the Exporting Process
          has sent since the Exporting Process (re-)initialization
          to a particular Collecting Process.
          The value of this Information Element is calculated by
          summing up the IPFIX Message Header length values of all
          IPFIX Messages that were successfully sent to the Collecting
          Process.  The reported number excludes octets in the IPFIX
          Message that carries the counter value.
          If this Information Element is sent to a particular
          Collecting Process, then by default it specifies the number
          of octets sent to this Collecting Process.
        </description>
        <prototype>public uint64 IPFIX_exportedOctetTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_exportedFlowRecordTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 42: 
          The total number of Flow Records that the Exporting
          Process has sent as Data Records since the Exporting
          Process (re-)initialization to a particular Collecting
          Process.  The reported number excludes Flow Records in
          the IPFIX Message that carries the counter value.
          If this Information Element is sent to a particular
          Collecting Process, then by default it specifies the number
          of Flow Records sent to this process.
        </description>
        <prototype>public uint64 IPFIX_exportedFlowRecordTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_observedFlowTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 163: 
          The total number of Flows observed in the Observation Domain
          since the Metering Process (re-)initialization for this
          Observation Point.
        </description>
        <prototype>public uint64 IPFIX_observedFlowTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ignoredPacketTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 164: 
          The total number of observed IP packets that the
          Metering Process did not process since the
          (re-)initialization of the Metering Process.
        </description>
        <prototype>public uint64 IPFIX_ignoredPacketTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ignoredOctetTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 165: 
          The total number of octets in observed IP packets
          (including the IP header) that the Metering Process
          did not process since the (re-)initialization of the
          Metering Process.
        </description>
        <prototype>public uint64 IPFIX_ignoredOctetTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_notSentFlowTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 166: 
          The total number of Flow Records that were generated by the
          Metering Process and dropped by the Metering Process or
          by the Exporting Process instead of being sent to the
          Collecting Process.  There are several potential reasons for
          this including resource shortage and special Flow export
          policies.
        </description>
        <prototype>public uint64 IPFIX_notSentFlowTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_notSentPacketTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 167: 
          The total number of packets in Flow Records that were
          generated by the Metering Process and dropped
          by the Metering Process or by the Exporting Process
          instead of being sent to the Collecting Process.
          There are several potential reasons for this including
          resource shortage and special Flow export policies.
        </description>
        <prototype>public uint64 IPFIX_notSentPacketTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_notSentOctetTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 168: 
          The total number of octets in packets in Flow Records
          that were generated by the Metering Process and
          dropped by the Metering Process or by the Exporting
          Process instead of being sent to the Collecting Process.
          There are several potential reasons for this including
          resource shortage and special Flow export policies.
        </description>
        <prototype>public uint64 IPFIX_notSentOctetTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipVersion" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 60: 
          The IP version field in the IP packet header.
        </description>
        <prototype>public uint8 IPFIX_ipVersion()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_sourceIPv4Address" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 8: 
          The IPv4 source address in the IP packet header.
        </description>
        <prototype>public uint32 IPFIX_sourceIPv4Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_sourceIPv6Address" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 27: 
          The IPv6 source address in the IP packet header.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_sourceIPv6Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_sourceIPv4PrefixLength" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 9: 
          The number of contiguous bits that are relevant in the
          sourceIPv4Prefix Information Element.
        </description>
        <prototype>public uint8 IPFIX_sourceIPv4PrefixLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_sourceIPv6PrefixLength" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 29: 
          The number of contiguous bits that are relevant in the
          sourceIPv6Prefix Information Element.
        </description>
        <prototype>public uint8 IPFIX_sourceIPv6PrefixLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_sourceIPv4Prefix" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 44: 
          IPv4 source address prefix.
        </description>
        <prototype>public uint32 IPFIX_sourceIPv4Prefix()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_sourceIPv6Prefix" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 170: 
          IPv6 source address prefix.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_sourceIPv6Prefix()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_destinationIPv4Address" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 12: 
          The IPv4 destination address in the IP packet header.
        </description>
        <prototype>public uint32 IPFIX_destinationIPv4Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_destinationIPv6Address" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 28: 
          The IPv6 destination address in the IP packet header.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_destinationIPv6Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_destinationIPv4PrefixLength" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 13: 
          The number of contiguous bits that are relevant in the
          destinationIPv4Prefix Information Element.
        </description>
        <prototype>public uint8 IPFIX_destinationIPv4PrefixLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_destinationIPv6PrefixLength" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 30: 
          The number of contiguous bits that are relevant in the
          destinationIPv6Prefix Information Element.
        </description>
        <prototype>public uint8 IPFIX_destinationIPv6PrefixLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_destinationIPv4Prefix" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 45: 
	      IPv4 destination address prefix. 
        </description>
        <prototype>public uint32 IPFIX_destinationIPv4Prefix()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_destinationIPv6Prefix" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 169: 
          IPv6 destination address prefix.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_destinationIPv6Prefix()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipTTL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 192: 
          For IPv4, the value of the Information Element matches
          the value of the Time to Live (TTL) field in the IPv4 packet
          header.  For IPv6, the value of the Information Element
          matches the value of the Hop Limit field in the IPv6
          packet header.
        </description>
        <prototype>public uint8 IPFIX_ipTTL()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_protocolIdentifier" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 4: 
          The value of the protocol number in the IP packet header.
          The protocol number identifies the IP packet payload type.
          Protocol numbers are defined in the IANA Protocol Numbers
          registry.

	      In Internet Protocol version 4 (IPv4), this is carried in the
          Protocol field.  In Internet Protocol version 6 (IPv6), this
          is carried in the Next Header field in the last extension
          header of the packet.
        </description>
        <prototype>public uint8 IPFIX_protocolIdentifier()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_nextHeaderIPv6" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 193: 
          The value of the Next Header field of the IPv6 header.
          The value identifies the type of the following IPv6
          extension header or of the following IP payload.
          Valid values are defined in the IANA
          Protocol Numbers registry.
        </description>
        <prototype>public uint8 IPFIX_nextHeaderIPv6()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipDiffServCodePoint" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 195: 
          The value of a Differentiated Services Code Point (DSCP)
          encoded in the Differentiated Services field.  The
          Differentiated Services field spans the most significant
          6 bits of the IPv4 TOS field or the IPv6 Traffic Class
          field, respectively.

          This Information Element encodes only the 6 bits of the
          Differentiated Services field.  Therefore, its value may
          range from 0 to 63.
        </description>
        <prototype>public uint8 IPFIX_ipDiffServCodePoint()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipPrecedence" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 196: 
          The value of the IP Precedence.  The IP Precedence value
          is encoded in the first 3 bits of the IPv4 TOS field
          or the IPv6 Traffic Class field, respectively.

          This Information Element encodes only these 3 bits.
          Therefore, its value may range from 0 to 7.
        </description>
        <prototype>public uint8 IPFIX_ipPrecedence()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipClassOfService" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 5: 
          For IPv4 packets, this is the value of the TOS field in
          the IPv4 packet header.  For IPv6 packets, this is the
          value of the Traffic Class field in the IPv6 packet header.
        </description>
        <prototype>public uint8 IPFIX_ipClassOfService()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postIpClassOfService" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 55: 
          The definition of this Information Element is identical
          to the definition of Information Element
          'ipClassOfService', except that it reports a
          potentially modified value caused by a middlebox
          function after the packet passed the Observation Point.
        </description>
        <prototype>public uint8 IPFIX_postIpClassOfService()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowLabelIPv6" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 31: 
          The value of the IPv6 Flow Label field in the IP packet header.
        </description>
        <prototype>public uint32 IPFIX_flowLabelIPv6()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_isMulticast" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 206: 
          If the IP destination address is not a reserved multicast
          address, then the value of all bits of the octet (including
          the reserved ones) is zero.

          The first bit of this octet is set to 1 if the Version
          field of the IP header has the value 4 and if the
          Destination Address field contains a reserved multicast
          address in the range from 224.0.0.0 to 239.255.255.255.
          Otherwise, this bit is set to 0.

          The second and third bits of this octet are reserved for
          future use.

          The remaining bits of the octet are only set to values
          other than zero if the IP Destination Address is a
          reserved IPv6 multicast address.  Then the fourth bit
          of the octet is set to the value of the T flag in the
          IPv6 multicast address and the remaining four bits are
          set to the value of the scope field in the IPv6
          multicast address.
        </description>
        <prototype>public uint8 IPFIX_isMulticast()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_fragmentIdentification" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 54: 
          The value of the Identification field
          in the IPv4 packet header or in the IPv6 Fragment header,
          respectively.  The value is 0 for IPv6 if there is
          no fragment header.
        </description>
        <prototype>public uint32 IPFIX_fragmentIdentification()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_fragmentOffset" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 88: 
          The value of the IP fragment offset field in the
          IPv4 packet header or the IPv6 Fragment header,
          respectively.  The value is 0 for IPv6 if there is
          no fragment header.
        </description>
        <prototype>public uint16 IPFIX_fragmentOffset()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_fragmentFlags" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 197: 
          Fragmentation properties indicated by flags in the IPv4
          packet header or the IPv6 Fragment header, respectively.
        </description>
        <prototype>public uint8 IPFIX_fragmentFlags()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipHeaderLength" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 189: 
          The length of the IP header.  For IPv6, the value of this
          Information Element is 40.
        </description>
        <prototype>public uint8 IPFIX_ipHeaderLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipv4IHL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 207: 
          The value of the Internet Header Length (IHL) field in
          the IPv4 header.  It specifies the length of the header
          in units of 4 octets.  Please note that its unit is
          different from most of the other Information Elements
          reporting length values.
        </description>
        <prototype>public uint8 IPFIX_ipv4IHL()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_totalLengthIPv4" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 190: 
          The total length of the IPv4 packet.
        </description>
        <prototype>public uint16 IPFIX_totalLengthIPv4()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipTotalLength" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 224: 
          The total length of the IP packet.
        </description>
        <prototype>public uint64 IPFIX_ipTotalLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_payloadLengthIPv6" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 191: 
          This Information Element reports the value of the Payload
          Length field in the IPv6 header.  Note that IPv6 extension
          headers belong to the payload.  Also note that in case of a
          jumbo payload option the value of the Payload Length field in
          the IPv6 header is zero and so will be the value reported
          by this Information Element.
        </description>
        <prototype>public uint16 IPFIX_payloadLengthIPv6()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_sourceTransportPort" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 7: 
          The source port identifier in the transport header.
          For the transport protocols UDP, TCP, and SCTP, this is the
          source port number given in the respective header.  This
          field MAY also be used for future transport protocols that
          have 16-bit source port identifiers.
        </description>
        <prototype>public uint16 IPFIX_sourceTransportPort()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_destinationTransportPort" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 11: 
          The destination port identifier in the transport header.
          For the transport protocols UDP, TCP, and SCTP, this is the
          destination port number given in the respective header.
          This field MAY also be used for future transport protocols
          that have 16-bit destination port identifiers.
        </description>
        <prototype>public uint16 IPFIX_destinationTransportPort()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_udpSourcePort" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 180: 
          The source port identifier in the UDP header.
        </description>
        <prototype>public uint16 IPFIX_udpSourcePort()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_udpDestinationPort" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 181: 
          The destination port identifier in the UDP header.
        </description>
        <prototype>public uint16 IPFIX_udpDestinationPort()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_udpMessageLength" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 205: 
          The value of the Length field in the UDP header.
        </description>
        <prototype>public uint16 IPFIX_udpMessageLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpSourcePort" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 182: 
          The source port identifier in the TCP header.
        </description>
        <prototype>public uint16 IPFIX_tcpSourcePort()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpDestinationPort" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 183: 
          The destination port identifier in the TCP header.
        </description>
        <prototype>public uint16 IPFIX_tcpDestinationPort()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpSequenceNumber" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 184: 
          The sequence number in the TCP header.
        </description>
        <prototype>public uint32 IPFIX_tcpSequenceNumber()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpAcknowledgementNumber" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 185: 
          The acknowledgement number in the TCP header.
        </description>
        <prototype>public uint32 IPFIX_tcpAcknowledgementNumber()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpWindowSize" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 186: 
          The window field in the TCP header.
          If the TCP window scale is supported,
          then TCP window scale must be known
          to fully interpret the value of this information.
        </description>
        <prototype>public uint16 IPFIX_tcpWindowSize()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpWindowScale" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 238: 
          The scale of the window field in the TCP header.
        </description>
        <prototype>public uint16 IPFIX_tcpWindowScale()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpUrgentPointer" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 187: 
          The urgent pointer in the TCP header.
        </description>
        <prototype>public uint16 IPFIX_tcpUrgentPointer()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpHeaderLength" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 188: 
          The length of the TCP header.  Note that the value of this
          Information Element is different from the value of the Data
          Offset field in the TCP header.  The Data Offset field
          indicates the length of the TCP header in units of 4 octets.
          This Information Elements specifies the length of the TCP
          header in units of octets.
        </description>
        <prototype>public uint8 IPFIX_tcpHeaderLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_icmpTypeCodeIPv4" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 32: 
          Type and Code of the IPv4 ICMP message.  The combination of
          both values is reported as (ICMP type * 256) + ICMP code.
        </description>
        <prototype>public uint16 IPFIX_icmpTypeCodeIPv4()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_icmpTypeIPv4" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 176: 
          Type of the IPv4 ICMP message.
        </description>
        <prototype>public uint8 IPFIX_icmpTypeIPv4()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_icmpCodeIPv4" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 177: 
          Code of the IPv4 ICMP message.
        </description>
        <prototype>public uint8 IPFIX_icmpCodeIPv4()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_icmpTypeCodeIPv6" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 139: 
          Type and Code of the IPv6 ICMP message.  The combination of
          both values is reported as (ICMP type * 256) + ICMP code.
        </description>
        <prototype>public uint16 IPFIX_icmpTypeCodeIPv6()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_icmpTypeIPv6" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 178: 
          Type of the IPv6 ICMP message.
        </description>
        <prototype>public uint8 IPFIX_icmpTypeIPv6()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_icmpCodeIPv6" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 179: 
          Code of the IPv6 ICMP message.
        </description>
        <prototype>public uint8 IPFIX_icmpCodeIPv6()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_igmpType" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 33: 
          The type field of the IGMP message.
        </description>
        <prototype>public uint8 IPFIX_igmpType()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_sourceMacAddress" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>
          IPFIX field 56: 
          The IEEE 802 source MAC address field.
        </description>
        <prototype>public list&lt;uint8&gt;[6] IPFIX_sourceMacAddress()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postSourceMacAddress" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>
          IPFIX field 81: 
          The definition of this Information Element is identical
          to the definition of Information Element
          'sourceMacAddress', except that it reports a
          potentially modified value caused by a middlebox
          function after the packet passed the Observation Point.
        </description>
        <prototype>public list&lt;uint8&gt;[6] IPFIX_postSourceMacAddress()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_vlanId" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 58: 
          The IEEE 802.1Q VLAN identifier (VID) extracted from the Tag
          Control Information field that was attached to the IP packet.
        </description>
        <prototype>public uint16 IPFIX_vlanId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postVlanId" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 59: 
          The definition of this Information Element is identical
          to the definition of Information Element
          'vlanId', except that it reports a
          potentially modified value caused by a middlebox
          function after the packet passed the Observation Point.
        </description>
        <prototype>public uint16 IPFIX_postVlanId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_destinationMacAddress" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>
          IPFIX field 80: 
          The IEEE 802 destination MAC address field.
        </description>
        <prototype>public list&lt;uint8&gt;[6] IPFIX_destinationMacAddress()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postDestinationMacAddress" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>
          IPFIX field 57: 
          The definition of this Information Element is identical
          to the definition of Information Element
          'destinationMacAddress', except that it reports a
          potentially modified value caused by a middlebox
          function after the packet passed the Observation Point.
        </description>
        <prototype>public list&lt;uint8&gt;[6] IPFIX_postDestinationMacAddress()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_wlanChannelId" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 146: 
          The identifier of the 802.11 (Wi-Fi) channel used.
        </description>
        <prototype>public uint8 IPFIX_wlanChannelId()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_wlanSSID" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          IPFIX field 147: 
          The Service Set IDentifier (SSID) identifying an 802.11
          (Wi-Fi) network used.  According to IEEE.802-11.1999, the
          SSID is encoded into a string of up to 32 characters.
        </description>
        <prototype>public rstring IPFIX_wlanSSID()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsTopLabelTTL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 200: 
          The TTL field from the top MPLS label stack entry,
          i.e., the last label that was pushed.
        </description>
        <prototype>public uint8 IPFIX_mplsTopLabelTTL()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsTopLabelExp" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 203: 
          The Exp field from the top MPLS label stack entry,
          i.e., the last label that was pushed.
        </description>
        <prototype>public uint8 IPFIX_mplsTopLabelExp()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postMplsTopLabelExp" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 237: 
          The definition of this Information Element is identical to the
          definition of Information Element 'mplsTopLabelExp', except
          that it reports a potentially modified value caused by a
          middlebox function after the packet passed the Observation
          Point.
        </description>
        <prototype>public uint8 IPFIX_postMplsTopLabelExp()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackDepth" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 202: 
          The number of labels in the MPLS label stack.
        </description>
        <prototype>public uint32 IPFIX_mplsLabelStackDepth()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackLength" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 201: 
          The length of the MPLS label stack in units of octets.
        </description>
        <prototype>public uint32 IPFIX_mplsLabelStackLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsPayloadLength" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 194: 
          The size of the MPLS packet without the label stack.
        </description>
        <prototype>public uint32 IPFIX_mplsPayloadLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsTopLabelStackSection" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 70: 
          The Label, Exp, and S fields from the top MPLS label
          stack entry, i.e., from the last label that was pushed.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsTopLabelStackSection()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection2" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 71: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsTopLabelStackSection.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection2()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection3" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 72: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsLabelStackSection2.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection3()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection4" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 73: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsLabelStackSection3.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection4()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection5" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 74: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsLabelStackSection4.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection5()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection6" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 75: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsLabelStackSection5.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection6()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection7" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 76: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsLabelStackSection6.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection7()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection8" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 77: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsLabelStackSection7.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection8()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection9" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 78: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsLabelStackSection8.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection9()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsLabelStackSection10" native="true" public="true" returnType="list&lt;uint8>[3]" uriIndex="0">
        <description>
          IPFIX field 79: 
          The Label, Exp, and S fields from the label stack entry that
          was pushed immediately before the label stack entry that would
          be reported by mplsLabelStackSection9.  See the definition of
          mplsTopLabelStackSection for further details.

          The size of this Information Element is 3 octets.
        </description>
        <prototype>public list&lt;uint8&gt;[3] IPFIX_mplsLabelStackSection10()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipPayloadLength" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 204: 
          The effective length of the IP payload.

          For IPv4 packets, the value of this Information Element is
          the difference between the total length of the IPv4 packet
          (as reported by Information Element totalLengthIPv4) and the
          length of the IPv4 header (as reported by Information Element
          headerLengthIPv4).

          For IPv6, the value of the Payload Length field
          in the IPv6 header is reported except in the case that
          the value of this field is zero and that there is a valid
          jumbo payload option.  In this case, the value of the
          Jumbo Payload Length field in the jumbo payload option
          is reported.
        </description>
        <prototype>public uint32 IPFIX_ipPayloadLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipNextHopIPv4Address" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 15: 
          The IPv4 address of the next IPv4 hop.
        </description>
        <prototype>public uint32 IPFIX_ipNextHopIPv4Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipNextHopIPv6Address" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 62: 
          The IPv6 address of the next IPv6 hop.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_ipNextHopIPv6Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_bgpSourceAsNumber" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 16: 
          The autonomous system (AS) number of the source IP address.
          If AS path information for this Flow is only available as
          an unordered AS set (and not as an ordered AS sequence),
          then the value of this Information Element is 0.
        </description>
        <prototype>public uint32 IPFIX_bgpSourceAsNumber()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_bgpDestinationAsNumber" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 17: 
          The autonomous system (AS) number of the destination IP
          address.  If AS path information for this Flow is only
          available as an unordered AS set (and not as an ordered AS
          sequence), then the value of this Information Element is 0.
        </description>
        <prototype>public uint32 IPFIX_bgpDestinationAsNumber()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_bgpNextAdjacentAsNumber" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 128: 
          The autonomous system (AS) number of the first AS in the AS
          path to the destination IP address.  The path is deduced
          by looking up the destination IP address of the Flow in the
          BGP routing information base.  If AS path information for
          this Flow is only available as an unordered AS set (and not
          as an ordered AS sequence), then the value of this Information
          Element is 0.
        </description>
        <prototype>public uint32 IPFIX_bgpNextAdjacentAsNumber()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_bgpPrevAdjacentAsNumber" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 129: 
          The autonomous system (AS) number of the last AS in the AS
          path from the source IP address.  The path is deduced
          by looking up the source IP address of the Flow in the BGP
          routing information base.  If AS path information for this
          Flow is only available as an unordered AS set (and not as
          an ordered AS sequence), then the value of this Information
          Element is 0.  In case of BGP asymmetry, the
          bgpPrevAdjacentAsNumber might not be able to report the correct
          value.
        </description>
        <prototype>public uint32 IPFIX_bgpPrevAdjacentAsNumber()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_bgpNextHopIPv4Address" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 18: 
          The IPv4 address of the next (adjacent) BGP hop.
        </description>
        <prototype>public uint32 IPFIX_bgpNextHopIPv4Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_bgpNextHopIPv6Address" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 63: 
          The IPv6 address of the next (adjacent) BGP hop.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_bgpNextHopIPv6Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsTopLabelType" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 46: 
          This field identifies the control protocol that allocated the
          top-of-stack label.  Initial values for this field are
          listed below.  Further values may be assigned by IANA in
          the MPLS label type registry.
        </description>
        <prototype>public uint8 IPFIX_mplsTopLabelType()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsTopLabelIPv4Address" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 47: 
          The IPv4 address of the system that the MPLS top label will
          cause this Flow to be forwarded to.
        </description>
        <prototype>public uint32 IPFIX_mplsTopLabelIPv4Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsTopLabelIPv6Address" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          IPFIX field 140: 
          The IPv6 address of the system that the MPLS top label will
          cause this Flow to be forwarded to.
        </description>
        <prototype>public list&lt;uint8&gt;[16] IPFIX_mplsTopLabelIPv6Address()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_mplsVpnRouteDistinguisher" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          IPFIX field 90: 
          The value of the VPN route distinguisher of a corresponding
          entry in a VPN routing and forwarding table.  Route
          distinguisher ensures that the same address can be used in
          several different MPLS VPNs and that it is possible for BGP to
          carry several completely different routes to that address, one
          for each VPN.  According to RFC 4364, the size of
          mplsVpnRouteDistinguisher is 8 octets.  However, in RFC 4382 an
          octet string with flexible length was chosen for representing a
          VPN route distinguisher by object MplsL3VpnRouteDistinguisher.
          This choice was made in order to be open to future changes of
          the size.  This idea was adopted when choosing octetArray as
          abstract data type for this Information Element.  The maximum
          length of this Information Element is 256 octets.
        </description>
        <prototype>public list&lt;uint8&gt; IPFIX_mplsVpnRouteDistinguisher()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_minimumIpTotalLength" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 25: 
          Length of the smallest packet observed for this Flow.
          The packet length includes the IP header(s) length and
          the IP payload length.
        </description>
        <prototype>public uint64 IPFIX_minimumIpTotalLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_maximumIpTotalLength" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 26: 
          Length of the largest packet observed for this Flow.
          The packet length includes the IP header(s) length and
          the IP payload length.
        </description>
        <prototype>public uint64 IPFIX_maximumIpTotalLength()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_minimumTTL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 52: 
          Minimum TTL value observed for any packet in this Flow.
        </description>
        <prototype>public uint8 IPFIX_minimumTTL()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_maximumTTL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 53: 
          Maximum TTL value observed for any packet in this Flow.
        </description>
        <prototype>public uint8 IPFIX_maximumTTL()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipv4Options" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 208: 
          IPv4 options in packets of this Flow.
          The information is encoded in a set of bit fields.  For
          each valid IPv4 option type, there is a bit in this set.
          The bit is set to 1 if any observed packet of this Flow
          contains the corresponding IPv4 option type.  Otherwise,
          if no observed packet of this Flow contained the
          respective IPv4 option type, the value of the
          corresponding bit is 0.

          The list of valid IPv4 options is maintained by IANA.
          Note that for identifying an option not just the 5-bit
          Option Number, but all 8 bits of the Option Type need to
          match one of the IPv4 options specified at
          http://www.iana.org/assignments/ip-parameters.

          Options are mapped to bits according to their option numbers.
          Option number X is mapped to bit X.
          The mapping is illustrated by the figure below.
        </description>
        <prototype>public uint32 IPFIX_ipv4Options()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_ipv6ExtensionHeaders" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 64: 
          IPv6 extension headers observed in packets of this Flow.
          The information is encoded in a set of bit fields.  For
          each IPv6 option header, there is a bit in this set.
          The bit is set to 1 if any observed packet of this Flow
          contains the corresponding IPv6 extension header.
          Otherwise, if no observed packet of this Flow contained
          the respective IPv6 extension header, the value of the
          corresponding bit is 0.
        </description>
        <prototype>public uint32 IPFIX_ipv6ExtensionHeaders()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpControlBits" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 6: 
          TCP control bits observed for packets of this Flow.
          The information is encoded in a set of bit fields.
          For each TCP control bit, there is a bit in this
          set.  A bit is set to 1 if any observed packet of this
          Flow has the corresponding TCP control bit set to 1.
          A value of 0 for a bit indicates that the corresponding
          bit was not set in any of the observed packets
          of this Flow.
        </description>
        <prototype>public uint16 IPFIX_tcpControlBits()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpOptions" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 209: 
          TCP options in packets of this Flow.
          The information is encoded in a set of bit fields.  For
          each TCP option, there is a bit in this set.
          The bit is set to 1 if any observed packet of this Flow
          contains the corresponding TCP option.
          Otherwise, if no observed packet of this Flow contained
          the respective TCP option, the value of the
          corresponding bit is 0.

          Options are mapped to bits according to their option
          numbers.  Option number X is mapped to bit X.
          TCP option numbers are maintained by IANA.
        </description>
        <prototype>public uint64 IPFIX_tcpOptions()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowStartSeconds" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 150: 
          The absolute timestamp of the first packet of this Flow.
        </description>
        <prototype>public uint32 IPFIX_flowStartSeconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowEndSeconds" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 151: 
          The absolute timestamp of the last packet of this Flow.
        </description>
        <prototype>public uint32 IPFIX_flowEndSeconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowStartMilliseconds" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 152: 
          The absolute timestamp of the first packet of this Flow.
        </description>
        <prototype>public uint64 IPFIX_flowStartMilliseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowEndMilliseconds" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 153: 
          The absolute timestamp of the last packet of this Flow.
        </description>
        <prototype>public uint64 IPFIX_flowEndMilliseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowStartMicroseconds" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 154: 
          The absolute timestamp of the first packet of this Flow.
        </description>
        <prototype>public uint64 IPFIX_flowStartMicroseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowEndMicroseconds" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 155: 
          The absolute timestamp of the last packet of this Flow.
        </description>
        <prototype>public uint64 IPFIX_flowEndMicroseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowStartNanoseconds" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 156: 
          The absolute timestamp of the first packet of this Flow.
        </description>
        <prototype>public uint64 IPFIX_flowStartNanoseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowEndNanoseconds" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 157: 
          The absolute timestamp of the last packet of this Flow.
        </description>
        <prototype>public uint64 IPFIX_flowEndNanoseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowStartDeltaMicroseconds" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 158: 
          This is a relative timestamp only valid within the scope
          of a single IPFIX Message.  It contains the negative time
          offset of the first observed packet of this Flow relative
          to the export time specified in the IPFIX Message Header.
        </description>
        <prototype>public uint32 IPFIX_flowStartDeltaMicroseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowEndDeltaMicroseconds" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 159: 
          This is a relative timestamp only valid within the scope
          of a single IPFIX Message.  It contains the negative time
          offset of the last observed packet of this Flow relative
          to the export time specified in the IPFIX Message Header.
        </description>
        <prototype>public uint32 IPFIX_flowEndDeltaMicroseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_systemInitTimeMilliseconds" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 160: 
          The absolute timestamp of the last (re-)initialization of the
          IPFIX Device.
        </description>
        <prototype>public uint64 IPFIX_systemInitTimeMilliseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowStartSysUpTime" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 22: 
          The relative timestamp of the first packet of this Flow.
          It indicates the number of milliseconds since the
          last (re-)initialization of the IPFIX Device (sysUpTime).
        </description>
        <prototype>public uint32 IPFIX_flowStartSysUpTime()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowEndSysUpTime" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 21: 
          The relative timestamp of the last packet of this Flow.
          It indicates the number of milliseconds since the
          last (re-)initialization of the IPFIX Device (sysUpTime).
        </description>
        <prototype>public uint32 IPFIX_flowEndSysUpTime()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_octetDeltaCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 1: 
          The number of octets since the previous report (if any)
          in incoming packets for this Flow at the Observation Point.
          The number of octets includes IP header(s) and IP payload.
        </description>
        <prototype>public uint64 IPFIX_octetDeltaCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postOctetDeltaCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 23: 
          The definition of this Information Element is identical
          to the definition of Information Element
          'octetDeltaCount', except that it reports a
          potentially modified value caused by a middlebox
          function after the packet passed the Observation Point.
        </description>
        <prototype>public uint64 IPFIX_postOctetDeltaCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_octetDeltaSumOfSquares" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 198: 
          The sum of the squared numbers of octets per incoming
          packet since the previous report (if any) for this
          Flow at the Observation Point.
          The number of octets includes IP header(s) and IP payload.
        </description>
        <prototype>public uint64 IPFIX_octetDeltaSumOfSquares()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_octetTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 85: 
          The total number of octets in incoming packets
          for this Flow at the Observation Point since the Metering
          Process (re-)initialization for this Observation Point.  The
          number of octets includes IP header(s) and IP payload.
        </description>
        <prototype>public uint64 IPFIX_octetTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postOctetTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 171: 
          The definition of this Information Element is identical
          to the definition of Information Element
          'octetTotalCount', except that it reports a
          potentially modified value caused by a middlebox
          function after the packet passed the Observation Point.
        </description>
        <prototype>public uint64 IPFIX_postOctetTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_octetTotalSumOfSquares" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 199: 
          The total sum of the squared numbers of octets in incoming
          packets for this Flow at the Observation Point since the
          Metering Process (re-)initialization for this Observation
          Point.  The number of octets includes IP header(s) and IP
          payload.
        </description>
        <prototype>public uint64 IPFIX_octetTotalSumOfSquares()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_packetDeltaCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 2: 
          The number of incoming packets since the previous report
          (if any) for this Flow at the Observation Point.
        </description>
        <prototype>public uint64 IPFIX_packetDeltaCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postPacketDeltaCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 24: 
          The definition of this Information Element is identical
          to the definition of Information Element
          'packetDeltaCount', except that it reports a
          potentially modified value caused by a middlebox
          function after the packet passed the Observation Point.
        </description>
        <prototype>public uint64 IPFIX_postPacketDeltaCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_packetTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 86: 
          The total number of incoming packets for this Flow
          at the Observation Point since the Metering Process
          (re-)initialization for this Observation Point.
        </description>
        <prototype>public uint64 IPFIX_packetTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postPacketTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 172: 
          The definition of this Information Element is identical
          to the definition of Information Element
          'packetTotalCount', except that it reports a
          potentially modified value caused by a middlebox
          function after the packet passed the Observation Point.
        </description>
        <prototype>public uint64 IPFIX_postPacketTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_droppedOctetDeltaCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 132: 
          The number of octets since the previous report (if any)
          in packets of this Flow dropped by packet treatment.
          The number of octets includes IP header(s) and IP payload.
        </description>
        <prototype>public uint64 IPFIX_droppedOctetDeltaCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_droppedPacketDeltaCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 133: 
          The number of packets since the previous report (if any)
          of this Flow dropped by packet treatment.
        </description>
        <prototype>public uint64 IPFIX_droppedPacketDeltaCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_droppedOctetTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 134: 
          The total number of octets in packets of this Flow dropped
          by packet treatment since the Metering Process
          (re-)initialization for this Observation Point.
          The number of octets includes IP header(s) and IP payload.
        </description>
        <prototype>public uint64 IPFIX_droppedOctetTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_droppedPacketTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 135: 
          The number of packets of this Flow dropped by packet
          treatment since the Metering Process
          (re-)initialization for this Observation Point.
        </description>
        <prototype>public uint64 IPFIX_droppedPacketTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postMCastPacketDeltaCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 19: 
          The number of outgoing multicast packets since the
          previous report (if any) sent for packets of this Flow
          by a multicast daemon within the Observation Domain.
          This property cannot necessarily be observed at the
          Observation Point, but may be retrieved by other means.
        </description>
        <prototype>public uint64 IPFIX_postMCastPacketDeltaCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postMCastOctetDeltaCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 20: 
          The number of octets since the previous report (if any)
          in outgoing multicast packets sent for packets of this
          Flow by a multicast daemon within the Observation Domain.
          This property cannot necessarily be observed at the
          Observation Point, but may be retrieved by other means.
          The number of octets includes IP header(s) and IP payload.
        </description>
        <prototype>public uint64 IPFIX_postMCastOctetDeltaCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postMCastPacketTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 174: 
          The total number of outgoing multicast packets sent for
          packets of this Flow by a multicast daemon within the
          Observation Domain since the Metering Process
          (re-)initialization.  This property cannot necessarily
          be observed at the Observation Point, but may be retrieved
          by other means.
        </description>
        <prototype>public uint64 IPFIX_postMCastPacketTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_postMCastOctetTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 175: 
          The total number of octets in outgoing multicast packets
          sent for packets of this Flow by a multicast daemon in the
          Observation Domain since the Metering Process
          (re-)initialization.  This property cannot necessarily be
          observed at the Observation Point, but may be retrieved by
          other means.
          The number of octets includes IP header(s) and IP payload.
        </description>
        <prototype>public uint64 IPFIX_postMCastOctetTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpSynTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 218: 
          The total number of packets of this Flow with
          TCP "Synchronize sequence numbers" (SYN) flag set.
        </description>
        <prototype>public uint64 IPFIX_tcpSynTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpFinTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 219: 
          The total number of packets of this Flow with
          TCP "No more data from sender" (FIN) flag set.
        </description>
        <prototype>public uint64 IPFIX_tcpFinTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpRstTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 220: 
          The total number of packets of this Flow with
          TCP "Reset the connection" (RST) flag set.
        </description>
        <prototype>public uint64 IPFIX_tcpRstTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpPshTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 221: 
          The total number of packets of this Flow with
          TCP "Push Function" (PSH) flag set.
        </description>
        <prototype>public uint64 IPFIX_tcpPshTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpAckTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 222: 
          The total number of packets of this Flow with
          TCP "Acknowledgment field significant" (ACK) flag set.
        </description>
        <prototype>public uint64 IPFIX_tcpAckTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_tcpUrgTotalCount" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          IPFIX field 223: 
          The total number of packets of this Flow with
          TCP "Urgent Pointer field significant" (URG) flag set.
        </description>
        <prototype>public uint64 IPFIX_tcpUrgTotalCount()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowActiveTimeout" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 36: 
          The number of seconds after which an active Flow is timed out
          anyway, even if there is still a continuous flow of packets.
        </description>
        <prototype>public uint16 IPFIX_flowActiveTimeout()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowIdleTimeout" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>
          IPFIX field 37: 
          A Flow is considered to be timed out if no packets belonging
          to the Flow have been observed for the number of seconds
          specified by this field.
        </description>
        <prototype>public uint16 IPFIX_flowIdleTimeout()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowEndReason" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 136: 
          The reason for Flow termination.  
        </description>
        <prototype>public uint8 IPFIX_flowEndReason()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowDurationMilliseconds" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 161: 
          The difference in time between the first observed packet
          of this Flow and the last observed packet of this Flow.
        </description>
        <prototype>public uint32 IPFIX_flowDurationMilliseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowDurationMicroseconds" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          IPFIX field 162: 
          The difference in time between the first observed packet
          of this Flow and the last observed packet of this Flow.
        </description>
        <prototype>public uint32 IPFIX_flowDurationMicroseconds()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_flowDirection" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          IPFIX field 61: 
          The direction of the Flow observed at the Observation
          Point.  There are only two values defined.
        </description>
        <prototype>public uint8 IPFIX_flowDirection()</prototype>
      </function>
      <function modelUriIndex="5" name="IPFIX_paddingOctets" native="true" public="true" returnType="list&lt;uint8>" uriIndex="0">
        <description>
          IPFIX field 210: 
          The value of this Information Element is always a sequence of
          0x00 values.
        </description>
        <prototype>public list&lt;uint8&gt; IPFIX_paddingOctets()</prototype>
      </function>
    </namespace>
    <namespace name="com.ibm.streamsx.network.datetimeformat">
      <function column="1" line="22" name="formatEpoch" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpoch(uint32 seconds, rstring format)</prototype>
        <parameter name="seconds" type="uint32"/>
        <parameter name="format" type="rstring"/>
      </function>
      <function column="1" line="40" name="formatSubseconds" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatSubseconds(float64 seconds, uint32 precision)</prototype>
        <parameter name="seconds" type="float64"/>
        <parameter name="precision" type="uint32"/>
      </function>
      <function column="1" line="55" name="formatSubseconds" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatSubseconds(timestamp seconds, uint32 precision)</prototype>
        <parameter name="seconds" type="timestamp"/>
        <parameter name="precision" type="uint32"/>
      </function>
      <function column="1" line="65" name="formatEpochDateTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochDateTime(uint32 seconds)</prototype>
        <parameter name="seconds" type="uint32"/>
      </function>
      <function column="1" line="74" name="formatEpochTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochTime(uint32 seconds)</prototype>
        <parameter name="seconds" type="uint32"/>
      </function>
      <function column="1" line="84" name="formatEpochDateTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochDateTime(float64 seconds, uint32 precision)</prototype>
        <parameter name="seconds" type="float64"/>
        <parameter name="precision" type="uint32"/>
      </function>
      <function column="1" line="94" name="formatEpochTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochTime(float64 seconds, uint32 precision)</prototype>
        <parameter name="seconds" type="float64"/>
        <parameter name="precision" type="uint32"/>
      </function>
      <function column="1" line="103" name="formatEpochDateTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochDateTime(float64 seconds)</prototype>
        <parameter name="seconds" type="float64"/>
      </function>
      <function column="1" line="112" name="formatEpochTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochTime(float64 seconds)</prototype>
        <parameter name="seconds" type="float64"/>
      </function>
      <function column="1" line="122" name="formatEpochDateTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochDateTime(timestamp seconds, uint32 precision)</prototype>
        <parameter name="seconds" type="timestamp"/>
        <parameter name="precision" type="uint32"/>
      </function>
      <function column="1" line="132" name="formatEpochTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochTime(timestamp seconds, uint32 precision)</prototype>
        <parameter name="seconds" type="timestamp"/>
        <parameter name="precision" type="uint32"/>
      </function>
      <function column="1" line="141" name="formatEpochDateTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochDateTime(timestamp seconds)</prototype>
        <parameter name="seconds" type="timestamp"/>
      </function>
      <function column="1" line="150" name="formatEpochTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatEpochTime(timestamp seconds)</prototype>
        <parameter name="seconds" type="timestamp"/>
      </function>
      <function column="1" line="159" name="formatElapsedTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatElapsedTime(uint32 seconds)</prototype>
        <parameter name="seconds" type="uint32"/>
      </function>
      <function column="1" line="177" name="formatElapsedTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatElapsedTime(float64 seconds, uint32 precision)</prototype>
        <parameter name="seconds" type="float64"/>
        <parameter name="precision" type="uint32"/>
      </function>
      <function column="1" line="189" name="formatElapsedTime" native="false" public="true" returnType="rstring" uriIndex="1">
        <prototype>public rstring formatElapsedTime(float64 seconds)</prototype>
        <parameter name="seconds" type="float64"/>
      </function>
    </namespace>
    <namespace name="com.ibm.streamsx.network.ipv4">
      <function modelUriIndex="10" name="convertIPV4AddressNumericToString" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>This function converts a four-byte binary representation of an IPv4 address into a string representation.</description>
        <prototype>public rstring convertIPV4AddressNumericToString(uint32 ip4AddressNumeric)</prototype>
        <parameter name="ip4AddressNumeric" type="uint32"/>
      </function>
      <function modelUriIndex="10" name="convertIPV4AddressStringToNumeric" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>This function converts a string representation of an IPv4 address to a four-byte binary representation. If the string does not represent a valid IPv4 address, zero is returned.</description>
        <prototype>public uint32 convertIPV4AddressStringToNumeric(rstring ip4AddressString)</prototype>
        <parameter name="ip4AddressString" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="convertIPV4AddressStringToSubnet" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>This function converts a string representing an IPv4 address into a string representation of the subnet address, using the specified number of mask bits. If the string does not represent a valid IPv4 address, or the count is negative, zero is returned.</description>
        <prototype>public rstring convertIPV4AddressStringToSubnet(rstring ipAddress, int32 maskbits)</prototype>
        <parameter name="ipAddress" type="rstring"/>
        <parameter name="maskbits" type="int32"/>
      </function>
      <function modelUriIndex="10" name="convertIPV4AddressNumericToSubnet" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>This function converts a four-byte binary representation of an IPv4 address into a four-byte binary subnet address, using the specified number of mask bits.</description>
        <prototype>public uint32 convertIPV4AddressNumericToSubnet(uint32 ipAddress, int32 maskbits)</prototype>
        <parameter name="ipAddress" type="uint32"/>
        <parameter name="maskbits" type="int32"/>
      </function>
      <function modelUriIndex="10" name="convertIPV4AddressStringToHostname" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>This function converts a string containing an IPv4 address into a domain name, if the address has one. If not, the IP address is returned.</description>
        <prototype>public rstring convertIPV4AddressStringToHostname(rstring ipAddress)</prototype>
        <parameter name="ipAddress" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="convertHostnameToIPV4AddressString" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>This function converts a hostname into a string representation of an IPv4 address. If no address can be found for the hostname, an empty string is returned.</description>
        <prototype>public rstring convertHostnameToIPV4AddressString(rstring hostname)</prototype>
        <parameter name="hostname" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="convertHostnameToIPV4AddressNumeric" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>This function converts a hostname into a binary IPv4 address. If no address can be found for the hostname, zero is returned.</description>
        <prototype>public uint32 convertHostnameToIPV4AddressNumeric(rstring hostname)</prototype>
        <parameter name="hostname" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="convertIPV4AddressNumericToHostname" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>This function converts a four-byte binary representation of an IPv4 address into a hostname. If no hostname can be found for the address, an empty string is returned.</description>
        <prototype>public rstring convertIPV4AddressNumericToHostname(uint32 ip4AddressNumeric)</prototype>
        <parameter name="ip4AddressNumeric" type="uint32"/>
      </function>
      <function modelUriIndex="10" name="getAllAddressesInNetwork" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>Returns a list of all IP addresses in the network. The *networkCIDR* argument must be in CIDR format (i.e. 0.0.0.0/24), otherwise an empty list will be returned.</description>
        <prototype>public list&lt;rstring&gt; getAllAddressesInNetwork(rstring networkCIDR)</prototype>
        <parameter name="networkCIDR" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isGlobal" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv4 address was provided and the IP address is not a reserved address. Also returns `true` if the IP address is a "6to4 Relay Anycast" address, since these can be globally routed (RFC6890). In all other cases, will return `false`.</description>
        <prototype>public boolean isGlobal(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isGreaterThan" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *ip1* and *ip2* are valid IPv4 addresses and *ip1* address is greater than *ip2* address. Otherwise returns `false`. </description>
        <prototype>public boolean isGreaterThan(rstring ip1, rstring ip2)</prototype>
        <parameter name="ip1" type="rstring"/>
        <parameter name="ip2" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isIPV4CIDRNotation" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a the *networkCIDR* argument contains a valid network address in CIDR format (i.e. 0.0.0.0/24). Otherwise returns `false`.</description>
        <prototype>public boolean isIPV4CIDRNotation(rstring networkCIDR)</prototype>
        <parameter name="networkCIDR" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isEqualTo" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *ip1* and *ip2* are valid IPv4 addresses and *ip1* address is equal to *ip2* address. Otherwise returns `false`. </description>
        <prototype>public boolean isEqualTo(rstring ip1, rstring ip2)</prototype>
        <parameter name="ip1" type="rstring"/>
        <parameter name="ip2" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isInIPRange" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *startIP*, *endIP* and *ip* are valid IPv4 addresses and *ip* falls within the range from *startIP* (inclusive) to *endIP* (exclusive). Otherwise returns `false`.</description>
        <prototype>public boolean isInIPRange(rstring startIP, rstring endIP, rstring ip)</prototype>
        <parameter name="startIP" type="rstring"/>
        <parameter name="endIP" type="rstring"/>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isInNetwork" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Return `true` if *ip* address is in the network provided by the *networkCIDR* argument. The *networkCIDR* argument must be a valid network in CIDR format and the *ip* argument must be a valid IPv4 address. Otherwise returns `false`.</description>
        <prototype>public boolean isInNetwork(rstring networkCIDR, rstring ip)</prototype>
        <parameter name="networkCIDR" type="rstring"/>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isInNetwork" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Return `true` if *ip* address is in the network provided by the *networkCIDR* argument. The *networkCIDR* argument must be a valid network in CIDR format and the *ip* argument must be a valid IPv4 address. Otherwise returns `false`.</description>
        <prototype>public boolean isInNetwork(rstring networkCIDR, uint32 ip)</prototype>
        <parameter name="networkCIDR" type="rstring"/>
        <parameter name="ip" type="uint32"/>
      </function>
      <function modelUriIndex="10" name="isInNetworkList" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Return `true` if *ip* address is in at least one of the networks provided by the *networkList* argument. Each of the networks in the list must be a valid network in CIDR format format and the *ip* argument must be a valid IPv4 address. Otherwise returns `false`.</description>
        <prototype>public boolean isInNetworkList(list&lt;rstring&gt; networkList, rstring ip)</prototype>
        <parameter name="networkList" type="list&lt;rstring>"/>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isLessThan" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *ip1* and *ip2* are valid IPv4 addresses and *ip1* address is less than *ip2* address. Otherwise returns `false`. </description>
        <prototype>public boolean isLessThan(rstring ip1, rstring ip2)</prototype>
        <parameter name="ip1" type="rstring"/>
        <parameter name="ip2" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isLinkLocal" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv4 address was provided and the IP address is a link local address (RFC3927). Otherwise returns `false`.</description>
        <prototype>public boolean isLinkLocal(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isLoopback" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv4 address was provided and the IP address is a loopback address (RFC6890). Otherwise returns `false`.</description>
        <prototype>public boolean isLoopback(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isMulticast" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv4 address was provided and the IP address is a multicast address (RFC5771). Otherwise returns `false`.</description>
        <prototype>public boolean isMulticast(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isNetworkOverlap" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *networkCIDR1* and *networkCIDR2* are valid networks in CIDR format and the networks overlap. The networks are considered to be overlapping if at least one IP address is common between the two networks. Otherwise returns `false`.</description>
        <prototype>public boolean isNetworkOverlap(rstring networkCIDR1, rstring networkCIDR2)</prototype>
        <parameter name="networkCIDR1" type="rstring"/>
        <parameter name="networkCIDR2" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isPrivate" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv4 address was provided and the IP address is a private address (RFC1918). Otherwise returns `false`.</description>
        <prototype>public boolean isPrivate(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isReserved" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv4 address was provided and the IP address is a reserved address (RFC1918). An IP address is considered to be reserved if it falls within within one of the special-use address ranges as defined by RFC6890. Otherwise returns `false`.</description>
        <prototype>public boolean isReserved(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="numAddressesInIPRange" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>Returns the number of IP addresses between *ipStart* (inclusive) and *ipEnd* (exclusive). Both *ipStart* and *ipEnd* must be valid IPv4 addresses, otherwise a value of `0` is returned.</description>
        <prototype>public uint32 numAddressesInIPRange(rstring startIP, rstring endIP)</prototype>
        <parameter name="startIP" type="rstring"/>
        <parameter name="endIP" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="numAddressesInNetwork" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>Returns the number of IP addresses contained within the network range. The *networkCIDR* argument must be a valid network in CIDR format, otherwise a value of `0` is returned. </description>
        <prototype>public uint32 numAddressesInNetwork(rstring networkCIDR)</prototype>
        <parameter name="networkCIDR" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="compare" native="true" public="true" returnType="int32" uriIndex="0">
        <description>Returns `-1` if *ip1* is less than *ip2*. Returns `0` if *ip1* is equal to *ip2*. Returns `1` if *ip1* is greater than *ip2*. Both *ip1* and *ip2* must be valid IPv4 addresses, otherwise returns a value of `-2`.</description>
        <prototype>public int32 compare(rstring ip1, rstring ip2)</prototype>
        <parameter name="ip1" type="rstring"/>
        <parameter name="ip2" type="rstring"/>
      </function>
      <function modelUriIndex="10" name="isIPV4Address" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if the *value* parameter contains a valid IPv4 address in dotted-decimal notation (i.e 0.0.0.0), otherwise returns `false`.</description>
        <prototype>public boolean isIPV4Address(rstring value)</prototype>
        <parameter name="value" type="rstring"/>
      </function>
    </namespace>
    <namespace name="com.ibm.streamsx.network.enrichment">
      <primitiveOp language="Cpp" modelUriIndex="11" name="IPSpatialEnricher" public="true">
        <description>This operator enriches IPv4 and IPv6 addresses with geospatial data. Only the MaxMind© GeoIP2 (or GeoLite2) City database is supported. 
      
In order to use this operator, you must download the MaxMind© GeoIP2 (or GeoLite2) City database from the [http://dev.maxmind.com/geoip/|MaxMind©] website. 
These files can then be loaded directly into the operator using the **blocksIPv4File**, **blocksIPv6File** and **locationFile** parameters. To dynamically update the operator whenever
a new version of the database is downloaded, a DirectoryScan operator can be connected to the control input port (input port 1) of this operator. Whenever a new
version of the database is downloaded and extracted into the directory being scanned, the DirectoryScan operator will submit the file paths to the IPSpatialEnricher operator. 
The operator will parse the database files and update it's internal tables.</description>
        <customLiterals name="Locale">
          <value name="de"/>
          <value name="en"/>
          <value name="es"/>
          <value name="fr"/>
          <value name="ja"/>
          <value name="pt_BR"/>
          <value name="ru"/>
          <value name="zh_CN"/>
        </customLiterals>
        <outputFunctions name="EnrichFunctions">
          <function name="AsIs" returnType="T">
            <description>The default function for output attributes. By default, this function assigns the output attribute to the value of the input attribute with the same name.</description>
            <prototype>&lt;any T&gt; T AsIs()</prototype>
          </function>
          <function name="getIPLocationData" returnType="T">
            <description>Returns the location data associated with the IP address(es). The base return type is com.ibm.streamsx.network.enrichment::IPLocation_t. 

The return type of this function depends on the type of input attribute specified by the **inputIPAttr** parameter.

  * If the input attribute has type `rstring`, then the return type of this function is `IPLocation_t`. 
  * If the input attribute has type `list&lt;rstring&gt;`, then the return type of this function is `list&lt;IPLocation_t&gt;`.
  * If the input attribute has type `list&lt;list&lt;rstring&gt;&gt;`, then the return type of this function is `list&lt;list&lt;IPLocation_t&gt;&gt;`.            
            </description>
            <prototype>&lt;any T&gt; T getIPLocationData()</prototype>
          </function>
          <function name="getRegisteredCountryData" returnType="T">
            <description>Returns the registered country data associated with the IP address(es). 

The return type of this function depends on the type of input attribute specified by the **inputIPAttr** parameter.

  * If the input attribute has type `rstring`, then the return type of this function is `IPLocation_t`. 
  * If the input attribute has type `list&lt;rstring&gt;`, then the return type of this function is `list&lt;IPLocation_t&gt;`.
  * If the input attribute has type `list&lt;list&lt;rstring&gt;&gt;`, then the return type of this function is `list&lt;list&lt;IPLocation_t&gt;&gt;`.
  
**Note**: The MaxMind© GeoIP2 database does not contain data for the latitude, longitude and postal_code information for registered country data.
Therefore, the postal_code attribute will contain an empty string, and the latitude and longitude attributes will be populated with the value of `-999.99`.</description>
            <prototype>&lt;any T&gt; T getRegisteredCountryData()</prototype>
          </function>
          <function name="getRepresentedCountryData" returnType="T">
            <description>Returns the represented country data associated with the IP address(es). 

The return type of this function depends on the type of input attribute specified by the **inputIPAttr** parameter.

  * If the input attribute has type `rstring`, then the return type of this function is `IPLocation_t`. 
  * If the input attribute has type `list&lt;rstring&gt;`, then the return type of this function is `list&lt;IPLocation_t&gt;`.
  * If the input attribute has type `list&lt;list&lt;rstring&gt;&gt;`, then the return type of this function is `list&lt;list&lt;IPLocation_t&gt;&gt;`.
  
**Note**: The MaxMind© GeoIP2 database does not contain data for the latitude, longitude and postal_code information for represented country data.
Therefore, the postal_code attribute will contain an empty string, and the latitude and longitude attributes will be populated with the value of `-999.99`. </description>
            <prototype>&lt;any T&gt; T getRepresentedCountryData()</prototype>
          </function>
        </outputFunctions>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Expression" name="inputIPAttr" optional="false">
          <description>Specifies the input attribute containing the IP address (or IP addresses). The attribute can contain either IPv4 or IPv6 addresses. 
The supported data types for this attribute are `rstring`, `list&lt;rstring&gt;` and `list&lt;list&lt;rstring&gt;&gt;`. In the case where the input attributes refers to a type of `list&lt;rstring&gt;` or `list&lt;list&lt;rstring&gt;&gt;`,
the list can contain a mixture of both IPv4 and IPv6 addresses.</description>
          <portScope>0</portScope>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="blocksIPv4File" optional="true" type="rstring">
          <description>Specifies the file path of the MaxMind IPv4 GeoIP2 (or GeoLite2) "blocks" file. Only the CSV-version of the database is supported. 
This parameter should not be used if input port 1 is defined.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="locationFile" optional="true" type="rstring">
          <description>Specifies the file path of the MaxMind GeoIP2 (or GeoLite2) "locations" file. Only the **English** CSV-version of the database is supported. 
This parameter should not be used if input port 1 is defined.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="blocksIPv6File" optional="true">
          <description>Specifies the file path of the MaxMind IPv6 GeoIP2 (or GeoLite2) "blocks" file. Only the CSV-version of the database is supported. 
This parameter should not be used if input port 1 is defined.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>Ingests tuples containing IP addresses. The `inputIPAttr` parameter specifies the attribute containing the IP addresses.
Both IPv4 and IPv6 addresses are supported.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="true" windowPunctInputMode="Oblivious">
          <description>Control port that ingests a file path pointing to a MaxMind GeoIP2 (or GeoLite2) database CSV files. The operator determines whether the incoming file path refers 
to a "locations" file, "IPv4 blocks" file or "IPv6 blocks" file based on the name of the file. The expected file names are:

  * For the "locations" file: `GeoIP2-City-Locations-en.csv` or `GeoLite2-City-Locations-en.csv`
  * For IPv4 "blocks" file: `GeoIP2-City-Blocks-IPv4.csv` or `GeoLite2-City-Blocks-IPv4.csv`
  * For IPv6 "blocks" file: `GeoIP2-City-Blocks-IPv6.csv` or `GeoLite2-City-Blocks-IPv6.csv`

This control port can be used to dynamically update the operator's internal database. Each time a tuple is received containing a path to one of 
the files listed above, the operator will update it's internal table with the data in the file.

This input port expects a tuple containing a single attribute of type `rstring`.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>Submits a tuple for each input tuple received on input port 0. Custom output functions are used to specify which attribute should contain the enrichment data. 
The output tuple attributes whose assignments are not specified are assigned from input attributes.</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="12" name="IPASNEnricher" public="true">
        <description>This operator enriches IPv4 and IPv6 addresses with ASN data. Only the MaxMind© GeoLite ASN database is supported. 
      
In order to use this operator, you must download the MaxMind© GeoLite ASN database files in CSV format from the [http://dev.maxmind.com/geoip/legacy/geolite/|MaxMind©] website. 
These files can then be loaded directly into the operator using the **asnIPv4File** and **asnIPv6File** parameters. To dynamically update the operator whenever
a new version of the database is downloaded, a DirectoryScan operator can be connected to the control input port (input port 1) of this operator. Whenever a new
version of the database files are downloaded into the directory being scanned, the DirectoryScan operator will submit the file paths to the IPASNEnricher operator. 
The operator will parse the database files and update it's internal tables.</description>
        <outputFunctions name="EnrichFunctions">
          <function name="AsIs" returnType="T">
            <description>The default function for output attributes. By default, this function assigns the output attribute to the value of the input attribute with the same name.</description>
            <prototype>&lt;any T&gt; T AsIs()</prototype>
          </function>
          <function name="getASNInfo" returnType="T">
            <description>Returns the ASN record associated with the input IP address(es). 
            
The return type of this function depends on the type of input attribute specified by the **inputIPAttr** parameter.

  * If the input attribute has type `rstring`, then the return type of this function is `rstring`. 
  * If the input attribute has type `list&lt;rstring&gt;`, then the return type of this function is `list&lt;rstring&gt;`.</description>
            <prototype>&lt;any T&gt; T getASNInfo()</prototype>
          </function>
          <function name="getASNumber" returnType="T">
            <description>Returns the 32-bit ASN number associated with the input IP address(es). For example, if the ASN record associated with the input IP is "AS26062 IBM", 
            then the function will return "26062".

The return type of this function depends on the type of input attribute specified by the **inputIPAttr** parameter.

  * If the input attribute has type `rstring`, then the return type of this function is `uint32`. 
  * If the input attribute has type `list&lt;rstring&gt;`, then the return type of this function is `list&lt;uint32&gt;`.</description>
            <prototype>&lt;any T&gt; T getASNumber()</prototype>
          </function>
        </outputFunctions>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Expression" name="inputIPAttr" optional="true">
          <description>Specifies the input attribute containing the IP address (or IP addresses). The attribute can contain either IPv4 or IPv6 addresses. 
The supported data types for this attribute are `rstring` and `list&lt;rstring&gt;`. In the case where the input attributes refers to a type of `list&lt;rstring&gt;`,
the list can contain a mixture of both IPv4 and IPv6 addresses.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="asnIPv4File" optional="true" type="rstring">
          <description>Specifies the file path of the MaxMind IPv4 ASN database file. Only the CSV-version of the database is supported. 
This parameter should not be used if input port 1 is defined.</description>
        </parameter>
        <parameter cardinality="1" expressionMode="AttributeFree" name="asnIPv6File" optional="true" type="rstring">
          <description>Specifies the file path of the MaxMind IPv6 ASN database file. Only the CSV-version of the database is supported. 
This parameter should not be used if input port 1 is defined.</description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>Ingests tuples containing IP addresses. The `inputIPAttr` parameter specifies the attribute containing the IP addresses.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="true" windowPunctInputMode="Oblivious">
          <description>Control port that ingests a file path pointing to a MaxMind ASN database CSV file. The operator determines whether the database contains
IPv4 or IPv6 information based on the name of the file. The expected file names are:

  * For IPv4: "GeoIPASNum2.csv"
  * For IPv6: "GeoIPASNum2v6.csv"

This control port can be used to dynamically update the operator's internal ASN database. Each time a tuple is received containing a path to one of 
the files listed above, the operator will update it's internal table with the data in the file.

This input port expected a tuple containing a single attribute of type `rstring`.</description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" maxNumPorts="1" minNumPorts="1" optional="false" windowPunctOutputMode="Generating">
          <description>Submits a tuple for each input tuple received on input port 0. Custom output functions are used to specify which attribute should contain the enrichment data. 
The output tuple attributes whose assignments are not specified are assigned from input attributes.</description>
        </outputPort>
      </primitiveOp>
      <type column="2" line="13" name="IPLocation_t" static="true" type="rstring localeCode, rstring continentCode, rstring continentName, rstring countryISOCode, rstring countryName, rstring subdivisionISOCode1, rstring subdivisionISOName1, rstring subdivisionISOCode2, rstring subdivisionISOName2, rstring cityName, rstring metroCode, rstring timezone, rstring postalCode, float64 latitude, float64 longitude" uriIndex="2"/>
      <type column="2" line="30" name="IPASNumber_t" static="true" type="uint32" uriIndex="2"/>
      <type column="2" line="33" name="IPASNInfo_t" static="true" type="rstring" uriIndex="2"/>
    </namespace>
    <namespace name="com.ibm.streamsx.network.ipv6">
      <function modelUriIndex="13" name="convertIPV6AddressNumericToString" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>This function converts a sixteen-byte binary representation of an IPv6 address into a string representation.</description>
        <prototype>public rstring convertIPV6AddressNumericToString(list &lt;uint8&gt;[16] ipv6AddressNumeric)</prototype>
        <parameter name="ipv6AddressNumeric" type="list&lt;uint8>[16]"/>
      </function>
      <function modelUriIndex="13" name="convertIPV6AddressStringToNumeric" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>This function converts a string representation of an IPv6 address into a sixteen-byte binary representation. If the string does not represent a valid IPv6 address, zero is returned.</description>
        <prototype>public list&lt;uint8&gt;[16] convertIPV6AddressStringToNumeric(rstring ipv6AddressString)</prototype>
        <parameter name="ipv6AddressString" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isIPV6Address" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if the *value* parameter contains a valid IPv6 address. Otherwise returns `false`.</description>
        <prototype>public boolean isIPV6Address(rstring value)</prototype>
        <parameter name="value" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isEqualTo" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *ip1* and *ip2* are valid IPv6 addresses and *ip1* address is equal to *ip2* address. Otherwise returns `false`. </description>
        <prototype>public boolean isEqualTo(rstring ip1, rstring ip2)</prototype>
        <parameter name="ip1" type="rstring"/>
        <parameter name="ip2" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isLinkLocal" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv6 address was provided and the IP address is a link-local address (RFC3513). Otherwise returns `false`.</description>
        <prototype>public boolean isLinkLocal(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isLoopback" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv6 address was provided and the IP address is a loopback address (RFC3513). Otherwise returns `false`.</description>
        <prototype>public boolean isLoopback(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isMulticast" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv6 address was provided and the IP address is a multicast address (RFC3513). Otherwise returns `false`.</description>
        <prototype>public boolean isMulticast(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isUnspecified" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv6 address was provided and the IP address is a unspecified (RFC3513). Otherwise returns `false`.</description>
        <prototype>public boolean isUnspecified(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isSiteLocal" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv6 address was provided and the IP address is a site-local address (RFC3513). Otherwise returns `false`.</description>
        <prototype>public boolean isSiteLocal(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isV4Mapped" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv6 address was provided and the IP address is an "IPv4-mapped IPv6 address" (RFC3513). Otherwise returns `false`.</description>
        <prototype>public boolean isV4Mapped(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isV4Compatible" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if a valid IPv6 address was provided and the IP address is an "IPv4-compatible IPv6 address" (RFC3513). Otherwise returns `false`.</description>
        <prototype>public boolean isV4Compatible(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isInIPRange" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *startIP*, *endIP* and *ip* are valid IPv6 addresses and *ip* falls within the range from *startIP* (inclusive) to *endIP* (exclusive). Otherwise returns `false`.</description>
        <prototype>public boolean isInIPRange(rstring startIP, rstring endIP, rstring ip)</prototype>
        <parameter name="startIP" type="rstring"/>
        <parameter name="endIP" type="rstring"/>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isGreaterThan" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *ip1* and *ip2* are valid IPv6 addresses and *ip1* address is greater than *ip2* address. Otherwise returns `false`. </description>
        <prototype>public boolean isGreaterThan(rstring ip1, rstring ip2)</prototype>
        <parameter name="ip1" type="rstring"/>
        <parameter name="ip2" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isLessThan" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if *ip1* and *ip2* are valid IPv6 addresses and *ip1* address is less than *ip2* address. Otherwise returns `false`. </description>
        <prototype>public boolean isLessThan(rstring ip1, rstring ip2)</prototype>
        <parameter name="ip1" type="rstring"/>
        <parameter name="ip2" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isInNetwork" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Return `true` if *ip* address is in the network provided by the *networkCIDR* argument. The *networkCIDR* argument must be a valid IPv6 network in CIDR format and the *ip* argument must be a valid IPv6 address. Otherwise returns `false`.</description>
        <prototype>public boolean isInNetwork(rstring networkCIDR, rstring ip)</prototype>
        <parameter name="networkCIDR" type="rstring"/>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isInNetworkList" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Return `true` if *ip* address is in at least one of the networks provided by the *networkList* argument. Each of the networks in the list must be a valid IPv6 network in CIDR format format and the *ip* argument must be a valid IPv6 address. Otherwise returns `false`.</description>
        <prototype>public boolean isInNetworkList(list&lt;rstring&gt; networkList, rstring ip)</prototype>
        <parameter name="networkList" type="list&lt;rstring>"/>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="isIPV6CIDRNotation" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>Returns `true` if the *networkCIDR* argument contains a valid IPv6 network address in CIDR format (i.e. 2001:db8::/32). Otherwise returns `false`.</description>
        <prototype>public boolean isIPV6CIDRNotation(rstring networkCIDR)</prototype>
        <parameter name="networkCIDR" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="compactIPV6" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>Compacts a valid IPv6 address (RFC3513). The *ip* argument must be a valid IPv6 address, otherwise an empty string is returned. </description>
        <prototype>public rstring compactIPV6(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
      <function modelUriIndex="13" name="expandIPV6" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>Expands a valid IPv6 address (RFC3513). The *ip* argument must be a valid IPv6 address, otherwise an empty string is returned. </description>
        <prototype>public rstring expandIPV6(rstring ip)</prototype>
        <parameter name="ip" type="rstring"/>
      </function>
    </namespace>
    <namespace name="com.ibm.streamsx.network.mac">
      <function modelUriIndex="14" name="convertMACAddressNumericToString" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>This function converts an ethernet MAC address from a six-byte binary value to a string representation.</description>
        <prototype>public rstring convertMACAddressNumericToString(list&lt;uint8&gt;[6] macAddressNumeric)</prototype>
        <parameter name="macAddressNumeric" type="list&lt;uint8>[6]"/>
      </function>
      <function modelUriIndex="14" name="convertMACAddressStringToNumeric" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>This function converts an ethernet MAC address from a string representation to a six-byte binary value.</description>
        <prototype>public list&lt;uint8&gt;[6] convertMACAddressStringToNumeric(rstring macAddressString)</prototype>
        <parameter name="macAddressString" type="rstring"/>
      </function>
    </namespace>
    <namespace name="com.ibm.streamsx.network.content">
      <primitiveOp language="Cpp" modelUriIndex="16" name="PacketContentAssembler" public="true">
        <description>


PacketContentAssembler is an operator for the IBM InfoSphere Streams product that
reassembles application flows (such as SMTP, FTP, HTTP, and SIP)
and files (such as GIF, JPEG, HTML, and and PDF)
from raw network packets received in input tuples, 
and emits tuples containing the reassembled content. 
The operator may be configured with one or more output ports,
and each port may be configured to emit different tuples,
as specified by output filters.
The tuples contain individual fields from flows and files, as
specified by output attribute assignments.  

The PacketContentAssembler operator expects raw ethernet packets in its input tuples,
including all of their network headers.  The
[PacketLiveSource] and [PacketFileSource] operators can produce tuples that contain
DNS messages with the [PACKET_DATA()] output attribute assignment function.

The PacketContentAssembler operator 
consumes network packets from tuples received by its input port 
and reassembles flows and files in internal buffers.
It produces output tuples containing the results of its reassembly when
one of the following events is detected:

**FlowStart** The operator emits this event
whenever it detects the beginning of a 'flow' of packets.  A
'flow' is a sequence of related packets exchanged by a pair of network
endpoints, as identified by their addresses and port numbers, which are available
from result functions.  The flow is assigned a
unique identifier, which will be
used with all subsequent events related to the flow, allowing
downstream operators to correlate tuples related to the flow.

 **FlowEnd** The operator emits this event
whenever it detects the end of a 'flow' of packets.  The
number of packets and bytes exchanged between the endpoints are
available from result functions. The flow's identifier will not be used again in any
subsequent event.

**FlowData** The operator emits this event  
with the payload data from packets related to a flow, excluding
the network headers, which is available from result functions.

  **FlowTLS** The operator emits this event for flows that 
are encrypted with 'transport layer security (TLS)'.
The individual fields of the TLS headers and the encrypted data
are available from result functions.
Note that the toolkit does not have access to encryption
certificates, and cannot decrypt flow data.

**Request** The operator emits this event for flows that use a
'request/response' protocol (for example, SMTP, HTTP, or FTP),
after all request headers have been received. The URI and header values
are availble from result functions.

**Response** The operator emits this event for flows that use a
'request/response' protocol (for example, SMTP, HTTP, or FTP),
after all response headers have been received. The status and header values
are availble from result functions.

**FileChunk** The operator emits this event
whenever it finds a chunk of transaction data in an application 'file' format, that is,
a sequence of bytes in a format that could be stored
in a host file, and produced or consumed by an application (for
example, HTML, JPEG, or PDF).  The file is assigned a unique
identifier, which is used in all subsequent chunks of the same file.
Each chunk of the file is assigned a sequence number,
and the first and last chunks are flagged, so that 
a complete file can be reconstructed.
The MIME type from the 'ContentType' header specifies the type of file.

There is no necessary relationship between input tuples consumed and output tuples produced, that is,
the operator may consume one or more input tuples without producing any output tuples, or,
one input tuple consumed may produce one or more output tuples.

Output filters are SPL expressions that specify which events should produce output tuples on which output ports;
they must evaluate to a `boolean` value.
Output attribute assignments are also SPL expressions that assign values to the attributes of output tuples;
they must evaluate to the type of the attribute they assign to.
Output filters and attribute assignments may use any
of the built-in SPL functions, and any of these functions, which are specific to
the PacketContentAssembler operator: 

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.content.html|content assembler result functions]

Output tuple attributes that are not assigned a value explicitly, but which match
an input attribute in both name and type, will be copied automatically when the output tuple is produced.

This operator is part of the network toolkit. To use it in an application,
include this statement in the SPL source file:

    use com.ibm.streamsx.network.content::*;

# Dependencies

The PacketContentAssembler depends upon the 'Packet Analysis Module (PAM)'
library, developed by 
the IBM Internet Security (ISS) X-Force team, 
which is packaged separately from the toolkit.

The PAM library must be downloaded and installed separately from the toolkit.
When SPL applications containing the PacketContentAssembler operator are compiled,
the location of the installed PAM library must be specified with the STREAMS_ADAPTERS_ISS_PAM_DIRECTORY
environment variable. For example, before executing the `sc` command to compile such an application,
set the environment variable like this:

    export STREAMS_ADAPTERS_ISS_PAM_DIRECTORY=/home/username/com.ibm.iss.pam

# Threads

The PacketContentAssembler runs on the thread of the upstream operator that sends
input tuples to it.

# Exceptions

The PacketContentAssembler operator will throw an exception and terminate in these
situations:

* No output ports are specified.

* The `outputFilters` parameter is specified, and the number of expressions 
specified does not match the number of output ports specified.

# Sample Applications

The network toolkit includes several
[./tk$SamplePacketContentAssembler/tk$SamplePacketContentAssembler.html|sample applications]
that illustrate how to use this operator.

# References

The result functions that can be used in boolean
expressions for the `outputFilters` parameter
and in output attribute assignment expressions are described here:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.content.html|content assembler result functions].  

      </description>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Attribute" name="packetAttribute" optional="false" type="blob">
          <description>

This required parameter specifies an input
attribute of type 'blob' that contains an ethernet packet to be parsed
by the operator.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Attribute" name="timestampAttribute" optional="false" type="float64">
          <description>

This required parameter specifies an input
attribute of type 'float64' that contains the time, in seconds relative to the
begining of the Unix epoch (midnight on January 1st, 1970 in Greenwich, England)
when the packet was
originally received from an ethernet adapter.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="fileChunkSize" optional="true" type="uint32">
          <description>

This optional parameter specifies a minimum size
for 'chunks' of file data provided via the assembler result functions.
This parameter may improve
performance by packing file data that arrives in fragments into
fewer, but larger, tuples.  However, the value specified is not a
maximum or minimum size: the operator may emit tuples with more file
data (for example, when large packets are received) or less file data
(for example, when the last chunk is small).

The default value is 100 kilobytes (102,400 bytes).

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="maximumFilesPerFlow" optional="true" type="uint32">
          <description>

This optional parameter limits the number of
concurrent open files per flow.  If specified, further files in the flow
will be ignored after the limit is reached, unless the flow closes some of
the files it has opened, until the flow ends.  When this parameter is not
specified, flows may open an unlimited number of files.  Note that each open
file requires a buffer, whose size is specified by the `fileChunkSize`
parameter, so the total amount of memory is unlimited.  Long-running flows
that open many files without closing any of them may exhaust the available
memory.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Constant" name="pamLibrary" optional="true" type="rstring">
          <description>

          This optional parameter is a pathname for the PAM library, a
          Linux shared object library which implements the packet assembly engine.
          If the pathname value specified is not absolute, then it is
          relative to the directory specified by the STREAMS_ADAPTERS_ISS_PAM_DIRECTORY
          environment variable at compile time.
          The default value is 'iss-pam1.so'.

        </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="AttributeFree" name="pamTuning" optional="true" type="rstring">
          <description>
          
          This optional parameter is a comma-separated list of strings
          containing tuning values for the PAM library, specified as "name=value".
          PAM tuning values are described in the file `tune.csv` in
          the directory specified by the STREAMS_ADAPTERS_ISS_PAM_DIRECTORY
          environment variable.

          The operator automatically applies these tuning values, in addition to those specified
          with this parameter:

    pam.sensor.type.hint=xpfshell
    pam.debug.fragroute=false

        </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="outputFilters" optional="true" type="boolean">
          <description>

This optional parameter takes a list of SPL expressions that specify which events
should be emitted by the corresponding output port. The number of
expressions in the list must match the number of output ports, and each
expression must evaluate to a `boolean` value.  The output filter expressions may include any
of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.content.html|content assembler result functions].  

The default value of the `outputFilters` parameter is an empty list, which
causes all events to be emitted by all output ports.

        </description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="false" windowPunctInputMode="Oblivious">
          <description>

The PacketContentAssembler operator requires one input port.  One input attribute must be
of type `blob` and must contain a raw ethernet packet, including the network headers that
proceed them in network packets, as specified by the required parameter
`packetAttribute`.

The [PACKET_DATA()] output assignment function of the [PacketLiveSource] and
[PacketFileSource] operators produces attributes that
can be consumed by the PacketContentAssembler operator.

        </description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Preserving">
          <description>

The PacketContentAssembler operator requires one or more output ports.

Each output port will produce one output tuple for each event
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified. 

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the 
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.content.html|content assembler result functions].  
Output attributes that match input attributes in name and
type are copied automatically.

        </description>
        </outputPort>
      </primitiveOp>
      <function modelUriIndex="15" name="EVENT" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>

          This result function returns a string containing the name of the event
          that caused the output tuple to be produced.  The value is one of
          'FlowStart', 'FlowTLS', 'FlowData', 'FlowEnd', 'Request', 'Response',
          or 'FileChunk'.

        </description>
        <prototype>public rstring EVENT()</prototype>
      </function>
      <function modelUriIndex="15" name="EVENT_FLOW_START" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

      This result function returns `true` if this is the first tuple of a new flow,
      or `false` otherwise.

        </description>
        <prototype>public boolean EVENT_FLOW_START()</prototype>
      </function>
      <function modelUriIndex="15" name="EVENT_FLOW_TLS" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

      This result function returns `true` if this flow is encrypted using the TLS protocol,
      or `false` otherwise.

        </description>
        <prototype>public boolean EVENT_FLOW_TLS()</prototype>
      </function>
      <function modelUriIndex="15" name="EVENT_FLOW_DATA" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

      This result function returns `true` if data for the current flow has been received,
      or `false` otherwise.

        </description>
        <prototype>public boolean EVENT_FLOW_DATA()</prototype>
      </function>
      <function modelUriIndex="15" name="EVENT_FLOW_END" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

      This result function returns `true` if this is the last tuple of a flow,
      or `false` otherwise.

        </description>
        <prototype>public boolean EVENT_FLOW_END()</prototype>
      </function>
      <function modelUriIndex="15" name="EVENT_REQUEST" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

      This result function returns `true` if request headers for a transaction within
      the current flow have been received,
      or `false` otherwise.

        </description>
        <prototype>public boolean EVENT_REQUEST()</prototype>
      </function>
      <function modelUriIndex="15" name="EVENT_RESPONSE" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

      This result function returns `true` if response headers for a transaction within 
      the current flow flow have been received,
      or `false` otherwise.

        </description>
        <prototype>public boolean EVENT_RESPONSE()</prototype>
      </function>
      <function modelUriIndex="15" name="EVENT_FILE_CHUNK" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

      This result function returns `true` if a chunk of a file within the current flow has been received,
      or `false` otherwise.

        </description>
        <prototype>public boolean EVENT_FILE_CHUNK()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_ETHER_SRC_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>

      This result function returns the ethernet MAC address of the source endpoint of this flow.

        </description>
        <prototype>public list&lt;uint8&gt;[6] FLOW_ETHER_SRC_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_ETHER_DST_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>

      This result function returns the ethernet MAC address of the destination endpoint of this flow.

        </description>
        <prototype>public list&lt;uint8&gt;[6] FLOW_ETHER_DST_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_IPV4_SRC_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

      This result function returns the IP version 4 address of the source endpoint of this flow.

        </description>
        <prototype>public uint32 FLOW_IPV4_SRC_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_IPV4_DST_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

      This result function returns the IP version 4 address of the destination endpoint of this flow.

        </description>
        <prototype>public uint32 FLOW_IPV4_DST_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_SRC_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

      This result function returns the UDP or TCP port number of the source endpoint of this flow,
      if the flow's IP protocol is UDP or TCP, or zero otherwise.

        </description>
        <prototype>public uint16 FLOW_SRC_PORT()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DST_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

      This result function returns the UDP or TCP port number of the destination endpoint of this flow,
      if the flow's IP protocol is UDP or TCP, or zero otherwise.

        </description>
        <prototype>public uint16 FLOW_DST_PORT()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_ID" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

      This result function returns a unique numeric identifier for the current flow.
      The same value is assigned to all events related to the
      flow, and is not used again after that flow's 'FlowEnd' event, so applications
      can use this identifier to correlate all of the tuples related to it.

        </description>
        <prototype>public uint64 FLOW_ID()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_PROTOCOL" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>

      This result function returns the application protocol, if the operator can determine it,
      or an empty string if not. Its values are described in the file
      'protocols.csv' in the toolkit.

        </description>
        <prototype>public rstring FLOW_PROTOCOL()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_PROTOCOL_CONFIDENCE" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>

      This result function returns an integer from 1 to 3 indicating the
      operator's confidence in its identification of the application protocol
      (see the `FLOW_PROTOCOL()` result function),
      from 'low' to 'high', respectively.

        </description>
        <prototype>public uint8 FLOW_PROTOCOL_CONFIDENCE()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_PROTOCOL_DEPTH" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>

      This result function returns a small value, usually between 0
      and 7, indicating the nesting depth at which the application protocol (see the `FLOW_PROTOCOL()` result function) was identified.

        </description>
        <prototype>public uint8 FLOW_PROTOCOL_DEPTH()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_START_TIME" native="true" public="true" returnType="float64" uriIndex="0">
        <description>

      This result function returns the time when the flow started,
      in seconds, relative to the beginning of the Unix epoch
      (midnight on January 1st, 1970 in Greenwich, England),
      with a precision of microseconds.

        </description>
        <prototype>public float64 FLOW_START_TIME()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_EVENT_TIME" native="true" public="true" returnType="float64" uriIndex="0">
        <description>

      This result function returns the time of the current event,
      in seconds, relative to the beginning of the Unix epoch
      (midnight on January 1st, 1970 in Greenwich, England),
      with a precision of microseconds.

        </description>
        <prototype>public float64 FLOW_EVENT_TIME()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_END_TIME" native="true" public="true" returnType="float64" uriIndex="0">
        <description>

      This result function returns the time when the flow ended,
      in seconds, relative to the beginning of the Unix epoch
      (midnight on January 1st, 1970 in Greenwich, England),
      with a precision of microseconds, for the 'FlowEnd' event only.
      A value of zero is returned for all other events.

        </description>
        <prototype>public float64 FLOW_END_TIME()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_ELAPSED_TIME" native="true" public="true" returnType="float64" uriIndex="0">
        <description>

      This result function returns the elapsed time of the flow
      in seconds,
      with a precision of microseconds, for the 'FlowEnd' event only.
      A value of zero is returned for all other events.

        </description>
        <prototype>public float64 FLOW_ELAPSED_TIME()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_IP_PROTOCOL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>
          This result function returns the value of the IP protocol field from the
          flow's IP headers,
          if it is an IP flow, or zero otherwise.
          For example, a value of '6' indicates that the flow uses
          the TCP protocol, and a value of '17' indicates that the flow uses the UDP
          protocol.
        </description>
        <prototype>public uint8 FLOW_IP_PROTOCOL()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DIRECTION" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns "SrcToDst" or
          "DstToSrc", where source and destination refer to the FLOW_xxxx_ADDRESS() functions, 
          or "" if the operator cannot determine a direction.
        </description>
        <prototype>public rstring FLOW_DIRECTION()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DATA_COUNTER" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns a sequence number for the `FlowData`
          events within a particular flow, starting at zero for each new flow, as
          identified by the `FLOW_ID()` function.
        </description>
        <prototype>public uint64 FLOW_DATA_COUNTER()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_SRC_PACKETS" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the total number of packets
          sent by the source endpoint of the flow to the destination endpoint,
          for the `FlowEnd` event only. The function returns zero for all other events in the flow.
        </description>
        <prototype>public uint64 FLOW_SRC_PACKETS()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DST_PACKETS" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the total number of packets
          sent by the destination endpoint of the flow to the source endpoint,
          for the `FlowEnd` event only. The function returns zero for all other events in the flow.
        </description>
        <prototype>public uint64 FLOW_DST_PACKETS()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_SRC_BYTES" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the total number of bytes
          sent by the source endpoint of the flow to the destination endpoint,
          for the `FlowEnd` event only. The function returns zero for all other events in the flow.
        </description>
        <prototype>public uint64 FLOW_SRC_BYTES()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DST_BYTES" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the total number of bytes
          sent by the destination endpoint of the flow to the source endpoint,
          for the `FlowEnd` event only. The function returns zero for all other events in the flow.
        </description>
        <prototype>public uint64 FLOW_DST_BYTES()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DISCONNECT_REASON" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the reason a flow ended.  The value
          is valid only for tuples emitted due to 'FlowEnd' events; an empty string is returned for all other
          events.  The function may assign 'normal', 'clientAbort', 'serverAbort',
          'shutdown', 'dataLoss', 'resources', or else '?' if the operator cannot
          determine why the flow ended.
        </description>
        <prototype>public rstring FLOW_DISCONNECT_REASON()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DATA_LENGTH" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the length of the flow data received, for the 'FlowData' event only.
          The function returns zero for all other events in the flow.
        </description>
        <prototype>public uint64 FLOW_DATA_LENGTH()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DATA_BINARY" native="true" public="true" returnType="blob" uriIndex="0">
        <description>
          This result function returns the flow data received as a binary object, for the 'FlowData' event only.
          The function returns an empty 'blob' for all other events in the flow.
        </description>
        <prototype>public blob FLOW_DATA_BINARY()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_DATA_STRING" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the flow data received as a string, for the 'FlowData' event only.
          The function returns an empty string for all other events in the flow.
        </description>
        <prototype>public rstring FLOW_DATA_STRING()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_TRANSACTION_ID" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This result function returns 
          a unique numeric identifier for the current request/response pair within 
          the current flow, when there is one, or zero if not.
      The same value is assigned to all events related to the
      transaction, and is not used again, so applications
      can use this identifier to correlate all of the tuples related to it.
        </description>
        <prototype>public uint32 FLOW_TRANSACTION_ID()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_METHOD" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the 'method' portion of a URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_METHOD()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_RAW" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the 'raw' URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_RAW()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_NORMALIZED" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns URI, the 'normalized' portion of a URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_NORMALIZED()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_SCHEME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the 'scheme' portion of a URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_SCHEME()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_AUTHORITY" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the 'authority' portion of a URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_AUTHORITY()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_USERNAME" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the 'username' portion of a URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_USERNAME()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_PATH" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the 'path' portion of a URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_PATH()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_QUERY" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the 'query' portion of a URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_QUERY()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_URI_FRAGMENT" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the 'fragment' portion of a URI, when the current transaction of the current flow 
          has one, or an empty string if not.
        </description>
        <prototype>public rstring FLOW_REQUEST_URI_FRAGMENT()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_REQUEST_HEADERS" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns the request headers of the current transaction of the current flow, 
          if it has any, or an empty string if not.
        </description>
        <prototype>public list&lt;rstring&gt; FLOW_REQUEST_HEADERS()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_RESPONSE_HEADERS" native="true" public="true" returnType="list&lt;rstring>" uriIndex="0">
        <description>
          This result function returns the response headers of the current transaction of the current flow, 
          if it has any, or an empty string if not.
        </description>
        <prototype>public list&lt;rstring&gt; FLOW_RESPONSE_HEADERS()</prototype>
      </function>
      <function modelUriIndex="15" name="FLOW_RESPONSE_STATUS_CODE" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This result function returns the response status code of the current transaction of the current flow, 
          if it has any, or an empty string if not.
        </description>
        <prototype>public uint32 FLOW_RESPONSE_STATUS_CODE()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_ID" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns a unique numeric identifier for the current file.
      The same value is assigned to all events related to the
      file, and is not used again after the final chunk of the file, so applications
      can use this identifier to correlate all of the tuples related to it.
        </description>
        <prototype>public uint64 FILE_ID()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_ID_PARENT" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the identifier of the file containing the current file,
          when the transaction contains a file containing other files, and the operator
          can decompose them, or zero if not.
        </description>
        <prototype>public uint64 FILE_ID_PARENT()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_FORMAT" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the format of the current file, if there is one and 
          the operator can determine it, or an empty string if not.
        </description>
        <prototype>public rstring FILE_FORMAT()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CONTENT_TYPE" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the value of the 'ContentType' header for the current file,
          if there is one, or an empty string if not.
        </description>
        <prototype>public rstring FILE_CONTENT_TYPE()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CONTENT_CHARSET" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the character set portion of the 'ContentType' header for the current file,
          if there is one, or an empty string if not.
        </description>
        <prototype>public rstring FILE_CONTENT_CHARSET()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CONTENT_LENGTH" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the value of the 'ContentLength' header for the current file,
          if there is one, or an empty string if not. Note that this value may be incorrect, if present,
          that is, the sum of the file chunks may be more or less than the length declared in the header.
        </description>
        <prototype>public uint64 FILE_CONTENT_LENGTH()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CHUNK_LENGTH" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the length of the current chunk of the current file, 
          for 'FileChunk' events only. The function returns zero for all other events.
        </description>
        <prototype>public uint64 FILE_CHUNK_LENGTH()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CHUNK_LENGTH_SUM" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the sum of the lengths of this and all preceding chunks of the 
          current file, 
          for 'FileChunk' events only. The function returns zero for all other events.
        </description>
        <prototype>public uint64 FILE_CHUNK_LENGTH_SUM()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CHUNK_COUNTER" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns a sequence number for this chunk of the current file, starting 
          at zero, for 'FileChunk' events only. The function returns zero for all other events.
        </description>
        <prototype>public uint64 FILE_CHUNK_COUNTER()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CHUNK_INITIAL" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This result function returns `true` for the first chunk of the curent file, for `FileChunk` events only,
          or `false` otherwise,
        </description>
        <prototype>public boolean FILE_CHUNK_INITIAL()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CHUNK_FINAL" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This result function returns `true` for the last chunk of the current file, for `FileChunk` events only,
          or `false` otherwise,
        </description>
        <prototype>public boolean FILE_CHUNK_FINAL()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CHUNK_BINARY" native="true" public="true" returnType="blob" uriIndex="0">
        <description>
          This result function returns the current chunk of the current file as a binary object,
          for 'FileChunk' events only. The function returns an empty 'blob' for all other events.
        </description>
        <prototype>public blob FILE_CHUNK_BINARY()</prototype>
      </function>
      <function modelUriIndex="15" name="FILE_CHUNK_STRING" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the current chunk of the current file as a string,
          for 'FileChunk' events only. The function returns an empty string for all other events.
        </description>
        <prototype>public rstring FILE_CHUNK_STRING()</prototype>
      </function>
      <function modelUriIndex="15" name="OPEN_FLOWS" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the number of flows that are open at the
time the tuple is produced.
        </description>
        <prototype>public uint64 OPEN_FLOWS()</prototype>
      </function>
      <function modelUriIndex="15" name="OPEN_FILES" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the number of files that are open at the
time the tuple is produced.
        </description>
        <prototype>public uint64 OPEN_FILES()</prototype>
      </function>
      <function modelUriIndex="15" name="OPEN_FLOWS_HIGH_WATER_MARK" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the maximum number of flows that
were ever open simultaneously, since the operator started.
        </description>
        <prototype>public uint64 OPEN_FLOWS_HIGH_WATER_MARK()</prototype>
      </function>
      <function modelUriIndex="15" name="OPEN_FILES_HIGH_WATER_MARK" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>
          This result function returns the maximum number of files that
were ever open simultaneously, since the operator started.
        </description>
        <prototype>public uint64 OPEN_FILES_HIGH_WATER_MARK()</prototype>
      </function>
      <function modelUriIndex="15" name="TLS_RECORD_TYPE" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the type of TLS message found, if the flow is
encrypted with the 'transport-layer security' protocol, or an empty string if not.
        </description>
        <prototype>public rstring TLS_RECORD_TYPE()</prototype>
      </function>
      <function modelUriIndex="15" name="TLS_RECORD_DIRECTION" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the direction this TLS message is going, if the flow is
encrypted with the 'transport-layer security' protocol, or an empty string if not.
        </description>
        <prototype>public rstring TLS_RECORD_DIRECTION()</prototype>
      </function>
      <function modelUriIndex="15" name="TLS_RECORD_LENGTH" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This result function returns the length of this TLS message, if the flow is
encrypted with the 'transport-layer security' protocol, or '0' if not.
        </description>
        <prototype>public uint32 TLS_RECORD_LENGTH()</prototype>
      </function>
      <function modelUriIndex="15" name="TLS_RECORD_OFFSET" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This result function returns the offset of this TLS message, if the flow is
encrypted with the 'transport-layer security' protocol, or '0' if not.
        </description>
        <prototype>public uint32 TLS_RECORD_OFFSET()</prototype>
      </function>
      <function modelUriIndex="15" name="TLS_RECORD_MORE" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>
          This result function indicates whether or not more TLS messages are coming, if the flow is
encrypted with the 'transport-layer security' protocol, or `false` if not.
        </description>
        <prototype>public boolean TLS_RECORD_MORE()</prototype>
      </function>
      <function modelUriIndex="15" name="TLS_VERSION" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns the version of the TLS protocol being used, if the flow is
encrypted with the 'transport-layer security' protocol, or an empty string if not.
        </description>
        <prototype>public rstring TLS_VERSION()</prototype>
      </function>
      <function modelUriIndex="15" name="TUNNEL_TYPE" native="true" public="true" returnType="rstring" uriIndex="0">
        <description>
          This result function returns characteristics of protocols found within
another protocol.  The TUNNEL_TYPE() function may assign "6IN4", "4IN6", "GRE",
or "IP" if a tunnel is detected, or an empty string if not.
        </description>
        <prototype>public rstring TUNNEL_TYPE()</prototype>
      </function>
      <function modelUriIndex="15" name="TUNNEL_IPV4_SRC_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This result function returns the IP version 4 address
of the innermost source endpoint within the tunnel.
        </description>
        <prototype>public uint32 TUNNEL_IPV4_SRC_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="15" name="TUNNEL_IPV4_DST_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>
          This result function returns the IP version 4 address
of the innermost destination endpoint within the tunnel.
        </description>
        <prototype>public uint32 TUNNEL_IPV4_DST_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="15" name="TUNNEL_IPV6_SRC_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This result function returns the IP version 6 address
of the innermost source endpoint within the tunnel.
        </description>
        <prototype>public list&lt;uint8&gt;[16] TUNNEL_IPV6_SRC_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="15" name="TUNNEL_IPV6_DST_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>
          This result function returns the IP version 6 address
of the innermost destination endpoint within the tunnel.
        </description>
        <prototype>public list&lt;uint8&gt;[16] TUNNEL_IPV6_DST_ADDRESS()</prototype>
      </function>
    </namespace>
    <namespace name="com.ibm.streamsx.network.source">
      <primitiveOp language="Cpp" modelUriIndex="18" name="PacketFileSource" public="true">
        <description>

PacketFileSource is an operator for the IBM InfoSphere Streams product that
reads prerecorded network packets from 'packet capture (PCAP)' files, parses
the network headers, and emits tuples containing packet data.  
The operator may be configured with one or more output ports,
and each port may be configured to emit different tuples,
as specified by output filters.
The tuples may contain the entire packet, the
payload portion of the packet, or individual fields from the network headers, as
specified by output attribute assignments.  

The PacketFileSource operator expects PCAP files to contain complete ethernet
packets, starting with the ethernet header, including all protocol-specific
headers and the packet payload.  

The PacketFileSource operator 
selects packets to process with input filters,
parses individual fields in the packet's network headers, 
selects messages to emit as output tuples with output filter expressions,
and assigns values to them with output attribute assignment expressions.

Input filters are PCAP filter expressions, as described here:

* [http://www.tcpdump.org/manpages/pcap-filter.7.html]
* [http://linux.die.net/man/7/pcap-filter]

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the PacketFileSource operator: 

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|network header parser result functions]

The PacketFileSource operator steps quietly over 'jmirror' headers prepended to packets
by Juniper Networks 'mirror encapsulation'.

Files containing complete ethernet packets can be created in PCAP format by a
variety of network diagnostic tools, such as the Linux `tcpdump` command and the
Wireshark open-source tools.

The PacketFileSource operator is part of the network toolkit. To use it in an
application, include this statement in the SPL source file:

    use com.ibm.streamsx.network.source::*;

# Dependencies

The PacketFileSource operator depends upon the Linux 'packet capture library
(libpcap)'.  The library must be installed on the machine where this operator
executes. It is available as an installable 'repository package (RPM)' from the
'base' RHEL and CentOS repositories.  It can be installed with administrator
tools such as 'yum'.  This requires root privileges, which can be acquired
temporarily with administrator tools such as 'sudo'.

To install `libpcap`, enter this command at a Linux command prompt:

    sudo yum install libpcap-devel

Alternatively, you can download the source code for a newer version of `libpcap`
and build the library yourself. The new library can then be installed in system
directories, or used where built without being installed.

To do this, download the distribution package for the latest version of
`libpcap` from this address:

* [http://www.tcpdump.org/]

To build `libpcap` from source code, open a 'terminal' window and type this at a
command prompt:

    cd .../directory
    tar -xvf .../libpcap-X.Y.Z.tar.gz
    cd .../directory/libpcap-X.Y.Z
    ./configure
    make

To instruct the Streams compiler (that is, the 'sc' command) to use your version
of `libpcap` instead of the system version, set these environment variables
before compiling an application that contains the PacketLiveSource operator:

    export STREAMS_ADAPTERS_LIBPCAP_INCLUDEPATH=.../directory/libpcap-X.Y.Z
    export STREAMS_ADAPTERS_LIBPCAP_LIBPATH=.../directory/libpcap-X.Y.Z

For more information on configuring, building, and installing `libpcap`, refer
to its 'INSTALL.txt' file.

This operator has been tested with these versions of `libpcap`:

* libpcap 0.9.4, included in RHEL/CentOS 5.x
* libpcap 0.9.8, included in SLES 11
* libpcap 1.0.0, included in RHEL/CentOS 6.2
* libpcap 1.4.0, included in RHEL/CentOS 6.5
* libpcap 1.5.3, included in RHEL/CentOS 7.1
* libpcap 1.6.1
* libpcap 1.6.2
* libpcap 1.7.4

# Threads 

The PacketFileOperator contains a separate thread for reporting its metrics to
the Streams runtime if the `metricsInterval` parameter is greater than zero.

When the PacketFileSource operator is configured without an input port, it
contains another thread which reads the PCAP file specified by the
`pcapFilename` operator.  When the operator reaches end-of-file, it terminates
the thread and terminates the operator.

# Exceptions 

The PacketFileSource operator will throw an exception and terminate in these situations:

* The `pcapFilename` parameter does not specify a valid PCAP recording.

* An input tuple's first parameter is not of type `rstring`, or does not specify a valid PCAP recording.

* The `inputFilter` and `outputFilters` parameters do not specify a valid PCAP filter expression.

# Sample Applications

The network toolkit includes several
[./tk$SamplePacketFileSource/tk$SamplePacketFileSource.html|sample applications]
that illustrate how to use this operator.

# References

The ethernet frame format is described here:

* [http://en.wikipedia.org/wiki/Ethernet_frame]

The ethernet header and the fields it contains are described here:

* [http://linux.die.net/include/net/ethernet.h]
* [http://linux.die.net/include/linux/if_ether.h]

The IPv4 header and the fields it contains are described here:

* [http://en.wikipedia.org/wiki/IPv4]
* [http://www.ietf.org/rfc/rfc791.txt]
* [http://linux.die.net/include/netinet/in.h]
* [http://linux.die.net/include/netinet/ip.h]

The IPv6 header and the fields it contains are described here:

* [https://en.wikipedia.org/wiki/IPv6_packet]
* [https://tools.ietf.org/html/rfc2460]
* [http://linux.die.net/include/netinet/ip6.h]

The UDP header and the fields it contains are described here:

* [http://en.wikipedia.org/wiki/User_Datagram_Protocol]
* [http://tools.ietf.org/html/rfc768]
* [http://linux.die.net/include/netinet/udp.h]

The TCP header and the fields it contains are described here:

* [http://en.wikipedia.org/wiki/Transmission_Control_Protocol]
* [http://tools.ietf.org/html/rfc793]
* [http://linux.die.net/include/netinet/tcp.h]

The 'jmirror' header is described here:

* [http://wiki.wireshark.org/jmirror]

The Linux `tcpdump` command is described here:

* [http://www.tcpdump.org/]
* [http://linux.die.net/man/8/tcpdump]

The Wireshark tools are described here:

* [http://www.wireshark.org/]

`libpcap` filter expressions, 
which are used with the `inputFilter` parameter, are described here:

* [http://www.tcpdump.org/manpages/pcap-filter.7.html]
* [http://linux.die.net/man/7/pcap-filter]

The result functions that can be used in boolean
expressions for the `outputFilters` parameter
and in output attribute assignment expressions are described here:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|network header parser result functions].  

      </description>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Expression" name="pcapFilename" optional="true" type="rstring">
          <description>

This parameter takes an expression of type `rstring` that specifies the pathname
of a single input PCAP file for the operator to read. 

If the operator is
configured without an inport port, this parameter is required; if the operator
has an input port, this parameter is not allowed.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="inputFilter" optional="true" type="rstring">
          <description>

This optional parameter takes an expression of type `rstring` that specifies
which input packets should be processed. The value of this string must be a
valid PCAP filter expression, as defined here:

* [http://www.tcpdump.org/manpages/pcap-filter.7.html]
* [http://linux.die.net/man/7/pcap-filter]

The default value is an empty string, which
causes all packets read from the PCAP file to be processed.

        </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="outputFilters" optional="true" type="boolean">
          <description>

This optional parameter takes a list of SPL expressions that specify which packets
should be emitted by the corresponding output port. The number of
expressions in the list must match the number of output ports, and each
expression must evaluate to a `boolean` value.  The output filter expressions may include any
of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|PacketFileSource result functions].  

The default value of the `outputFilters` parameter is an empty list, which
causes all packets processed to be emitted by all output ports.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="initDelay" optional="true" type="float64">
          <description>

This optional parameter takes an expression of type `float64` that specifies the
number of seconds the operator will wait before it begins to produce tuples.

This parameter is allowed only when the `pcapFilename` parameter is also
specified.  

The default value is '0.0'.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="processorAffinity" optional="true" type="uint32">
          <description>

This optional parameter takes an expression of type `uint32` that specifies
which processor core the operator's thread will run on.  The maximum value is
*P-1*, where *P* is the number of processors on the machine where the operator
will run.
      
Where the operator runs on a thread of its own, this parameter applies to the
operator's thread.  This is the situation when the operator does not have an
input port (and the `pcapFilename` parameter is specified). This is also the
case when the operator has an input port, and it is configured as a threaded
input port, and when the operator has an @parallel annotation.
     
Where the operator runs on the thread of an upstream operator, this parameter
affects the thread of the operator that sends tuples to it. This is the
situation when the operator has an input port, and is fused with its upstream
operator.
      
The default is to dispatch the operator's thread on any available processor.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="metricsInterval" optional="true" type="float64">
          <description>

This optional parameter takes an expression of type `float64` that specifies the
interval, in seconds, for sending operator metrics to the Streams runtime. If
the value is zero or less, the operator will not report metrics to the runtime,
and the output assigment functions for `libpcap` statistics will be zero.
      
The default value is '10.0'.

        </description>
        </parameter>
        <inputPort maxNumPorts="1" minNumPorts="1" optional="true" windowPunctInputMode="Oblivious">
          <description>

The PacketFileSource operator has one optional input port.

When the PacketFileSource operator is configured with an input port, the first
attribute must be of type `rstring`, and specifies the pathname of an input PCAP
file for the operator to read.

When the PacketFileSource operator is configured without an input port, the `pcapFilename`
parameter specifies the pathname of a single input PCAP file for the operator to
read.

The packets in a PCAP file may optionally be filtered as they are 
read from the file with
the `inputFilter` parameter.
The tuples produced by the operator may optionally be filtered
with the `outputFilter` parameter.

        </description>
          <windowPolicy>NonWindowed</windowPolicy>
        </inputPort>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Generating">
          <description>

The PacketFileSource operator requires one or more output ports:

Each output port will produce one output tuple for each packet read from 
the PCAP file (and passed by the input filter, if the `inputFilter` parameter is specified)
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified. 

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the 
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|PacketFileSource result functions].  
Output attributes that match input attributes in name and
type are copied automatically.

The PacketFileSource operator emits a punctuation marker on each output port
when it reaches the end of each input file.

        </description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="19" name="PacketDPDKSource" public="true">
        <description>

PacketDPDKSource is an operator for the IBM InfoSphere Streams product that
captures live network packets from one of the network interfaces attached to the
machine where it executes. The operator function and structure are very
similar to PacketLiveSource; see that operator's documentation for details
of common functions and general background.  The primary difference between
these related operators is that PacketDPDKSource leverages the DPDK libraries
available at [http://www.dpdk.org] for higher performance and lower processing
overhead.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the PacketFileSource operator:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|network header parser result functions]

The PacketDPDKSource operator steps quietly over 'jmirror' headers prepended to packets
by Juniper Networks 'mirror encapsulation'.

This operator is part of the network toolkit. To use it in an
application, include this statement in the SPL source file:

    use com.ibm.streamsx.network.source::*;

# Promiscuous Mode

Network interfaces normally ignore packets that are not addressed to them.
However, when 'promiscious' mode is enabled on a network interface, it can
capture all network packets on its ethernet segment, even those that are not
addressed to it.  This is sometimes referred to as "network sniffing".  Modern
ethernet switches normally send network interfaces only packets that are
addressed to them; 'promiscious' mode is useful only when a switch has been
specifically configured to send packets to a network interface that are not
addressed to it. This is sometimes referred to as "mirroring".

The PacketDPDKSource operator will enable 'promiscuous' mode in a ethernet
interface when its 'promiscous' parameter is set to `true`.

# Dependencies

The PacketDPDKSource operator depends upon the DPDK libraries available from
[http://dpdk.org]. The library must be installed on the machine where this
operator is built.   It has been tested with the following versions:
* DPDK 2.0
* DPDK 2.1
* DPDK 2.2

The base DPDK library supports a wide range of NICs as described at
[http://dpdk.org].  For IBM Streams, we have tested the following:
* Mellanox CX-3
* Mellanox CX-3 Pro
* Intel e1000

There are very good documents for DPDK build/install/use that should be
referenced.  Here are some notes of the steps that will help getting started
on Streams:

* Download and untar the dpdk.tgz file from [http://dpdk.org].

* Set environment variables (these are needed for DPDK and Streams builds and depend on 
  your specific platform):

    export EXTRA_CFLAGS=-fPIC
    export RTE_SDK=/home/userid/dpdk-2.0.0 (point to install directory)

    export RTE_TARGET=x86_64-native-linuxapp-gcc
       OR
    export RTE_TARGET=ppc_64-default-linuxapp-gcc

* Configure the DPDK build from the top directory

    make config T=x86_64-native-linuxapp-gcc
       OR
    make config T=ppc_64-power8-linuxapp-gcc

* Change configuration as needed.  For example:

    # Edit the .config files
    vi ./build/.config

    # Set key parameters
    COMBINE_LIBS=y
    LIBRTE_MLX4_PMD=y (MLX4 NIC)
    CONFIG_RTE_BUILD_SHARED_LIB=y (e1000 NIC)
       OR
    CONFIG_RTE_BUILD_SHARED_LIB=n (MLX4 NIC)

    # Build the library
    make

    # Complete the build
    make install T=x86_64-native-linuxapp-gcc
       OR
    make install T=ppc_64-power8-linuxapp-gcc

    # Move the resulting library to your Streams application build location
    cp build/lib/libdpdk.a /toolkit-directory/com.ibm.streamsx.network/impl/lib/source/

* There is also a Streams to DPDK glue library that must be built.  To
  do this, make sure the RTE environment variables noted above are set and then
  do the following:

    cd /toolkit-directory/com.ibm.streamsx.network/impl/src/source/dpdk
    make
    cp streams_source.h /toolkit-directory/com.ibm.streamsx.network/impl/lib/include/source/
    cp build/lib/libstreams_source.a /toolkit-directory/com.ibm.streamsx.network/impl/lib/source/

* Build the Streams example application with the following steps:

    cd /toolkit-directory/streamsx.network/samples/SamplePacketDPDKSource

    # Update any libraries that need to be linked based on the examples
    vi Makefile (Primary change is to pick the right libraries)

    # Modify the operator parameters as needed for your NIC and environment
    vi TestPacketDPDKSource.splmm
    make

* Create a dpdk group for permisssions.  Note that udev rules would be a
  better approach -- documentation is being worked.

    groupadd dpdk
    usermod -G userid,dpdk userid
    groups userid

* Configure and enable acces to key system resources. General items (run as root typically):

    mkdir -p /mnt/huge
    mount -t hugetlbfs nodev /mnt/huge
    echo 1000 &gt; /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages

    chown root:dpdk /dev/hugepages
    chmod 775 /dev/hugepages
    chown root:dpdk /mnt/huge/
    chmod 775 /mnt/huge/

* Example additional items for e1000 (RHEL 7.1):

    ifconfig eth1 down
    modprobe uio
    insmod /dpdk-path/dpdk-2.1.0/build/kmod/igb_uio.ko
    /dpdk-path/dpdk-2.1.0/tools/dpdk_nic_bind.py --bind=igb_uio eth-interface
    /dpdk-path/dpdk-2.1.0/tools/dpdk_nic_bind.py --status
    chown root:dpdk /dev/uio0
    chmod 660 /dev/uio0
    chown root:dpdk /sys/class/uio/uio0/device/config
    cdmod 660 /sys/class/uio/uio0/device/config
    chown root:dpdk /sys/class/uio/uio0/device/resource*
    chmod 660 /sys/class/uio/uio0/device/resource*


* Example additional items for Mellanox (RHEL 7.1).  This assumes the OFED packages
  have been installed.

    # Configure IB module. Add the line:
    # "options ib_uverbs disable_raw_qp_enforcement=1"
    vi /etc/modprobe.d/mlnx.conf,

    modprobe mlx4_en
    /etc/init.d/openibd restart
    # "ibstat" and "/etc/init.d/openibd status" are useful commands.

* Running the Streams application
    Normal submit : streamtool submitjob output/TestPacketDPDKSource.sab
    Packet output can be found in the "data" directory.

    </description>
        <parameter cardinality="-1" expressionMode="Expression" name="coreMask" optional="false" type="rstring">
          <description> 

Hex bit mask listing the cores used for DPDK polling loops.
The low order bit corresponds to the master lcore and all
other bits indicate cores that will be assigned to
ports/queues.

Note that only the first instance of the PacketDPDKSource
must set this parm.  All others are ignored.

	</description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="promiscuous" optional="true" type="boolean">
          <description> 

This optional parameter takes an expression of type 'boolean'
that specifies whether or not 'promiscuous' mode should be enabled on the
network interface.

      </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="lcore" optional="false" type="int32">
          <description>

Logical core number on which this operator will run.

      </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="nicPort" optional="false" type="int32">
          <description>

NIC port of type uint32 which sources packets for this
operator instance.  Obtaining the proper mapping may require
use of multiple tools, and varies by NIC.  

Suggested tools to help identify NIC ports:

   \- ifconfig

   \- dpdk-\*/tools/dpdk_nic_bind.py --status

   \- ibstat (for Mellanox NICs)

   \- lspci | grep -i net

      </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="nicQueue" optional="false" type="int32">
          <description>

NIC queue of type uint32 which sources packets for this operator instance.  Use of this parameter 
is not yet implemented in the PacketDPDKSource operator but is included for future enhancements.

      </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="metricsInterval" optional="true" type="float64">
          <description>
     

This optional parameter takes an expression of type
`float64` that specifies the interval, in seconds, for sending operator
metrics to the Streams runtime. If the value is zero or less, the operator
will not report metrics to the runtime, and the output assigment functions
for `libpcap` statistics will be zero.

The default value is '10.0'.

      </description>
        </parameter>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Generating">
          <description>

The PacketDPDKSource operator requires one or more output ports:

Each output port will produce one output tuple for each packet received
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified.

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|PacketDPDKSource result functions].
Output attributes that match input attributes in name and
type are copied automatically.

	</description>
        </outputPort>
      </primitiveOp>
      <primitiveOp language="Cpp" modelUriIndex="20" name="PacketLiveSource" public="true">
        <description>

PacketLiveSource is an operator for the IBM InfoSphere Streams product that
captures live network packets from an ethernet interface,
parses their network headers, and emits
tuples containing packet data. 
The operator may be configured with one or more output ports,
and each port may be configured to emit different tuples,
as specified by output filters.
The tuples may contain the entire packet, the
payload portion of the packet, or individual fields from the network headers, as
specified by output attribute assignments.  

The PacketLiveSource operator 
reads raw network packets from an ethernet adapter,
selects packets to process with input filters,
parses individual fields in the packet's network headers, 
selects messages to emit as output tuples with output filter expressions,
and assigns values to them with output attribute assignment expressions.

Input filters are PCAP filter expressions, as described here:

* [http://www.tcpdump.org/manpages/pcap-filter.7.html]
* [http://linux.die.net/man/7/pcap-filter]

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the PacketFileSource operator: 

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|network header parser result functions]

The PacketLiveSource operator steps quietly over 'jmirror' headers prepended to packets
by Juniper Networks 'mirror encapsulation'.

The PacketLiveSource operator is part of the network toolkit. To use it in an
application, include this statement in the SPL source file:

    use com.ibm.streamsx.network.source::*;

# Capabilities

The PacketLiveSource operator requires these Linux capabilities to receive
'raw' network packets from an ethernet interface:

* CAP_NET_RAW+eip
* CAP_NET_ADMIN+eip

Linux capabilities can only be granted to an executable that resides on a local
disk volume such as /tmp.

For 'standalone' Streams applications (that is, SPL source files compiled with a
'standalone' configuration), the user must grant these capabilities to the
program before executing it. This requires 'root' privileges. To do this:

* the SPL source must be compiled with the '--static-link' option

* the 'application bundle' must be unpacked with the 'spl-app-info' command into a directory on a local disk volume such as /tmp

* Linux capabilities must be granted to the unbundled program with this command:
 
    sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /tmp/.../bin/standalone.exe

For 'distributed' Streams applications, (that is, SPL source files compiled with
a 'distributed' configuration), the Streams runtime must grant these capabilities to
the program before executing it. This requires 'root' privileges.  To do this:

* the Streams runtime must be installed as 'root'

* the Streams domain must be registered as a Linux system service

* the Streams instance must have the 'instance.canSetPeOSCapabilities=true' property

* the Streams instance must have the 'instance.runAsUser=$USER' property

* the Streams instance must have the 'instance.applicationBundlesPath=/tmp/...' property

* the SPL source must be compiled with the '--static-link' option

The sample applications included in the toolkit have scripts that illustrate all
of the steps needed to build and run applications containing the
PacketLiveSource operator in both 'standalone' and 'distributed' mode.

# Promiscuous Mode

Network interfaces normally ignore packets that are not addressed to them.
However, when 'promiscious' mode is enabled on a network interface, it can
capture all network packets on its ethernet segment, even those that are not
addressed to it.  This is sometimes referred to as "network sniffing".  Modern
ethernet switches normally send network interfaces only packets that are
addressed to them; 'promiscious' mode is useful only when a switch has been
specifically configured to send packets to a network interface that are not
addressed to it. This is sometimes referred to as "mirroring".

The PacketLiveSource operator will enable 'promiscuous' mode in a ethernet
interface when its 'promiscous' parameter is set to `true`.

# Dependencies

The PacketLiveSource operator depends upon the Linux 'packet capture library
(libpcap)'.  The library must be installed on the machine where this operator
executes. It is available as an installable 'repository package (RPM)' from the
'base' RHEL and CentOS repositories.  It can be installed with administrator
tools such as 'yum'.  This requires root privileges, which can be acquired
temporarily with administrator tools such as 'sudo'.

To install `libpcap`, enter this command at a Linux command prompt:

    sudo yum install libpcap-devel

Alternatively, you can download the source code for a newer version of `libpcap`
and build the library yourself. The new library can then be installed in system
directories, or used where built without being installed.

To do this, download the distribution package for the latest version of
`libpcap` from this address:

* [http://www.tcpdump.org/]

To build libpcap from source code, open a 'terminal' window and type this at a
command prompt:

    cd .../directory
    tar -xvf .../libpcap-X.Y.Z.tar.gz
    cd .../directory/libpcap-X.Y.Z
    ./configure
    make

To instruct the Streams compiler (that is, the 'sc' command) to use your version
of `libpcap` instead of the system version, set these environment variables
before compiling an application that contains the PacketLiveSource operator:

    export STREAMS_ADAPTERS_LIBPCAP_INCLUDEPATH=.../directory/libpcap-X.Y.Z
    export STREAMS_ADAPTERS_LIBPCAP_LIBPATH=.../directory/libpcap-X.Y.Z

For more information on configuring, building, and installing `libpcap`, refer
to its 'INSTALL.txt' file.

This operator has been tested with these versions of `libpcap`:

* libpcap 0.9.4, included in RHEL/CentOS 5.x
* libpcap 0.9.8, included in SLES 11
* libpcap 1.0.0, included in RHEL/CentOS 6.2
* libpcap 1.4.0, included in RHEL/CentOS 6.5
* libpcap 1.5.3, included in RHEL/CentOS 7.1
* libpcap 1.6.1
* libpcap 1.6.2
* libpcap 1.7.4

# Tuning

The PacketLiveSource operator is often used in applications that ingest packets
at very high rates.  In these situations, the rate may be limited by the size of
the Linux network buffers.  If so, you can increase the size of these buffers by
setting Linux network configuration parameters.  Note that root privileges are
required to do this.

You can display the current values of the ethernet and IP configuration
parameters by entering these commands at a Linux prompt:

    /sbin/sysctl net.core
    /sbin/sysctl net.ipv4

For example, these are typical default values for Linux configuration parameters
in RHEL/CentOS 5 and 6:

    net.core.wmem_default = 124928
    net.core.rmem_default = 124928
    net.core.rmem_max = 131071
    net.core.wmem_max = 131071
    net.core.netdev_max_backlog = 1000

    net.ipv4.tcp_rmem = 4096        87380   4194304
    net.ipv4.tcp_wmem = 4096        16384   4194304
    net.ipv4.tcp_window_scaling=1

You can change the current values of Linux configuration parameters by executing
these commands at a Linux prompt.  For example:

    # allow packet buffers to increase up to 64MB
    sudo /sbin/sysctl -w net.core.rmem_max=67108864
    sudo /sbin/sysctl -w net.core.wmem_max=67108864

    # increase the length of the processor input queue to 50,000
    sudo /sbin/sysctl -w net.core.netdev_max_backlog=50000

    # increase autotuning TCP buffer limit to 32MB
    sudo /sbin/sysctl -w net.ipv4.tcp_rmem=10240 87380 33554432
    sudo /sbin/sysctl -w net.ipv4.tcp_wmem=10240 87380 33554432

Changes to Linux configuration parameters with `/sbin/sysctl` persist only for the
current instance of Linux; they will revert to their default values when Linux
is rebooted. To change the default values used when Linux boots, specify them in
the Linux system file `/etc/sysctl.cfg`.

For more information, refer to [http://fasterdata.es.net/host-tuning/linux/].

# Threads

The PacketLiveSource operator contains a separate thread for running `libpcap`,
which receives network packets from the operating system and produces tuples
from them.

The PacketLiveOperator contains a separate thread for reporting its metrics to
the Streams runtime if the `metricsInterval` parameter is greater than zero.

# Exceptions

The PacketLiveSource operator will throw an exception and terminate in these
situations:

* The parameter 'networkInterface' does not specify a network interface defined on the machine where the operator executes.

* The 'inputFilter' and 'outputFilters' parameters do not specify a valid PCAP filter expression.

# Sample Applications

The network toolkit includes several
[./tk$SamplePacketLiveSource/tk$SamplePacketLiveSource.html|sample applications]
that illustrate how to use this operator.

# References

The ethernet frame format is described here:

* [http://en.wikipedia.org/wiki/Ethernet_frame]

The ethernet header and the fields it contains are described here:

* [http://linux.die.net/include/net/ethernet.h]
* [http://linux.die.net/include/linux/if_ether.h]

The IPv4 header and the fields it contains are described here:

* [http://en.wikipedia.org/wiki/IPv4]
* [http://www.ietf.org/rfc/rfc791.txt]
* [http://linux.die.net/include/netinet/in.h]
* [http://linux.die.net/include/netinet/ip.h]

The IPv6 header and the fields it contains are described here:

* [https://en.wikipedia.org/wiki/IPv6_packet]
* [https://tools.ietf.org/html/rfc2460]
* [http://linux.die.net/include/netinet/ip6.h]

The UDP header and the fields it contains are described here:

* [http://en.wikipedia.org/wiki/User_Datagram_Protocol]
* [http://tools.ietf.org/html/rfc768]
* [http://linux.die.net/include/netinet/udp.h]

The TCP header and the fields it contains are described here:

* [http://en.wikipedia.org/wiki/Transmission_Control_Protocol]
* [http://tools.ietf.org/html/rfc793]
* [http://linux.die.net/include/netinet/tcp.h]

The 'jmirror' header is described here:

* [http://wiki.wireshark.org/jmirror]

Linux capabilities are described here:

* [http://linux.die.net/man/7/capabilities]

For more information about using Linux capabilities with Streams applications,
see:

* [http://www-01.ibm.com/support/knowledgecenter/SSCRJU_4.0.1/com.ibm.streams.install.doc/doc/ibminfospherestreams-install-programs-packages.html?lang=en]
* [http://www-01.ibm.com/support/knowledgecenter/SSCRJU_4.0.1/com.ibm.streams.cfg.doc/doc/creating-enterprise-domain.html?lang=en]
* [http://www-01.ibm.com/support/knowledgecenter/SSCRJU_4.0.1/com.ibm.streams.cfg.doc/doc/ibminfospherestreams-user-security-run-authority.html?lang=en]

`libpcap` filter expressions, 
which are used with the `inputFilter` parameter, are described here:

* [http://www.tcpdump.org/manpages/pcap-filter.7.html]
* [http://linux.die.net/man/7/pcap-filter]

The result functions that can be used in boolean
expressions for the `outputFilters` parameter
and in output attribute assignment expressions are described here:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|network header parser result functions].  

      </description>
        <customLiterals name="TimestampType">
          <value name="host"/>
          <value name="adapter"/>
          <value name="adapter_unsynced"/>
        </customLiterals>
        <parametersDescription/>
        <parameter cardinality="1" expressionMode="Expression" name="networkInterface" optional="false" type="rstring">
          <description>

This required parameter takes an expression of type
`rstring` that specifies which network interface the operator will capture
packets from.  The value must be one of the network interface names
configured in Linux on the machine where the operator will execute.  To
display a list of configured network interface names, type this at a Linux
command prompt:

    /sbin/ifconfig

    </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="maximumLength" optional="true" type="uint16">
          <description>

This optional parameter takes an expression of type `uint16`
that specifies the maximum length in bytes of the packet data that will be
produced by the operator.  This length includes all network headers;
packets longer than the specified length will be truncated.

The default value is 65,535 bytes.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="inputFilter" optional="true" type="rstring">
          <description>

This optional parameter takes an expression of type `rstring`
that specifies which input packets should be processed. The value of this
string must be a valid PCAP filter expression, as defined here:

* [http://www.tcpdump.org/manpages/pcap-filter.7.html]
* [http://linux.die.net/man/7/pcap-filter]

The default value is an empty string, which
causes all packets received to be processed.

        </description>
        </parameter>
        <parameter cardinality="-1" expressionMode="Expression" name="outputFilters" optional="true" type="boolean">
          <description>

This optional parameter takes a list of SPL expressions that specify which packets
should be emitted by the corresponding output port. The number of
expressions in the list must match the number of output ports, and each
expression must evaluate to a `boolean` value.  The output filter expressions may include any
of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|PacketLiveSource result functions].  

The default value of the `outputFilters` parameter is an empty list, which
causes all packets processed to be emitted by all output ports.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="promiscuous" optional="true" type="boolean">
          <description>


This optional parameter takes an expression of type `boolean`
that specifies whether or not 'promiscuous' mode should be enabled on the
network interface.
If 'promiscious' mode is enabled, the
operator must execute with special Linux capabilities, as described above.

The default value is `false`.  However,
some values of the `inputFilter` parameter, including the default value,
require that 'promiscuous' mode be enabled on the network interface, even
if the `promiscous` parameter is not specified, or set to `false`.

    </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="initDelay" optional="true" type="float64">
          <description>

This optional parameter takes an expression of type `float64`
that specifies the number of seconds the operator will wait before it
begins to produce tuples.  This parameter is allowed only when the
`pcapFilename` parameter is also specified.

The default value is '0.0'.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="bufferSize" optional="true" type="uint32">
          <description>

This optional parameter takes an expression of type `uint32`
that specifies the size, in bytes, of the `libpcap` buffer used for
receiving packets.  The maximum value allowed is 2,147,483,647 (that is,
2\*\*31-1).

The default value of the `bufferSize` parameter is determined by `libpcap`.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="processorAffinity" optional="true" type="uint32">
          <description>

This optional parameter takes an expression of type
`uint32` that specifies which processor core the operator's thread will
run on.  The maximum value is *P-1*, where *P* is the number of processors
on the machine where the operator will run.  If this parameter is
specified, then the operator's thread will be dispatched only on the
specified processor.  

The default is to dispatch the operator's thread on any available processor.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="timeout" optional="true" type="float64">
          <description>

This optional parameter takes an expression of type `float64` that
specifies a timeout for the `libpcap` interface.  If this value is
specified, the operator will call the `libpcap` interface again whenever
it times out, until the PE containing the operator receives a shutdown
signal.

The default is no timeout.  This may cause the thread that runs the
`libpcap` interface to hang on shutdown until another packet is received.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="CustomLiteral" name="timestampType" optional="true" type="TimestampType">
          <description>

This optional parameter takes a value of 'host', 'adapter',
or 'adapter_unsynced', which specifies which type of timestamp will be
assigned to packets as they are received.

The default value is 'host'.

        </description>
        </parameter>
        <parameter cardinality="1" expressionMode="Expression" name="metricsInterval" optional="true" type="float64">
          <description>

This optional parameter takes an expression of type
`float64` that specifies the interval, in seconds, for sending operator
metrics to the Streams runtime. If the value is zero or less, the operator
will not report metrics to the runtime, and the output assigment functions
for `libpcap` statistics will be zero.

The default value is '10.0'.

        </description>
        </parameter>
        <outputPort expressionMode="Expression" minNumPorts="0" optional="true" windowPunctOutputMode="Generating">
          <description>

The PacketLiveSource operator requires one or more output ports:

Each output port will produce one output tuple for each packet received
(and passed by the input filter, if the `inputFilter` parameter is specified)
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified. 

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the 
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|PacketLiveSource result functions].  
Output attributes that match input attributes in name and
type are copied automatically.

        </description>
        </outputPort>
      </primitiveOp>
      <function modelUriIndex="17" name="packetsReceived" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

This function returns the number of packets received from the network interface
since the operator started, as of the most recent metrics interval, if there is one, or zero if not.

            </description>
        <prototype>public uint64 packetsReceived()</prototype>
      </function>
      <function modelUriIndex="17" name="packetsDropped" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

This function returns the number of packets dropped by the network interface
since the operator started, as of the most recent metrics interval, if there is one, or zero if not.

            </description>
        <prototype>public uint64 packetsDropped()</prototype>
      </function>
      <function modelUriIndex="17" name="metricsIntervalPacketsReceived" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

This function returns the number of packets received from the network interface 
during the most recent metrics interval, if there is one, or zero if not.

            </description>
        <prototype>public uint64 metricsIntervalPacketsReceived()</prototype>
      </function>
      <function modelUriIndex="17" name="metricsIntervalPacketsDropped" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

This function returns the number of packets dropped by the network interface
during the most recent metrics interval, if there is one, or zero if not.

            </description>
        <prototype>public uint64 metricsIntervalPacketsDropped()</prototype>
      </function>
      <function modelUriIndex="17" name="packetsProcessed" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

This function returns the number of network packets processed by the operator since it started,
including the current packet, but excluding any packets that were ignored by the input filter,
if the `inputFilter` parameter was specified.

            </description>
        <prototype>public uint64 packetsProcessed()</prototype>
      </function>
      <function modelUriIndex="17" name="bytesProcessed" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

This function returns the number of bytes of network data processed by the operator since it started,
including the current packet, excluding any packets that were ignored by the input filter,
if the `inputFilter` parameter was specified.

            </description>
        <prototype>public uint64 bytesProcessed()</prototype>
      </function>
      <function modelUriIndex="17" name="metricsIntervalElapsed" native="true" public="true" returnType="float64" uriIndex="0">
        <description>

This function returns the duration of the most recent metrics interval,
in seconds with a resolution of at least microseconds,
if there is one, or zero if not. 

            </description>
        <prototype>public float64 metricsIntervalElapsed()</prototype>
      </function>
      <function modelUriIndex="17" name="metricsIntervalPacketsProcessed" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

This function returns the number of network packets processed by the operator during the most recent
metrics interval,
excluding any packets that were ignored by the input filter,
if the `inputFilter` parameter was specified.

            </description>
        <prototype>public uint64 metricsIntervalPacketsProcessed()</prototype>
      </function>
      <function modelUriIndex="17" name="metricsIntervalBytesProcessed" native="true" public="true" returnType="uint64" uriIndex="0">
        <description>

This function returns the number of bytes of network data processed by the operator during the most recent
metrics interval,
excluding any packets that were ignored by the input filter,
if the `inputFilter` parameter was specified.

            </description>
        <prototype>public uint64 metricsIntervalBytesProcessed()</prototype>
      </function>
      <function modelUriIndex="17" name="metricsUpdated" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` for the first tuple produced after a new metrics interval begins,
and returns `false` for all subsequent tuples produced in the same metrics interval.

            </description>
        <prototype>public boolean metricsUpdated()</prototype>
      </function>
      <function modelUriIndex="17" name="CAPTURE_SECONDS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the number of seconds since the beginning of the Unix epoch
(midnight on January 1st, 1970 in Greenwich, England) until the current packet was captured,
according to the system clock on the machine that captured it.

            </description>
        <prototype>public uint32 CAPTURE_SECONDS()</prototype>
      </function>
      <function modelUriIndex="17" name="CAPTURE_MICROSECONDS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the number of microseconds since the value of the CAPTURE_SECONDS() function
until the current packet was captured,
according to the system clock on the machine that captured it.

            </description>
        <prototype>public uint32 CAPTURE_MICROSECONDS()</prototype>
      </function>
      <function modelUriIndex="17" name="PACKET_LENGTH" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the number of bytes of network data in the current packet,
including all network headers.
Note that this value may be larger than the length of the
binary data returned by the `PACKET_DATA()` function
if the packet was truncated when it was captured.

            </description>
        <prototype>public uint32 PACKET_LENGTH()</prototype>
      </function>
      <function modelUriIndex="17" name="PACKET_DATA" native="true" public="true" returnType="blob" uriIndex="0">
        <description>

This function returns the network data in the current packet,
including all network headers.
Note that the data may have been truncated when the packet was captured.

            </description>
        <prototype>public blob PACKET_DATA()</prototype>
      </function>
      <function modelUriIndex="17" name="PAYLOAD_LENGTH" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the number of bytes of payload data in the current packet,
excluding all network headers.
Note that this value may be larger than the length of the binary data returned by
the `PAYLOAD_DATA()` function if the
packet was truncated when it was captured.

            </description>
        <prototype>public uint32 PAYLOAD_LENGTH()</prototype>
      </function>
      <function modelUriIndex="17" name="PAYLOAD_DATA" native="true" public="true" returnType="blob" uriIndex="0">
        <description>

This function returns the payload data in the current packet,
excluding all network headers.
Note that the data may have been truncated when the packet was captured.

            </description>
        <prototype>public blob PAYLOAD_DATA()</prototype>
      </function>
      <function modelUriIndex="17" name="ETHER_SRC_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>

This function returns the ethernet source address of the current packet.

            </description>
        <prototype>public list&lt;uint8&gt;[6] ETHER_SRC_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="17" name="ETHER_DST_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[6]" uriIndex="0">
        <description>

This function returns the ethernet destination address of the current packet.

            </description>
        <prototype>public list&lt;uint8&gt;[6] ETHER_DST_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="17" name="ETHER_PROTOCOL" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the ethernet protocol (that is, the EtherType) of the
current packet, for example, '2048' for IP version 4, or '34,525' for IP version 6.

            </description>
        <prototype>public uint16 ETHER_PROTOCOL()</prototype>
      </function>
      <function modelUriIndex="17" name="IP_VERSION" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>

This function returns the IP version of the current packet
('4' for IP version 4, or '6' for IP version 6), 
if the ethernet packet contains an IP packet, or zero otherwise.

            </description>
        <prototype>public uint8 IP_VERSION()</prototype>
      </function>
      <function modelUriIndex="17" name="IP_PROTOCOL" native="true" public="true" returnType="uint8" uriIndex="0">
        <description>

This function returns the IP protocol of the current packet,
for example, '6' for TCP, or '17' for UDP,
or zero if the ethernet packet does not contain an IP packet.

            </description>
        <prototype>public uint8 IP_PROTOCOL()</prototype>
      </function>
      <function modelUriIndex="17" name="IPV4_SRC_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the IP version 4 source address of the current packet,
if it has one, or zero otherwise.

            </description>
        <prototype>public uint32 IPV4_SRC_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="17" name="IPV4_DST_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the IP version 4 destination address of the current packet,
if it has one, or zero otherwise.

            </description>
        <prototype>public uint32 IPV4_DST_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="17" name="IPV6_SRC_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>

This function returns the IP version 6 source address of the current packet,
if it has one, or an empty list otherwise.

            </description>
        <prototype>public list&lt;uint8&gt;[16] IPV6_SRC_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="17" name="IPV6_DST_ADDRESS" native="true" public="true" returnType="list&lt;uint8>[16]" uriIndex="0">
        <description>

This function returns the IP version 6 destination address of the current packet,
if it has one, or an empty list otherwise.

            </description>
        <prototype>public list&lt;uint8&gt;[16] IPV6_DST_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="17" name="IP_SRC_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the TCP or UDP source port number of the current packet, 
if it has one, or zero otherwise.

            </description>
        <prototype>public uint16 IP_SRC_PORT()</prototype>
      </function>
      <function modelUriIndex="17" name="IP_DST_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the TCP or UDP destination port number of the current packet, 
if it has one, or zero otherwise.

            </description>
        <prototype>public uint16 IP_DST_PORT()</prototype>
      </function>
      <function modelUriIndex="17" name="UDP_PORT" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` if the current packet has a UDP source or destination port,
or `false` if not.

            </description>
        <prototype>public boolean UDP_PORT(uint16)</prototype>
        <parameter name="__p1" type="uint16"/>
      </function>
      <function modelUriIndex="17" name="UDP_SRC_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the UDP source port number of the current packet, 
if it has one, or zero otherwise.

            </description>
        <prototype>public uint16 UDP_SRC_PORT()</prototype>
      </function>
      <function modelUriIndex="17" name="UDP_DST_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the UDP destination port number of the current packet, 
if it has one, or zero otherwise.

            </description>
        <prototype>public uint16 UDP_DST_PORT()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_PORT" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` if the current packet has a TCP source or destination port,
or `false` if not.

            </description>
        <prototype>public boolean TCP_PORT(uint16)</prototype>
        <parameter name="__p1" type="uint16"/>
      </function>
      <function modelUriIndex="17" name="TCP_SRC_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the TCP source port number of the current packet, 
if it has one, or zero otherwise.

            </description>
        <prototype>public uint16 TCP_SRC_PORT()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_DST_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the TCP destination port number of the current packet, 
if it has one, or zero otherwise.

            </description>
        <prototype>public uint16 TCP_DST_PORT()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_SEQUENCE" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the value of the TCP sequence number in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint32 TCP_SEQUENCE()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_ACKNOWLEDGEMENT" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the value of the TCP acknowledgement number in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint32 TCP_ACKNOWLEDGEMENT()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_FLAGS_URGENT" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` if the current packet has a TCP 'urgent' flag and its set, 
or `false` otherwise.

            </description>
        <prototype>public boolean TCP_FLAGS_URGENT()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_FLAGS_ACK" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` if the current packet has a TCP 'ack' flag and its set, 
or `false` otherwise.

            </description>
        <prototype>public boolean TCP_FLAGS_ACK()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_FLAGS_PUSH" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` if the current packet has a TCP 'push' flag and its set, 
or `false` otherwise.

            </description>
        <prototype>public boolean TCP_FLAGS_PUSH()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_FLAGS_RESET" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` if the current packet has a TCP 'reset' flag and its set, 
or `false` otherwise.

            </description>
        <prototype>public boolean TCP_FLAGS_RESET()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_FLAGS_SYN" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` if the current packet has a TCP 'syn' flag and its set, 
or `false` otherwise.

            </description>
        <prototype>public boolean TCP_FLAGS_SYN()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_FLAGS_FIN" native="true" public="true" returnType="boolean" uriIndex="0">
        <description>

This function returns `true` if the current packet has a TCP 'fin' flag and its set, 
or `false` otherwise.

            </description>
        <prototype>public boolean TCP_FLAGS_FIN()</prototype>
      </function>
      <function modelUriIndex="17" name="TCP_WINDOW" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the value of the TCP window size in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint16 TCP_WINDOW()</prototype>
      </function>
      <function modelUriIndex="17" name="JMIRROR_SRC_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the value of the 'jmirror' source address in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint32 JMIRROR_SRC_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="17" name="JMIRROR_DST_ADDRESS" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the value of the 'jmirror' destination address in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint32 JMIRROR_DST_ADDRESS()</prototype>
      </function>
      <function modelUriIndex="17" name="JMIRROR_SRC_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the value of the 'jmirror' source port in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint16 JMIRROR_SRC_PORT()</prototype>
      </function>
      <function modelUriIndex="17" name="JMIRROR_DST_PORT" native="true" public="true" returnType="uint16" uriIndex="0">
        <description>

This function returns the value of the 'jmirror' dstination port in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint16 JMIRROR_DST_PORT()</prototype>
      </function>
      <function modelUriIndex="17" name="JMIRROR_INTERCEPT_ID" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the value of the 'jmirror' intercept identifier in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint32 JMIRROR_INTERCEPT_ID()</prototype>
      </function>
      <function modelUriIndex="17" name="JMIRROR_SESSION_ID" native="true" public="true" returnType="uint32" uriIndex="0">
        <description>

This function returns the value of the 'jmirror' session identifier in the current packet, 
if it has one, or zero if otherwise.

            </description>
        <prototype>public uint32 JMIRROR_SESSION_ID()</prototype>
      </function>
    </namespace>
    <sabFiles>
      <ti:include path="toolkit.xml" root="toolkitDir"/>
      <ti:include path="impl/java/lib/**" root="toolkitDir"/>
      <ti:include path="impl/java/bin/**" root="toolkitDir"/>
      <ti:include path="impl/bin/**" root="toolkitDir"/>
      <ti:include path="impl/lib/**" root="toolkitDir"/>
      <ti:include path="impl/nl/*.dat" root="toolkitDir"/>
      <ti:include path="etc/**" root="toolkitDir"/>
      <ti:include path="lib/**" root="toolkitDir"/>
      <ti:include path="nl/**" root="toolkitDir"/>
      <ti:include path="opt/**" root="toolkitDir"/>
    </sabFiles>
  </toolkit>

</toolkitModel>
