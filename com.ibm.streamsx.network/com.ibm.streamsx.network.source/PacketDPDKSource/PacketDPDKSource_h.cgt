/*********************************************************************
 * Copyright (C) 2015, 2017 International Business Machines Corporation
 * All Rights Reserved
 ********************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <sys/time.h>
#include <errno.h>
#include <string.h>
#include <set> 
#include <iomanip> 
#include <string>
#include <sstream>

#include <linux/if_ether.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/ether.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <netinet/tcp.h>

#include <netinet/ip6.h>
#include <arpa/inet.h>
#include <net/ethernet.h>

#include <sched.h>
#include "streams_source.h"

#include <streams_boost/lexical_cast.hpp>

#include <SPL/Runtime/Common/Metric.h>
#include <SPL/Runtime/Operator/OperatorMetrics.h>

#include "parse/NetworkHeaderParser.h"

#include "PacketRingBuffer.h"
#include "Instrumentation.h"

<%SPL::CodeGen::headerPrologue($model);%>

class MY_OPERATOR : public MY_BASE_OPERATOR {
    public:
        MY_OPERATOR();
        virtual ~MY_OPERATOR(); 

        // Notify port readiness
        void allPortsReady(); 

        // Notify pending shutdown
        void prepareToShutdown(); 

        // Processing for source and threaded operators   
        void process(uint32_t idx);

        // Tuple processing for mutating ports 
        void process(Tuple & tuple, uint32_t port);

        // Tuple processing for non-mutating ports
        void process(Tuple const & tuple, uint32_t port);

        // Punctuation processing
        void process(Punctuation const & punct, uint32_t port);

        // Method called out of the ring buffer callback interface as each packet
        // arrives for processing.
        void packetProcess(uint8_t *packet, uint32_t packetLen, uint64_t tscTimestamp);

        // Method called from the DPDK callback interface as each packet arrives
        void packetEnqueue(uint8_t *packet, uint32_t packetLen, uint64_t tscTimestamp);
   
    private:
  struct DNSResourceRecord {
    uint8_t name[0];
    uint16_t type;
    uint16_t classs;
    uint32_t ttl;
    uint16_t rdlength;
    uint8_t rdata[0];
  } __attribute__((packed)) ;

  struct DNSHeader {
    uint16_t identifier;
    union {
      struct {
#if __BYTE_ORDER == __LITTLE_ENDIAN
        uint8_t recursionDesiredFlag:1;
        uint8_t truncatedFlag:1;
        uint8_t authoritativeFlag:1;
        uint8_t opcodeField:4;
        uint8_t responseFlag:1;
        uint8_t responseCode:4;
        uint8_t nonauthenticatedFlag:1;
        uint8_t authenticatedFlag:1;
        uint8_t reserved:1;
        uint8_t recursionAvailableFlag:1;
#elif __BYTE_ORDER == __BIG_ENDIAN
        uint8_t responseFlag:1;
        uint8_t opcodeField:4;
        uint8_t authoritativeFlag:1;
        uint8_t truncatedFlag:1;
        uint8_t recursionDesiredFlag:1;
        uint8_t recursionAvailableFlag:1;
        uint8_t reserved:1;
        uint8_t authenticatedFlag:1;
        uint8_t nonauthenticatedFlag:1;
        uint8_t responseCode:4;
#else
# error "sorry, __BYTE_ORDER not setm check <bits/endian.h>"
#endif
      } indFlags;
      uint16_t allFlags;
    } flags;
    uint16_t questionCount;
    uint16_t answerCount;
    uint16_t nameserverCount;
    uint16_t additionalCount;
    struct DNSResourceRecord rrFields[0]; // see 'struct DNSResourceRecord'
  } __attribute__((packed)) ;

        // ----------- operator parameters (constant after constructor executes) ----------

        uint16_t lcoreMaster, lcore, nicPort, nicQueue;
        int32_t processorAffinity;
        std::string buffersizes;
        double metricsInterval;
        bool jMirrorCheck;

        // ----------- output tuples ----------

        <% for (my $i=0; $i<$model->getNumberOfOutputPorts(); $i++) { print "OPort$i\Type outTuple$i;"; } %> ;
      
        // ----------- operator state variables ----------
        pthread_t dpdkThreadID;
        pthread_t metricsThreadID;

        uint32_t captureSeconds, captureMicroseconds;
        uint64_t tscHz, tscMicrosecondAdjust, tscMicroseconds;

        // Variables related to metrics capture.
        uint64_t packetCounter;
        uint64_t byteCounter;
        uint64_t packetCounterNow, packetCounterThen;
        uint64_t byteCounterNow, byteCounterThen;
        struct port_stats statsNow, statsThen;
        double now, then;
        bool metricsUpdate;
        bool realMetricsUpdate;
        uint64_t packetDropSW, packetDropSWNow, packetDropSWThen;
        uint64_t maxQueueDepthSW, maxQueueDepthSWNow, maxQueueDepthSWThen;

        double    rateLimit;
        uint64_t  rateLimitLastTime;
        uint64_t  rateLimitPeriodUsec;

        uint8_t *packetPtr;
        uint32_t packetLen; 

        PacketRingBuffer pktQueue;

        // Counters and stats used by the queue production side
        std::atomic<uint64_t> countDroppedQueueFull __attribute__((aligned(64)));

        // Counters and stats used by the queue consumption side
        std::atomic<uint64_t> queueHighWaterMark __attribute__((aligned(64)));
        INST_BUCKETS_DEFINE(instBuckets);

        // This method is called during the start up of the first of the 
        // operator's threads.  It calls into the DPDK libraries, where 
        // the thread spins waiting for packets to arrive.  As each packet 
        // enters the system, this thread calls back into the dpdkCallback 
        // method of this object for processing.
        void processDpdkLoop();

        // This method is called during the start up of the second of the 
        // operator's threads.  It sits in a loop pulling stats from 
        // the DPDK libraries.
        void metricsThread();

        // This method is called during the startup of the third of the
        // operator's threads.  It sits in a loop pulling packets off the
        // internal ring buffer, then parses, filters, and generates tuples
        // from that data, and submits them downstream.
        void processSubmitLoop();


	// ----------- network header parser ----------
	NetworkHeaderParser headers;
	
	// ----------- assignment functions for output attributes ----------

  inline __attribute__((always_inline))
  SPL::uint64 packetsReceived() { return statsNow.received; }

  inline __attribute__((always_inline))
  SPL::uint64 packetsDropped() { return statsNow.dropped; }

  inline __attribute__((always_inline))
  SPL::uint64 bytesReceived() { return statsNow.bytes; }

  inline __attribute__((always_inline))
  SPL::uint64 packetsProcessed() { return packetCounter; }

  inline __attribute__((always_inline))
  SPL::uint64 bytesProcessed() { return byteCounter; }

  inline __attribute__((always_inline))
  SPL::float64 metricsIntervalElapsed() { return then ? now-then : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsReceived() { return then ? statsNow.received - statsThen.received : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsDropped() { return then ? statsNow.dropped - statsThen.dropped : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalBytesReceived() { return then ? statsNow.bytes - statsThen.bytes : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsProcessed() { return then ? packetCounterNow - packetCounterThen : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalBytesProcessed() { return then ? byteCounterNow - byteCounterThen : 0; }

  inline __attribute__((always_inline))
  SPL::boolean metricsUpdated() { return then && metricsUpdate; }

  inline __attribute__((always_inline))
  SPL::uint64 packetsDroppedSW() { return packetDropSWNow; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsDroppedSW() { return then ? packetDropSWNow - packetDropSWThen : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalMaxQueueDepthSW() { return maxQueueDepthSWNow; }

  inline __attribute__((always_inline))
	SPL::uint32 CAPTURE_SECONDS() { return captureSeconds; }

  inline __attribute__((always_inline))
	SPL::uint32 CAPTURE_MICROSECONDS() { return captureMicroseconds; }

  inline __attribute__((always_inline))
	SPL::uint64 CAPTURE_TSC_MICROSECONDS() { return (tscMicroseconds); }

  inline __attribute__((always_inline))
	SPL::uint32 PACKET_LENGTH() { return packetLen; }

  inline __attribute__((always_inline))
	SPL::blob PACKET_DATA() { return SPL::blob((const unsigned char*)packetPtr, packetLen); }

  inline __attribute__((always_inline))
	SPL::uint32 PAYLOAD_LENGTH() { return headers.payloadLength; }

  inline __attribute__((always_inline))
	SPL::blob PAYLOAD_DATA() { return headers.payload ? SPL::blob((const unsigned char*)headers.payload, headers.payloadLength) : SPL::blob(); }

  inline __attribute__((always_inline))
	SPL::list<SPL::uint8> ETHER_SRC_ADDRESS() { return headers.etherHeader ? SPL::list<SPL::uint8>(headers.etherHeader->h_source, headers.etherHeader->h_source+sizeof(headers.etherHeader->h_source)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
	SPL::list<SPL::uint8> ETHER_DST_ADDRESS() { return headers.etherHeader ? SPL::list<SPL::uint8>(headers.etherHeader->h_dest, headers.etherHeader->h_dest+sizeof(headers.etherHeader->h_dest)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::uint64 ETHER_DST_ADDRESS_64() { return headers.etherHeader ? (((uint64_t)headers.etherHeader->h_dest[0] << 40) | ((uint64_t)headers.etherHeader->h_dest[1] << 32) | ((uint64_t)headers.etherHeader->h_dest[2] << 24) | ((uint64_t)headers.etherHeader->h_dest[3] << 16) | ((uint64_t)headers.etherHeader->h_dest[4] << 8) | ((uint64_t)headers.etherHeader->h_dest[5] << 0)) : 0; }

  inline __attribute__((always_inline))
	SPL::uint32 ETHER_PROTOCOL() { return headers.etherHeader ? ntohs(headers.etherHeader->h_proto) : 0; }

  inline __attribute__((always_inline))
	SPL::uint8 IP_VERSION() { return headers.ipv4Header ? headers.ipv4Header->version : ( headers.ipv6Header ? headers.ipv6Header->ip6_vfc>>4 : 0 ); }

  inline __attribute__((always_inline))
	SPL::uint8 IP_PROTOCOL() { return headers.ipv4Header ? headers.ipv4Header->protocol : ( headers.ipv6Header ? headers.ipv6Header->ip6_nxt : 0 ); }

  inline __attribute__((always_inline))
    SPL::uint32 IP_IDENTIFIER() { return headers.ipv4Header ? ntohs(headers.ipv4Header->id) : ( headers.ipv6FragmentHeader ? ntohs(headers.ipv6FragmentHeader->ip6f_ident) : 0 ); }

  inline __attribute__((always_inline))
    SPL::boolean IP_DONT_FRAGMENT() { return headers.ipv4Header ? (ntohs(headers.ipv4Header->frag_off)&0x4000) : 0; }

  inline __attribute__((always_inline))
    SPL::boolean IP_MORE_FRAGMENTS() { return headers.ipv4Header ? (ntohs(headers.ipv4Header->frag_off)&0x2000) : ( headers.ipv6FragmentHeader ? (ntohs(headers.ipv6FragmentHeader->ip6f_offlg)&0x0001) : 0 ); }

  inline __attribute__((always_inline))
    SPL::uint16 IP_FRAGMENT_OFFSET() { return headers.ipv4Header ? ((ntohs(headers.ipv4Header->frag_off)&0x1FFF)*8) : ( headers.ipv6FragmentHeader ? (ntohs(headers.ipv6FragmentHeader->ip6f_offlg)&0xFFF8) : 0 ); }

  inline __attribute__((always_inline))
	SPL::uint32 IPV4_SRC_ADDRESS() { return headers.ipv4Header ? ntohl(headers.ipv4Header->saddr) : 0; }

  inline __attribute__((always_inline))
	SPL::uint32 IPV4_DST_ADDRESS() { return headers.ipv4Header ? ntohl(headers.ipv4Header->daddr) : 0; }

  inline __attribute__((always_inline))
	SPL::list<SPL::uint8> IPV6_SRC_ADDRESS() { return headers.ipv6Header ? SPL::list<SPL::uint8>(headers.ipv6Header->ip6_src.s6_addr, headers.ipv6Header->ip6_src.s6_addr+sizeof(headers.ipv6Header->ip6_src.s6_addr)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
	SPL::list<SPL::uint8> IPV6_DST_ADDRESS() { return headers.ipv6Header ? SPL::list<SPL::uint8>(headers.ipv6Header->ip6_dst.s6_addr, headers.ipv6Header->ip6_dst.s6_addr+sizeof(headers.ipv6Header->ip6_dst.s6_addr)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
	SPL::uint16 IP_SRC_PORT() { return UDP_SRC_PORT() + TCP_SRC_PORT(); }

  inline __attribute__((always_inline))
	SPL::uint16 IP_DST_PORT() { return UDP_DST_PORT() + TCP_DST_PORT(); }

  inline __attribute__((always_inline))
	SPL::uint16 UDP_SRC_PORT() { return headers.udpHeader ? ntohs(headers.udpHeader->source) : 0; }

  inline __attribute__((always_inline))
	SPL::uint16 UDP_DST_PORT() { return headers.udpHeader ? ntohs(headers.udpHeader->dest) : 0; }

  inline __attribute__((always_inline))
	SPL::uint16 TCP_SRC_PORT() { return headers.tcpHeader ? ntohs(headers.tcpHeader->source) : 0; }

  inline __attribute__((always_inline))
	SPL::uint16 TCP_DST_PORT() { return headers.tcpHeader ? ntohs(headers.tcpHeader->dest) : 0; }

  inline __attribute__((always_inline))
	SPL::uint32 TCP_SEQUENCE() { return headers.tcpHeader ? ntohl(headers.tcpHeader->seq) : 0; }

  inline __attribute__((always_inline))
	SPL::uint32 TCP_ACKNOWLEDGEMENT() { return headers.tcpHeader ? ntohl(headers.tcpHeader->ack_seq) : 0; }

  inline __attribute__((always_inline))
	SPL::boolean TCP_FLAGS_URGENT() { return headers.tcpHeader ? headers.tcpHeader->urg : false; }

  inline __attribute__((always_inline))
	SPL::boolean TCP_FLAGS_ACK() { return headers.tcpHeader ? headers.tcpHeader->ack : false; }

  inline __attribute__((always_inline))
	SPL::boolean TCP_FLAGS_PUSH() { return headers.tcpHeader ? headers.tcpHeader->psh : false; }

  inline __attribute__((always_inline))
	SPL::boolean TCP_FLAGS_RESET() { return headers.tcpHeader ? headers.tcpHeader->rst : false; }

  inline __attribute__((always_inline))
	SPL::boolean TCP_FLAGS_SYN() { return headers.tcpHeader ? headers.tcpHeader->syn : false; }

  inline __attribute__((always_inline))
	SPL::boolean TCP_FLAGS_FIN() { return headers.tcpHeader ? headers.tcpHeader->fin : false; }

  inline __attribute__((always_inline))
	SPL::uint16 TCP_WINDOW() { return headers.tcpHeader ? ntohs(headers.tcpHeader->window) : 0; }	

  inline __attribute__((always_inline))
    SPL::list<uint16> VLAN_TAGS() { return (headers.convertVlanTagsToList()); }  

  inline __attribute__((always_inline))
  SPL::boolean RATE_LIMITED() {
    // This gets the recorded time when the last packet came in which is close enough for what we need here.
    uint64_t currentTime = ((uint64)CAPTURE_SECONDS()*1000000ul)+(uint64)CAPTURE_MICROSECONDS();
    if(currentTime >= (rateLimitLastTime + rateLimitPeriodUsec)) {
        rateLimitLastTime = currentTime;
        return false;
    }
    return true;
  }

  inline __attribute__((always_inline))
	SPL::boolean DNS_RESPONSE_FLAG_HINT() { 
        if(headers.udpHeader == NULL) return false;
        if(ntohs(headers.udpHeader->source)!=53 && ntohs(headers.udpHeader->dest)!=53) return false;
        if(!headers.payload) return false; 
        if(headers.payloadLength < sizeof(struct DNSHeader)) return false; 

        struct DNSHeader* dnsHeader = (struct DNSHeader*)(headers.payload);

        return (dnsHeader->flags.indFlags.responseFlag);
    }

}; 

<%SPL::CodeGen::headerEpilogue($model);%>

