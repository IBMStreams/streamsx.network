<?xml version="1.0" encoding="UTF-8"?>
<operatorModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <cppOperatorModel>
    <context>
    <description>

PacketDPDKSource is an operator for the IBM InfoSphere Streams product that
captures live network packets from one of the network interfaces attached to the
machine where it executes. The operator function and structure are very
similar to PacketLiveSource; see that operator's documentation for details
of common functions and general background.  The primary difference between
these related operators is that PacketDPDKSource leverages the DPDK libraries
available at [http://www.dpdk.org] for higher performance and lower processing
overhead.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of these functions, which are specific to
the PacketFileSource operator:

* [./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|network header parser result functions]

The PacketDPDKSource operator steps quietly over 'jmirror' headers prepended to packets
by Juniper Networks 'mirror encapsulation'.

This operator is part of the network toolkit. To use it in an
application, include this statement in the SPL source file:

    use com.ibm.streamsx.network.source::*;

# Promiscuous Mode

Network interfaces normally ignore packets that are not addressed to them.
However, when 'promiscious' mode is enabled on a network interface, it can
capture all network packets on its ethernet segment, even those that are not
addressed to it.  This is sometimes referred to as "network sniffing".  Modern
ethernet switches normally send network interfaces only packets that are
addressed to them; 'promiscious' mode is useful only when a switch has been
specifically configured to send packets to a network interface that are not
addressed to it. This is sometimes referred to as "mirroring".

The PacketDPDKSource operator will enable 'promiscuous' mode in a ethernet
interface when its 'promiscous' parameter is set to `true`.

# Dependencies

The PacketDPDKSource operator depends upon the DPDK libraries available from
[http://dpdk.org]. The library must be installed on the machine where this
operator is built.   It has been tested with the following versions:
* DPDK 2.0
* DPDK 2.1
* DPDK 2.2

The base DPDK library supports a wide range of NICs as described at
[http://dpdk.org].  For IBM Streams, we have tested the following:
* Mellanox CX-3
* Mellanox CX-3 Pro
* Intel e1000

There are very good documents for DPDK build/install/use that should be
referenced.  Here are some notes of the steps that will help getting started
on Streams:

* Download and untar the dpdk.tgz file from [http://dpdk.org].

* Set environment variables (these are needed for DPDK and Streams builds and depend on 
  your specific platform):

    export EXTRA_CFLAGS=-fPIC
    export RTE_SDK=/home/userid/dpdk-2.0.0 (point to install directory)

    export RTE_TARGET=x86_64-native-linuxapp-gcc
       OR
    export RTE_TARGET=ppc_64-default-linuxapp-gcc

* Configure the DPDK build from the top directory

    make config T=x86_64-native-linuxapp-gcc
       OR
    make config T=ppc_64-power8-linuxapp-gcc

* Change configuration as needed.  For example:

    # Edit the .config files
    vi ./build/.config

    # Set key parameters
    CONFIG_RTE_BUILD_COMBINE_LIBS=y
    CONFIG_RTE_LIBRTE_MLX4_PMD=y (MLX4 NIC)
    CONFIG_RTE_BUILD_SHARED_LIB=y (e1000 NIC)
       OR
    CONFIG_RTE_BUILD_SHARED_LIB=n (MLX4 NIC)

    # Build the library
    make

    # Complete the build
    make install T=x86_64-native-linuxapp-gcc
       OR
    make install T=ppc_64-power8-linuxapp-gcc

    # Move the resulting library to your Streams application build location
    cp build/lib/libdpdk.a /toolkit-directory/com.ibm.streamsx.network/impl/lib/source/

* There is also a Streams to DPDK glue library that must be built.  To
  do this, make sure the RTE environment variables noted above are set and then
  do the following:

    cd /toolkit-directory/com.ibm.streamsx.network/impl/src/source/dpdk
    make
    cp streams_source.h /toolkit-directory/com.ibm.streamsx.network/impl/include/source/
    cp build/lib/libstreams_source.a /toolkit-directory/com.ibm.streamsx.network/impl/lib/source/

* Build the Streams example application with the following steps:

    cd /toolkit-directory/streamsx.network/samples/SamplePacketDPDKSource

    # Update any libraries that need to be linked based on the examples
    vi Makefile (Primary change is to pick the right libraries)

    # Modify the operator parameters as needed for your NIC and environment
    vi TestPacketDPDKSource.splmm
    make

* Create a dpdk group for permisssions.  Note that udev rules would be a
  better approach -- documentation is being worked.

    groupadd dpdk
    usermod -G userid,dpdk userid
    groups userid

* Configure and enable acces to key system resources. General items (run as root typically):

    mkdir -p /mnt/huge
    mount -t hugetlbfs nodev /mnt/huge
    echo 1000 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages

    chown root:dpdk /dev/hugepages
    chmod 775 /dev/hugepages
    chown root:dpdk /mnt/huge/
    chmod 775 /mnt/huge/

* Example additional items for e1000 (RHEL 7.1):

    ifconfig eth1 down
    modprobe uio
    insmod /dpdk-path/dpdk-2.1.0/build/kmod/igb_uio.ko
    /dpdk-path/dpdk-2.1.0/tools/dpdk_nic_bind.py --bind=igb_uio eth-interface
    /dpdk-path/dpdk-2.1.0/tools/dpdk_nic_bind.py --status
    chown root:dpdk /dev/uio0
    chmod 660 /dev/uio0
    chown root:dpdk /sys/class/uio/uio0/device/config
    cdmod 660 /sys/class/uio/uio0/device/config
    chown root:dpdk /sys/class/uio/uio0/device/resource*
    chmod 660 /sys/class/uio/uio0/device/resource*


* Example additional items for Mellanox (RHEL 7.1).  This assumes the OFED packages
  have been installed.

    # Configure IB module. Add the line:
    # "options ib_uverbs disable_raw_qp_enforcement=1"
    vi /etc/modprobe.d/mlnx.conf,

    modprobe mlx4_en
    /etc/init.d/openibd restart
    # "ibstat" and "/etc/init.d/openibd status" are useful commands.

* Running the Streams application
    Normal submit : streamtool submitjob output/TestPacketDPDKSource.sab
    Packet output can be found in the "data" directory.

    </description>

    <metrics>
       <metric>
          <name>nPacketsReceivedCurrent</name>
          <description>

This metric counts the number of packets received by the network interface,
as counted by `dpdk`

	  </description>
          <kind>Counter</kind>
       </metric>

       <metric>
          <name>nPacketsDroppedCurrent</name>
          <description>
	  
This metric counts the number of packets dropped by the network interface,
as counted by `dpdk`

	  </description>
          <kind>Counter</kind>
       </metric>

       <metric>
          <name>nPacketsProcessedCurrent</name>
          <description>
	  
This metric counts number of bytes of packet data processed by the
operator.
	  
	  </description>
          <kind>Counter</kind>
       </metric>

       <metric>
          <name>nBytesProcessedCurrent</name>
          <description>

This metric counts number of bytes of packet data processed by the
operator.

	  </description>
          <kind>Counter</kind>
       </metric>
    </metrics>

      <libraryDependencies>
	<library>
	<cmn:description>

General support functions.

	</cmn:description>
	<cmn:managedLibrary>
	<cmn:includePath>../../impl/include</cmn:includePath>
	</cmn:managedLibrary>
	</library>

	<library>
	<cmn:description>
	
streams_source interface library to dpdk.
	
	</cmn:description>
	<cmn:managedLibrary>
	<cmn:lib>streams_source</cmn:lib>
	<cmn:libPath>../../impl/lib/source</cmn:libPath>
	<cmn:includePath>../../impl/include/source</cmn:includePath>
	</cmn:managedLibrary>
	</library>

      </libraryDependencies>

      <providesSingleThreadedContext>Always</providesSingleThreadedContext>
      <allowCustomLogic>true</allowCustomLogic>
    </context>

    <parameters>
      <allowAny>false</allowAny>
    <parameter>
      <name>lcoreMaster</name>
      <description>

Logical core number to be used for the master DPDK thread.

      </description>
      <optional>true</optional>
      <rewriteAllowed>true</rewriteAllowed>
      <expressionMode>Expression</expressionMode>
      <type>int32</type>
      <cardinality>-1</cardinality>
    </parameter>

    <parameter>
      <name>lcore</name>
      <description>

Logical core number on which this operator will run.

      </description>
      <optional>false</optional>
      <rewriteAllowed>true</rewriteAllowed>
      <expressionMode>Expression</expressionMode>
      <type>int32</type>
      <cardinality>-1</cardinality>
    </parameter>

    <parameter>
      <name>nicPort</name>
      <description>

NIC port of type uint32 which sources packets for this
operator instance.  Obtaining the proper mapping may require
use of multiple tools, and varies by NIC.  

Suggested tools to help identify NIC ports:

   \- ifconfig

   \- dpdk-\*/tools/dpdk_nic_bind.py --status

   \- ibstat (for Mellanox NICs)

   \- lspci | grep -i net

      </description>
      <optional>true</optional>
      <rewriteAllowed>true</rewriteAllowed>
      <expressionMode>Expression</expressionMode>
      <type>int32</type>
      <cardinality>-1</cardinality>
    </parameter>

    <parameter>
      <name>nicQueue</name>
      <description>

NIC queue of type int32 which sources packets for this operator instance.

      </description>
      <optional>true</optional>
      <rewriteAllowed>true</rewriteAllowed>
      <expressionMode>Expression</expressionMode>
      <type>int32</type>
      <cardinality>-1</cardinality>
    </parameter>

    <parameter>
      <name>promiscuous</name>
      <description> 

This optional parameter takes an expression of type 'boolean'
that specifies whether or not 'promiscuous' mode should be enabled on the
network interface.

      </description>
      <optional>true</optional>
      <rewriteAllowed>true</rewriteAllowed>
      <expressionMode>Expression</expressionMode>
      <type>boolean</type>
      <cardinality>-1</cardinality>
    </parameter>

    <parameter>
      <name>metricsInterval</name>
      <description>
     

This optional parameter takes an expression of type
`float64` that specifies the interval, in seconds, for sending operator
metrics to the Streams runtime. If the value is zero or less, the operator
will not report metrics to the runtime, and the output assigment functions
for `libpcap` statistics will be zero.

The default value is '10.0'.

      </description>
      <optional>true</optional>
      <rewriteAllowed>true</rewriteAllowed>
      <expressionMode>Expression</expressionMode>
      <type>float64</type>
      <cardinality>1</cardinality>
    </parameter>

    </parameters>
    <inputPorts>
    </inputPorts>
    <outputPorts>
      <outputPortOpenSet>
        <description>

The PacketDPDKSource operator requires one or more output ports:

Each output port will produce one output tuple for each packet received
if the corresponding expression in the `outputFilters` parameter evaluates `true`,
or if no `outputFilters` parameter is specified.

Output attributes can be assigned values with any SPL expression that evaluates
to the proper type, and the expressions may include any of the
[./tk$com.ibm.streamsx.network/fc$com.ibm.streamsx.network.source.html|PacketDPDKSource result functions].
Output attributes that match input attributes in name and
type are copied automatically.

	</description>
        <expressionMode>Expression</expressionMode>
        <autoAssignment>false</autoAssignment>
        <completeAssignment>false</completeAssignment>
        <rewriteAllowed>true</rewriteAllowed>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
        <windowPunctuationInputPort>-1</windowPunctuationInputPort>
        <tupleMutationAllowed>false</tupleMutationAllowed>
	<allowNestedCustomOutputFunctions>true</allowNestedCustomOutputFunctions>
      </outputPortOpenSet>
    </outputPorts>
  </cppOperatorModel>
</operatorModel>
