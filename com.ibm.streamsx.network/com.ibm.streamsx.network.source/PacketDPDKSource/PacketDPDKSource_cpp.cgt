/*********************************************************************
 * Copyright (C) 2015,2017 International Business Machines Corporation
 * All Rights Reserved
 ********************************************************************/

<%
    # module for i18n messages
    require NetworkResources;

    ### Consistent region ERROR message ###

    my $crContext = $model->getContext()->getOptionalContext("ConsistentRegion");
    if($crContext) {
        my $opName = $model->getContext()->getKind() ;
        if($crContext->isStartOfRegion()) {
            SPL::CodeGen::exitln(NetworkResources::NETWORK_CONSISTENT_REGION_START_ERROR($opName));
        }
    }
%>

<%
# These fragments of Perl code get strings from the operator's declaration
# in the SPL source code for use in generating C/C++ code for the operator's 
# implementation below

unshift @INC, dirname($model->getContext()->getOperatorDirectory()) . "/../impl/bin";
require CodeGenX;

# get the name of this operator's template
my $myOperatorKind = $model->getContext()->getKind();

# get Perl objects for output ports
my @outputPortList = @{ $model->getOutputPorts() };

# Get C++ expressions for getting the values of this operator's parameters.

my $lcoreMaster = $model->getParameterByName("lcoreMaster") ? $model->getParameterByName("lcoreMaster")->getValueAt(0)->getCppExpression() : -1;
my $lcore = $model->getParameterByName("lcore") ? $model->getParameterByName("lcore")->getValueAt(0)->getCppExpression() : 0;
my $nicPort = $model->getParameterByName("nicPort") ? $model->getParameterByName("nicPort")->getValueAt(0)->getCppExpression() : 0;
my $nicQueue = $model->getParameterByName("nicQueue") ? $model->getParameterByName("nicQueue")->getValueAt(0)->getCppExpression() : 0;
my $buffersizes = $model->getParameterByName("buffersizes") ? $model->getParameterByName("buffersizes")->getValues() : 0;
my $promiscuous = $model->getParameterByName("promiscuous") ? $model->getParameterByName("promiscuous")->getValueAt(0)->getCppExpression() : 0;
my $metricsInterval = $model->getParameterByName("metricsInterval") ? $model->getParameterByName("metricsInterval")->getValueAt(0)->getCppExpression() : 10.0;

# special handling for 'buffersizes' paramter, which may include a list of expressions

my $buffersizesParameter = $model->getParameterByName("buffersizes");
my @buffersizesList;
if ($buffersizesParameter) {
    foreach my $value ( @{ $buffersizesParameter->getValues() } ) {
      push @buffersizesList, $value->getCppExpression();
    } 
}

# special handling for 'outputFilters' parameter, which may include SPL functions that reference input tuples indirectly
my $outputFilterParameter = $model->getParameterByName("outputFilters");
my @outputFilterList;
if ($outputFilterParameter) {
    foreach my $value ( @{ $outputFilterParameter->getValues() } ) {
	my $expression = $value->getCppExpression();
	push @outputFilterList, $expression;
	$value->{xml_}->{hasStreamAttributes}->[0]="true" if index($expression, "::PacketDPDKSource _result_functions::") != -1;
	$value->{xml_}->{hasStreamAttributes}->[0]="true" if index($expression, "::PacketSource_result_functions::") != -1;
    }
}

# basic safety checks
SPL::CodeGen::exit(NetworkResources::NETWORK_NO_OUTPUT_PORTS()) unless scalar(@outputPortList);
SPL::CodeGen::exit(NetworkResources::NETWORK_NOT_ENOUGH_OUTPUT_FILTERS()) if scalar(@outputFilterList) && scalar(@outputFilterList) < scalar(@outputPortList);
SPL::CodeGen::exit(NetworkResources::NETWORK_TOO_MANY_OUTPUT_FILTERS()) if scalar(@outputFilterList) && scalar(@outputFilterList) > scalar(@outputPortList);

%>

// This value is used to completely gate the code paths used for tracing.
// Without this mechanism only the final output is supressed and most
// of the pathlength remains.
#define TRACELVL 1

<%SPL::CodeGen::implementationPrologue($model);%>

// Calls to output assignment functions within expressions are generated with
// an explicit namespace matching the operator tempate name, so it must be
// equated to the operator's namespace
// #define PacketDPDKSource MY_OPERATOR

// calls to SPL functions within expressions are generated with these
// namespaces, which must be mapped to the operator's namespace so they
// will invoke the functions defined in the PacketLiveSource_h.cgt file

#define PacketSource_result_functions MY_OPERATOR

// Function called from the DPDK library as each packet arrives.
static void dpdkCallback(void *correlator, void *data, 
	                 uint32_t length, uint64_t tscTimestamp) {
    MY_OPERATOR* self = (MY_OPERATOR*)correlator;
    self->packetProcess((uint8_t *)data, length, tscTimestamp);
}

MY_OPERATOR::MY_OPERATOR() {

  SPLAPPTRC(L_TRACE, "entering <%=$myOperatorKind%> constructor", "PacketDPDKSource");

  // initialize state variables
  now = then = 0;
  packetCounter = packetCounterNow = packetCounterThen = 0;
  byteCounter = byteCounterNow = byteCounterThen = 0;
  portStatisticsNow = portStatisticsThen = (const struct port_stats){0};
  metricsUpdate = false;

  // Get the operator's parameters into variables.
  lcoreMaster = <%=$lcoreMaster%>;
  lcore = <%=$lcore%>;
  nicPort = <%=$nicPort%>;
  nicQueue = <%=$nicQueue%>;
  const bool promiscuous = <%=$promiscuous%>;
  metricsInterval = <%=$metricsInterval%>;

  // Initialize the DPDK subsystem.
  int rc = streams_operator_init(lcoreMaster, lcore, nicPort, nicQueue, (int)promiscuous, &dpdkCallback, (void *)this);
  SPLAPPTRC(L_TRACE, "streams_operator_init() for lcore = " << lcore <<
            ", nicPort = " << nicPort <<
            ", nicQueue = " << nicQueue <<
            ", lcoreMaster = " << lcoreMaster <<
            " completed.  Return code = " << rc,
            "PacketDPDKSource"); 
  if (rc != 0) { THROW (SPLRuntimeOperator, "Error in streams_operator_init."); }

  SPLAPPTRC(L_TRACE, "leaving <%=$myOperatorKind%> constructor", "PacketDPDKSource");
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() {
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() { 

    SPLAPPTRC(L_TRACE, "entering <%=$myOperatorKind%> allPortsReady()", "PacketDPDKSource");

  // construct a list of numeric buffer sizes in a string
  std::stringstream temp;
  <% for my $buffersize ( @buffersizesList ) { print("temp << $buffersize << ',';\n"); } %>
  std::string buffersizes(temp.str());
  if (buffersizes.size()) buffersizes.erase(buffersizes.size()-1, 1);

    // initialize DPDK
    int rc = streams_dpdk_init(buffersizes.c_str());
    if (rc != 0) { THROW (SPLRuntimeOperator, "Error in streams_dpdk_init."); }

    // get system clock rate
    tscHz = streams_source_get_tsc_hz(); 
    tscMicrosecondAdjust = (tscHz + 500000ul) / 1000000ul; 

    // create operator threads
    createThreads(2);

    SPLAPPTRC(L_TRACE, "leaving <%=$myOperatorKind%> allPortsReady()", "PacketDPDKSource");
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() {

  SPLAPPTRC(L_TRACE, "entering <%=$myOperatorKind%> prepareToShutdown()", "PacketDPDKSource");

  SPLAPPTRC(L_TRACE, "leaving <%=$myOperatorKind%> prepareToShutdown()", "PacketDPDKSource");

}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx) { 

  SPLAPPTRC(L_TRACE, "entering <%=$myOperatorKind%> process(" << idx << ")", "PacketDPDKSource");

  switch (idx) {
  case 0: processDpdkLoop(); break;
  case 1: if(metricsInterval > 0) metricsThread(); break;
  default: break; 
  } 

  SPLAPPTRC(L_TRACE, "leaving <%=$myOperatorKind%> process(" << idx << ")", "PacketDPDKSource");
}

// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port) {
}

// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
}

// This is the primary packet processing code and is called as each 
// packet enters the Streams system.
void MY_OPERATOR::packetProcess(uint8_t *packet, uint32_t length, uint64_t tscTimestamp) {

    packetPtr = packet;
    packetLen = length;

    ++packetCounter; 
    byteCounter += packetLen; 

#if TRACELVL >= 1
    SPLAPPTRC(L_TRACE, "Entering <%=$myOperatorKind%> packetProcess. lcore = " 
        << lcore << ", packetCounter = " << packetCounter <<
	", packetLen = " << packetLen,
	"PacketDPDKSource");
#endif

    if(packetPtr == NULL || packetLen == 0) return;

    // Start a prefetch of the packet data.  This was found to help
    // in some situations, but results will vary.
    __builtin_prefetch((void *)packet, 0, 0);
    __builtin_prefetch((void *)((uint64_t)packet + packetLen), 0, 0);

  // get current time in microseconds
  struct timespec ts; 
  clock_gettime(CLOCK_REALTIME, &ts); 
  captureSeconds = (uint32)ts.tv_sec;
  captureMicroseconds = (uint32)(ts.tv_nsec/1000);

    tscMicroseconds = tscTimestamp / tscMicrosecondAdjust;

    // Optionally parse the network headers in the packet.
    // This example makes sure its an IPv4 or IPv6 formatted packet before
    // sending it downstream, and will drop other packet types.
    headers.parseNetworkHeaders((char*)packetPtr, packetLen);
    if (!(headers.ipv4Header || headers.ipv6Header)) { 
        SPLAPPTRC(L_DEBUG, "ignoring packet, no IPv4 or IPv6 header found", "PacketDPDKSource");  
	return; 
    }

    // Fill in and submit output tuples to output ports, as selected by output filters, if specified.
    <% for (my $i=0; $i<$model->getNumberOfOutputPorts(); $i++) { %> ;
      <% if (scalar($outputFilterList[$i])) { print "if ($outputFilterList[$i])"; } %> 
      {
         <% CodeGenX::assignOutputAttributeValues("outTuple$i", $model->getOutputPortAt($i)); %> ;
         SPLAPPTRC(L_TRACE, "submitting outTuple<%=$i%>=" << outTuple<%=$i%>, "PacketDPDKSource");
         submit(outTuple<%=$i%>, <%=$i%>);
      }
    <% } %> ;

    // reset the 'metrics updated' flag, in case one of the output filters or assignments references it
    metricsUpdate = false;
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
} 

void MY_OPERATOR::metricsThread() {
    SPLAPPTRC(L_TRACE, "entering <%=$myOperatorKind%> metricsThread()", "PacketDPDKSource");

    // expose the operator's statistics in these metrics
    OperatorMetrics& opm = getContext().getMetrics();
    Metric* totalPacketsReceived = &opm.getCustomMetricByName("nPacketsReceivedCurrent");
    Metric* totalPacketsDropped = &opm.getCustomMetricByName("nPacketsDroppedCurrent");
    Metric* totalPacketsProcessed = &opm.getCustomMetricByName("nPacketsProcessedCurrent");
    Metric* totalBytesProcessed = &opm.getCustomMetricByName("nBytesProcessedCurrent");

    // get statistics periodically and send them to the runtime
    while (!getPE().getShutdownRequested()) {

      // wait until the next interval or the PE is shutting down
      const double secondsToWait = now + metricsInterval - SPL::Functions::Time::getTimestampInSecs();
      if (secondsToWait>0) {
        SPLAPPTRC(L_DEBUG, "next statistics interval in " << streams_boost::lexical_cast<std::string>(secondsToWait) << " seconds", "PacketDPDKSource");
        getPE().blockUntilShutdownRequest(secondsToWait);
      } else {
        SPLAPPTRC(L_DEBUG, "missed statistics interval by " << streams_boost::lexical_cast<std::string>(-secondsToWait) << " seconds", "PacketDPDKSource");
      }

      // store the previous interval's metrics for difference calculations
      then = now;
      packetCounterThen = packetCounterNow;
      byteCounterThen = byteCounterNow;
      portStatisticsThen.received = portStatisticsNow.received;
      portStatisticsThen.dropped = portStatisticsNow.dropped;

      // get the current interval's counters from DPDK
      now = SPL::Functions::Time::getTimestampInSecs();
      streams_port_stats(nicPort, &portStatisticsNow);
      packetCounterNow = packetCounter;
      byteCounterNow = byteCounter;

      // expose the operator's statistics as metrics
      totalPacketsReceived->setValue(portStatisticsNow.received);
      totalPacketsDropped->setValue(portStatisticsNow.dropped); 
      totalPacketsProcessed->setValue(packetCounter);
      totalBytesProcessed->setValue(byteCounter);

      // updated metrics will be available to the next output tuple emitted
      metricsUpdate = true;
    }

    SPLAPPTRC(L_TRACE, "leaving <%=$myOperatorKind%> metricsThread()", "PacketDPDKSource");
}

void MY_OPERATOR::processDpdkLoop() {

    SPLAPPTRC(L_TRACE, "entering <%=$myOperatorKind%> processDpdkLoop()", "PacketDPDKSource");

    int rc = streams_source_start();
    if (rc != 0) { THROW (SPLRuntimeOperator, "Error in streams_source_start."); }
    while(!getPE().getShutdownRequested()) { usleep(100); }

    SPLAPPTRC(L_TRACE, "leaving <%=$myOperatorKind%> processDpdkLoop()", "PacketDPDKSource");
}

<%SPL::CodeGen::implementationEpilogue($model);%>

