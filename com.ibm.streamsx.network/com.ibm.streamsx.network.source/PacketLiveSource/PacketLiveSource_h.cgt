<%
## Copyright (C) 2011, 2017  International Business Machines Corporation
## All Rights Reserved
%>


#include <iostream>
#include <iomanip>
#include <limits>
#include <locale>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <sys/time.h>
#include <errno.h>
#include <string.h>
#include <sched.h>
#include <pthread.h>
#include <signal.h>
#include <pcap.h>
#include <pcap-bpf.h>
#include <arpa/inet.h>

#include <streams_boost/lexical_cast.hpp>

#include <SPL/Runtime/Common/Metric.h>
#include <SPL/Runtime/Operator/OperatorMetrics.h>

#include "parse/NetworkHeaderParser.h"


<%SPL::CodeGen::headerPrologue($model);%>

class MY_OPERATOR : public MY_BASE_OPERATOR
{
public:

  // ----------- standard operator methods ----------

  MY_OPERATOR();
  virtual ~MY_OPERATOR();
  void allPortsReady();
  void prepareToShutdown();
  void process(uint32_t idx);
  void process(Tuple & tuple, uint32_t port);
  void process(Tuple const & tuple, uint32_t port);
  void process(Punctuation const & punct, uint32_t port);

  // ----------- additional operator methods ----------

  void metricsThread();
  void pcapThread();
  void processPCAPbuffer(const struct pcap_pkthdr* header, const u_char* buffer);


private:

  // ----------- operator parameters (constant after constructor executes) ----------

  std::string networkInterface;
  std::string timestampType;
  double initDelay;
  int32_t processorAffinity;
  int32_t maximumLength;
  int32_t bufferSize;
  bool promiscuous;
  double timeout;
  double metricsInterval;
  std::string inputFilter;

  // ----------- output tuples ----------

  <% for (my $i=0; $i<$model->getNumberOfOutputPorts(); $i++) { print "OPort$i\Type outTuple$i;"; } %> ;

  // ----------- operator state variables ----------

  pthread_t pcapThreadID;
  pthread_t metricsThreadID;
  double now, then;
  uint64_t packetCounter, packetCounterNow, packetCounterThen;
  uint64_t byteCounter, byteCounterNow, byteCounterThen;
  bool metricsUpdate;

  // ----------- libpcap-specific variables ----------

  pcap_t* pcapDescriptor;
  const struct pcap_pkthdr* pcapHeader;
  struct bpf_program inputFilterProgram;
  struct pcap_stat pcapStatisticsNow, pcapStatisticsThen;

  // ----------- network header parser ----------

  NetworkHeaderParser headers;

  // ----------- assignment functions for output attributes ----------

  inline __attribute__((always_inline))
  SPL::uint64 packetsReceived() { return pcapStatisticsNow.ps_recv; }

  inline __attribute__((always_inline))
  SPL::uint64 packetsDropped() { return pcapStatisticsNow.ps_drop; }

  inline __attribute__((always_inline))
  SPL::uint64 packetsProcessed() { return packetCounter; }

  inline __attribute__((always_inline))
  SPL::uint64 bytesProcessed() { return byteCounter; }

  inline __attribute__((always_inline))
  SPL::float64 metricsIntervalElapsed() { return then ? now-then : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsReceived() { return then ? pcapStatisticsNow.ps_recv - pcapStatisticsThen.ps_recv : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsDropped() { return then ? pcapStatisticsNow.ps_drop - pcapStatisticsThen.ps_drop : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsProcessed() { return then ? packetCounterNow - packetCounterThen : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalBytesProcessed() { return then ? byteCounterNow - byteCounterThen : 0; }

  inline __attribute__((always_inline))
  SPL::boolean metricsUpdated() { return then && metricsUpdate; }

  inline __attribute__((always_inline))
  SPL::uint32 CAPTURE_SECONDS() { return pcapHeader->ts.tv_sec; }

  inline __attribute__((always_inline))
  SPL::uint32 CAPTURE_MICROSECONDS() { return pcapHeader->ts.tv_usec; }

  inline __attribute__((always_inline))
  SPL::uint32 PACKET_LENGTH() { return pcapHeader->len; }

  inline __attribute__((always_inline))
  SPL::blob PACKET_DATA() { return SPL::blob((const unsigned char*)headers.packetBuffer, headers.packetLength); }

  inline __attribute__((always_inline))
  SPL::uint32 PAYLOAD_LENGTH() { return headers.payloadLength; }

  inline __attribute__((always_inline))
  SPL::blob PAYLOAD_DATA() { return headers.payload ? SPL::blob((const unsigned char*)headers.payload, headers.payloadLength) : SPL::blob(); }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> ETHER_SRC_ADDRESS() { return headers.etherHeader ? SPL::list<SPL::uint8>(headers.etherHeader->h_source, headers.etherHeader->h_source+sizeof(headers.etherHeader->h_source)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> ETHER_DST_ADDRESS() { return headers.etherHeader ? SPL::list<SPL::uint8>(headers.etherHeader->h_dest, headers.etherHeader->h_dest+sizeof(headers.etherHeader->h_dest)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::uint32 ETHER_PROTOCOL() { return headers.etherHeader ? ntohs(headers.etherHeader->h_proto) : 0; }

  inline __attribute__((always_inline))
  SPL::uint8 IP_VERSION() { return headers.ipv4Header ? headers.ipv4Header->version : ( headers.ipv6Header ? headers.ipv6Header->ip6_vfc>>4 : 0 ); }

  inline __attribute__((always_inline))
  SPL::uint8 IP_PROTOCOL() { return headers.ipv4Header ? headers.ipv4Header->protocol : ( headers.ipv6Header ? headers.ipv6Header->ip6_nxt : 0 ); }

  inline __attribute__((always_inline))
  SPL::uint32 IPV4_SRC_ADDRESS() { return headers.ipv4Header ? ntohl(headers.ipv4Header->saddr) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 IPV4_DST_ADDRESS() { return headers.ipv4Header ? ntohl(headers.ipv4Header->daddr) : 0; }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> IPV6_SRC_ADDRESS() { return headers.ipv6Header ? SPL::list<SPL::uint8>(headers.ipv6Header->ip6_src.s6_addr, headers.ipv6Header->ip6_src.s6_addr+sizeof(headers.ipv6Header->ip6_src.s6_addr)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> IPV6_DST_ADDRESS() { return headers.ipv6Header ? SPL::list<SPL::uint8>(headers.ipv6Header->ip6_dst.s6_addr, headers.ipv6Header->ip6_dst.s6_addr+sizeof(headers.ipv6Header->ip6_dst.s6_addr)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::uint16 IP_SRC_PORT() { return UDP_SRC_PORT() + TCP_SRC_PORT(); }

  inline __attribute__((always_inline))
  SPL::uint16 IP_DST_PORT() { return UDP_DST_PORT() + TCP_DST_PORT(); }

  inline __attribute__((always_inline))
  SPL::boolean UDP_PORT(SPL::uint16 port) { return headers.udpHeader ? ( ntohs(headers.udpHeader->source)==port || ntohs(headers.udpHeader->dest)==port ) : false; }

  inline __attribute__((always_inline))
  SPL::uint16 UDP_SRC_PORT() { return headers.udpHeader ? ntohs(headers.udpHeader->source) : 0; }

  inline __attribute__((always_inline))
  SPL::uint16 UDP_DST_PORT() { return headers.udpHeader ? ntohs(headers.udpHeader->dest) : 0; }

  inline __attribute__((always_inline))
  SPL::boolean TCP_PORT(SPL::uint16 port) { return headers.tcpHeader ? ( ntohs(headers.tcpHeader->source)==port || ntohs(headers.tcpHeader->dest)==port ) : false; }

  inline __attribute__((always_inline))
  SPL::uint16 TCP_SRC_PORT() { return headers.tcpHeader ? ntohs(headers.tcpHeader->source) : 0; }

  inline __attribute__((always_inline))
  SPL::uint16 TCP_DST_PORT() { return headers.tcpHeader ? ntohs(headers.tcpHeader->dest) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 TCP_SEQUENCE() { return headers.tcpHeader ? ntohl(headers.tcpHeader->seq) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 TCP_ACKNOWLEDGEMENT() { return headers.tcpHeader ? ntohl(headers.tcpHeader->ack_seq) : 0; }

  inline __attribute__((always_inline))
  SPL::boolean TCP_FLAGS_URGENT() { return headers.tcpHeader ? headers.tcpHeader->urg : false; }

  inline __attribute__((always_inline))
  SPL::boolean TCP_FLAGS_ACK() { return headers.tcpHeader ? headers.tcpHeader->ack : false; }

  inline __attribute__((always_inline))
  SPL::boolean TCP_FLAGS_PUSH() { return headers.tcpHeader ? headers.tcpHeader->psh : false; }

  inline __attribute__((always_inline))
  SPL::boolean TCP_FLAGS_RESET() { return headers.tcpHeader ? headers.tcpHeader->rst : false; }

  inline __attribute__((always_inline))
  SPL::boolean TCP_FLAGS_SYN() { return headers.tcpHeader ? headers.tcpHeader->syn : false; }

  inline __attribute__((always_inline))
  SPL::boolean TCP_FLAGS_FIN() { return headers.tcpHeader ? headers.tcpHeader->fin : false; }

  inline __attribute__((always_inline))
  SPL::uint16 TCP_WINDOW() { return headers.tcpHeader ? ntohs(headers.tcpHeader->window) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 JMIRROR_SRC_ADDRESS() { return headers.jmirrorHeader ? ntohl(headers.jmirrorHeader->ipHeader.saddr) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 JMIRROR_DST_ADDRESS() { return headers.jmirrorHeader ? ntohl(headers.jmirrorHeader->ipHeader.daddr) : 0; }

  inline __attribute__((always_inline))
  SPL::uint16 JMIRROR_SRC_PORT() { return headers.jmirrorHeader ? ntohs(headers.jmirrorHeader->udpHeader.source) : 0; }

  inline __attribute__((always_inline))
  SPL::uint16 JMIRROR_DST_PORT() { return headers.jmirrorHeader ? ntohs(headers.jmirrorHeader->udpHeader.dest) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 JMIRROR_INTERCEPT_ID() { return headers.jmirrorHeader ? ntohl(headers.jmirrorHeader->jmirrorHeader.interceptIdentifier) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 JMIRROR_SESSION_ID() { return headers.jmirrorHeader ? ntohl(headers.jmirrorHeader->jmirrorHeader.sessionIdentifier) : 0; }
  
  inline __attribute__((always_inline))
  SPL::list<uint16> VLAN_TAGS() { return (headers.convertVlanTagsToList()); }  

  inline __attribute__((always_inline))
  SPL::uint32 ERSPAN_SRC_ADDRESS() { return headers.erspanHeader ? ntohl(headers.erspanHeader->ipHeader.saddr) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 ERSPAN_DST_ADDRESS() { return headers.erspanHeader ? ntohl(headers.erspanHeader->ipHeader.daddr) : 0; }

  // ------------------------------------------------------------------------------------------

};

<%SPL::CodeGen::headerEpilogue($model);%>
