/*********************************************************************
 * Copyright (C) 2016  International Business Machines Corporation
 * All Rights Reserved
 ********************************************************************/

<%
# These fragments of Perl code get strings from the operator's declaration
# in the SPL source code for use in generating C/C++ code for the operator's 
# implementation below

unshift @INC, dirname($model->getContext()->getOperatorDirectory()) . "/../impl/bin";
require CodeGenX;

# module for i18n messages
require NetworkResources;

# get the name of this operator's template
my $myOperatorKind = $model->getContext()->getKind();

# check consistent region restrictions
my $crContext = $model->getContext()->getOptionalContext("ConsistentRegion");
SPL::CodeGen::exitln("The " . $myOperatorKind . " operator cannot be the start of a consistent region.") if $crContext && $crContext->isStartOfRegion();

# get Perl objects for output ports
my @outputPortList = @{ $model->getOutputPorts() };

# Get C++ expressions for getting the values of this operator's parameters.

my $lcoreMaster = $model->getParameterByName("lcoreMaster") ? $model->getParameterByName("lcoreMaster")->getValueAt(0)->getCppExpression() : -1;
my $lcore = $model->getParameterByName("lcore") ? $model->getParameterByName("lcore")->getValueAt(0)->getCppExpression() : 0;
my $nicPort = $model->getParameterByName("nicPort") ? $model->getParameterByName("nicPort")->getValueAt(0)->getCppExpression() : 0;
my $nicQueue = $model->getParameterByName("nicQueue") ? $model->getParameterByName("nicQueue")->getValueAt(0)->getCppExpression() : 0;
my $buffersizes = $model->getParameterByName("buffersizes") ? $model->getParameterByName("buffersizes")->getValueAt(0)->getCppExpression() : '""';
my $jMirrorCheck = $model->getParameterByName("jMirrorCheck") ? $model->getParameterByName("jMirrorCheck")->getValueAt(0)->getCppExpression() : 0;
my $promiscuous = $model->getParameterByName("promiscuous") ? $model->getParameterByName("promiscuous")->getValueAt(0)->getCppExpression() : 0;
my $metricsInterval = $model->getParameterByName("metricsInterval") ? $model->getParameterByName("metricsInterval")->getValueAt(0)->getCppExpression() : 10.0;
my $rateLimit = $model->getParameterByName("rateLimit") ? $model->getParameterByName("rateLimit")->getValueAt(0)->getCppExpression() : 1000.0;

# special handling for 'outputFilters' parameter, which may include SPL functions that reference input tuples indirectly
my $outputFilterParameter = $model->getParameterByName("outputFilters");
my @outputFilterList;
if ($outputFilterParameter) {
    foreach my $value ( @{ $outputFilterParameter->getValues() } ) {
	my $expression = $value->getCppExpression();
	push @outputFilterList, $expression;
	$value->{xml_}->{hasStreamAttributes}->[0]="true" if index($expression, "::common_result_functions::") != -1;
	$value->{xml_}->{hasStreamAttributes}->[0]="true" if index($expression, "::DNSPacketLiveSource_result_functions::") != -1;
	$value->{xml_}->{hasStreamAttributes}->[0]="true" if index($expression, "::DNSPacketSource_result_functions::") != -1;
    }
}

# basic safety checks
SPL::CodeGen::exit(NetworkResources::NETWORK_NO_OUTPUT_PORTS()) unless scalar(@outputPortList);
SPL::CodeGen::exit(NetworkResources::NETWORK_NOT_ENOUGH_OUTPUT_FILTERS()) if scalar(@outputFilterList) && scalar(@outputFilterList) < scalar(@outputPortList);
SPL::CodeGen::exit(NetworkResources::NETWORK_TOO_MANY_OUTPUT_FILTERS()) if scalar(@outputFilterList) && scalar(@outputFilterList) > scalar(@outputPortList);

%>


// This value is used to completely gate the code paths used for tracing.
// Without this mechanism only the final output is supressed and most
// of the pathlength remains.
#define TRACELVL 1


<%SPL::CodeGen::implementationPrologue($model);%>


// calls to SPL functions within expressions are generated with these
// namespaces, which must be mapped to the operator's namespace so they
// will invoke the functions defined in the DNSPacketDPDKSource_h.cgt file

#define common_result_functions MY_OPERATOR
#define DNSPacketSource_result_functions MY_OPERATOR


// Function called from the DPDK library as each packet arrives.
static void dpdkCallback(void *correlator, void *data, uint32_t length, uint64_t tscTimestamp) {
    MY_OPERATOR* self = (MY_OPERATOR*)correlator;
    if (!(self->getPE().getShutdownRequested())) self->packetProcess((uint8_t *)data, length, tscTimestamp);
}



MY_OPERATOR::MY_OPERATOR() {

  SPLAPPTRC(L_DEBUG, "entering <%=$myOperatorKind%> constructor ...", "DNSPacketDPDKSource");

  // Get the operator's parameters into variables
  lcoreMaster = <%=$lcoreMaster%>;
  lcore = <%=$lcore%>;
  nicPort = <%=$nicPort%>;
  nicQueue = <%=$nicQueue%>;
  buffersizes = <%=$buffersizes%>;
  const bool promiscuous = <%=$promiscuous%>;
  jMirrorCheck = <%=$jMirrorCheck%>;
  metricsInterval = <%=$metricsInterval%>;

  // Set up rate limiter parameters.  This approach scales to 1M pps, or 1 per usec and then
  // goes unlimited. 
  rateLimit = <%=$rateLimit%>;
  rateLimitLastTime = 0;
  rateLimitPeriodUsec = (uint64_t)((1.0 / rateLimit) * 1000000.0); 

  // initialize operator state variables
  dpdkThreadID = metricsThreadID = 0;
  packetCounter = packetCounterNow = packetCounterThen = 0;
  byteCounter = byteCounterNow = byteCounterThen = 0;
  now = then = 0;
  metricsUpdate = false;
#ifdef __ATOMIC_RELAXED
  __atomic_store_n(&realMetricsUpdate, false, __ATOMIC_RELEASE);
#else
  #pragma message "Using old sync builtins, with GCC " __VERSION__
  // __sync_synchronize();  // Unnecessary here, in startup, as we're not yet protecting anything from any other threads.  Leaving as reminder that this variable is an atomic.
  realMetricsUpdate = false;
#endif

  // clear the output tuples
  <% for (my $i=0; $i<$model->getNumberOfOutputPorts(); $i++) { %> ;
    outTuple<%=$i%>.clear();
  <% } %> ;

  // Initialize the DPDK subsystem.
  int rc = streams_operator_init(lcoreMaster, lcore, nicPort, nicQueue, (int)promiscuous, &dpdkCallback, (void *)this);
  
  SPLAPPTRC(L_TRACE, "streams_operator_init() for lcore = " << lcore <<
         ", nicPort = " << nicPort <<
         ", nicQueue = " << nicQueue <<
         ", lcoreMaster = " << lcoreMaster <<
         " completed.  Return code = " << rc,
         "DNSPacketDPDKSource"); 
  if (rc != 0) { THROW (SPLRuntimeOperator, "Error in streams_operator_init."); }

    SPLAPPTRC(L_INFO, "ignoring timestampType parameter", "DNSPacketDPDKSource");
}


// Destructor
MY_OPERATOR::~MY_OPERATOR() {

  SPLAPPTRC(L_DEBUG, "entering <%=$myOperatorKind%> destructor ...", "DNSPacketDPDKSource");

  SPLAPPTRC(L_DEBUG, "leaving <%=$myOperatorKind%> destructor ...", "DNSPacketDPDKSource");
}


// Notify port readiness
void MY_OPERATOR::allPortsReady() { 
    SPLAPPTRC(L_TRACE, "entering <%=$myOperatorKind%> allPortsReady() ...", "DNSPacketDPDKSource");

    // Retreive the pinnings before we call into the DPDK library
    cpu_set_t cpumask;
    CPU_ZERO(&cpumask);
    pid_t mytid = (pid_t)syscall(SYS_gettid);
    bool restore_affinity = true;
    if(sched_getaffinity(mytid, sizeof(cpumask), &cpumask) != 0) {
        SPLAPPTRC(L_ERROR, "sched_getaffinity() returned errno = " << errno, "DNSPacketDPDKSource");
        restore_affinity = false;
    }

    int rc = streams_dpdk_init(buffersizes.c_str());
    if (rc != 0) THROW (SPLRuntimeOperator, "Error in streams_dpdk_init.");

    // Restore the pinning of this thread after DPDK library may have messed it up
    if(restore_affinity) {
        if(sched_setaffinity(mytid, sizeof(cpumask), &cpumask) != 0) {
            SPLAPPTRC(L_ERROR, "sched_setaffinity() returned errno = " << errno, "DNSPacketDPDKSource");
        }
    }

    tscHz = streams_source_get_tsc_hz(); 
    tscMicrosecondAdjust = (tscHz + 500000ul) / 1000000ul; 

    createThreads(2);

  SPLAPPTRC(L_DEBUG, "leaving <%=$myOperatorKind%> allPortsReady() ...", "DNSPacketDPDKSource");
}


// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() {
  SPLAPPTRC(L_DEBUG, "entering <%=$myOperatorKind%> prepareToShutdown() ...", "DNSPacketDPDKSource");

  SPLAPPTRC(L_DEBUG, "leaving <%=$myOperatorKind%> prepareToShutdown() ...", "DNSPacketDPDKSource");
}


// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx) { 

  SPLAPPTRC(L_DEBUG, "entering <%=$myOperatorKind%> process(" << idx << ")", "DNSPacketDPDKSource");

  switch (idx) {
  case 0: processDpdkLoop(); break;
  case 1: if (metricsInterval>0) metricsThread(); break;
  default: break; 
  } 

  SPLAPPTRC(L_DEBUG, "leaving <%=$myOperatorKind%> process(" << idx << ")", "DNSPacketDPDKSource");
}


// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port) {
}


// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
}


// This is the primary packet processing code and is called as each 
// packet enters the Streams system.
void MY_OPERATOR::packetProcess(uint8_t *packet, uint32_t length, uint64_t tscTimestamp) {

  // save address and length of raw packet
  packetPtr = packet;
  packetLen = length;

#if TRACELVL >= 1
    SPLAPPTRC(L_TRACE, "Entering <%=$myOperatorKind%> packetProcess. lcore = " 
        << lcore << ", packetCounter = " << packetCounter <<
	", packetLen = " << packetLen,
	"DNSPacketDPDKSource");
#endif

  if(packetPtr == NULL || packetLen == 0) return;

  // Start a prefetch of the packet data.  This was found to help
  // in some situations, but results will vary.
  __builtin_prefetch((void *)packet, 0, 0);
  __builtin_prefetch((void *)((uint64_t)packet + packetLen), 0, 0);

  // get current time in microseconds
  struct timespec ts; 
  clock_gettime(CLOCK_REALTIME, &ts); 
  captureSeconds = (uint32)ts.tv_sec;
  captureMicroseconds = (uint32)(ts.tv_nsec/1000);
  tscMicroseconds = tscTimestamp / tscMicrosecondAdjust;
  
  // parse the network headers in the packet.
  headers.parseNetworkHeaders((char*)packetPtr, packetLen, jMirrorCheck);

  // ignore the packet if its not IPv4, or not UDP, or not to/from port 53, or has no payload
  if ( ! headers.ipv4Header ) { return; }
  if ( ! headers.udpHeader ) { return; }
  if ( ntohs(headers.udpHeader->source)!=53 && ntohs(headers.udpHeader->dest)!=53 ) { return; }
  if ( ! headers.payload ) { return; }

  // parse the DNS header and resource records in the packet payload
  parser.parseDNSMessage(headers.payload, headers.payloadLength);
  if ( parser.error ) { SPLAPPTRC(L_DEBUG, "error " << parser.error << "parsing packet " << packetCounter << " at offset 0x" << std::hex << parseErrorOffset() << ", " << parser.errorDescriptions.description[parser.error], "DNSPacketDPDKSource"); }
  if ( ! parser.dnsHeader ) { SPLAPPTRC(L_DEBUG, "ignoring packet " << packetCounter << ", no DNS header found", "DNSPacketDPDKSource");  return; }


  // count the packets and bytes processed so far
  packetCounter++;
  byteCounter += packetLen;

  // Determine if the metrics were updated prior to this packet.
  // Update the "local" version of the metrics updated flag, so that all output filters/assignments reference a stable copy.
  /// @todo Under extremely low packet rates, or very short metrics update intervals, it's possible that the previous
  // metrics copy hasn't yet been consumed when a new one comes in, causing either a total loss of a metrics update,
  // or, if it lines up just right with an incoming packet, a metrics update with "odd" or part old/part new values.
  // This should be very uncommon, and not catastrophic, so we are not attempted to protect against this just yet.
  // This could be addressed at some future time.

#ifdef __ATOMIC_RELAXED
  bool expected = true;
  if(__atomic_compare_exchange_n(&realMetricsUpdate, &expected, false, false, __ATOMIC_ACQ_REL, __ATOMIC_RELAXED)) {
      metricsUpdate = true;
  } else {
      metricsUpdate = false;
  }
#else
  if(__sync_bool_compare_and_swap(&realMetricsUpdate, true, false)) {
      metricsUpdate = true;
  } else {
      metricsUpdate = false;
  }
#endif

  // fill in and submit output tuples to output ports, as selected by output filters, if specified
  <% for (my $i=0; $i<$model->getNumberOfOutputPorts(); $i++) { %> ;
    <% if (scalar($outputFilterList[$i])) { print "if ($outputFilterList[$i])"; } %> 
    {
      <% CodeGenX::assignOutputAttributeValues("outTuple$i", $model->getOutputPortAt($i)); %> ;
      //SPLAPPTRC(L_TRACE, "submitting outTuple<%=$i%>=" << outTuple<%=$i%>, "DNSPacketDPDKSource");
      submit(outTuple<%=$i%>, <%=$i%>);
    }
    <% } %> ;

  // reset the "local" version of the 'metrics updated' flag, in case one of the output filters or assignments references it
  // The "real" version of the flag, as updated by the metricsThread() is unaffected, so we don't lose metrics updates under high-packet-rate
  // conditions.
  metricsUpdate = false;
}


// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
} 


void MY_OPERATOR::processDpdkLoop() {

    // remember our thread identifer
    dpdkThreadID = pthread_self();

    int rc  = streams_source_start();
    if (rc != 0) THROW (SPLRuntimeOperator, "Error in streams_source_start.");
    while(!getPE().getShutdownRequested()) { usleep(100); }
}


void MY_OPERATOR::metricsThread() {
    SPLAPPTRC(L_DEBUG, "entering <%=$myOperatorKind%> metricsThread()", "DNSPacketDPDKSource");

    // remember our thread identifer
    metricsThreadID = pthread_self();

    // expose the operator's statistics in these metrics
    OperatorMetrics& opm = getContext().getMetrics();
    Metric* totalPacketsReceived = &opm.getCustomMetricByName("nPacketsReceivedCurrent");
    Metric* totalPacketsDropped = &opm.getCustomMetricByName("nPacketsDroppedCurrent");
    Metric* totalBytesReceived = &opm.getCustomMetricByName("nBytesReceivedCurrent");
    Metric* totalPacketsProcessed = &opm.getCustomMetricByName("nPacketsProcessedCurrent");
    Metric* totalBytesProcessed = &opm.getCustomMetricByName("nBytesProcessedCurrent");

    // get statistics periodically and send them to the runtime
    while (!getPE().getShutdownRequested()) {
      
      // wait until the next interval or the PE is shutting down
      const double secondsToWait = now + metricsInterval - SPL::Functions::Time::getTimestampInSecs();
      if (secondsToWait>0) {
        SPLAPPTRC(L_DEBUG, "next statistics interval in " << streams_boost::lexical_cast<std::string>(secondsToWait) << " seconds", "DNSPacketLiveSource");
        getPE().blockUntilShutdownRequest(secondsToWait);
      } else {
        SPLAPPTRC(L_DEBUG, "missed statistics interval by " << streams_boost::lexical_cast<std::string>(-secondsToWait) << " seconds", "DNSPacketLiveSource");
      }
      
      // store the previous interval's metrics for difference calculations
      then = now;
      packetCounterThen = packetCounterNow;
      byteCounterThen = byteCounterNow;
      statsThen.received = statsNow.received; // Packets RX
      statsThen.dropped  = statsNow.dropped;  // All errors and drops
      statsThen.bytes    = statsNow.bytes;    // Bytes RX
      
      // get the current interval's counters from the DPDK library
      now = SPL::Functions::Time::getTimestampInSecs();
      streams_port_stats(nicPort, &statsNow);
      packetCounterNow = packetCounter;
      byteCounterNow = byteCounter;
      
      // expose the operator's statistics as metrics
      totalPacketsReceived->setValue(statsNow.received);
      totalPacketsDropped->setValue(statsNow.dropped); 
      totalBytesReceived->setValue(statsNow.bytes); 
      totalPacketsProcessed->setValue(packetCounter);
      totalBytesProcessed->setValue(byteCounter);
      
      // updated metrics will be available to the next output tuple emitted
#ifdef __ATOMIC_RELAXED
      __atomic_store_n(&realMetricsUpdate, true, __ATOMIC_RELEASE);
#else
      __sync_synchronize();
      realMetricsUpdate = true;
#endif

    }

    SPLAPPTRC(L_DEBUG, "leaving <%=$myOperatorKind%> metricsThread()", "DNSPacketDPDKSource");
}


<%SPL::CodeGen::implementationEpilogue($model);%>

