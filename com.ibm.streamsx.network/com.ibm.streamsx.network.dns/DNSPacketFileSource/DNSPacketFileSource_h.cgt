<%

## Copyright (C) 2016  International Business Machines Corporation
## All Rights Reserved

my $consistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");

%>

#include <iostream>
#include <iomanip>
#include <limits>
#include <locale>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <sys/time.h>
#include <errno.h>
#include <string.h>
#include <sched.h>
#include <pcap.h>
#include <pcap-bpf.h>

#include <streams_boost/filesystem.hpp>
#include <streams_boost/lexical_cast.hpp>

#include <SPL/Runtime/Common/Metric.h>
#include <SPL/Runtime/Operator/OperatorMetrics.h>

#include "parse/NetworkHeaderParser.h"
#include "parse/DNSMessageParser.h"
#include "dns/DNSPacketFlattener.h"


<%SPL::CodeGen::headerPrologue($model);%>

class MY_OPERATOR : public MY_BASE_OPERATOR
<% if($consistentRegion) { %> , public StateHandler <% } %>
{
public:

  // ----------- standard operator methods ----------

  MY_OPERATOR();
  virtual ~MY_OPERATOR();
  void allPortsReady();
  void prepareToShutdown();
  void process(uint32_t idx);
  void process(Tuple & tuple, uint32_t port);
  void process(Tuple const & tuple, uint32_t port);
  void process(Punctuation const & punct, uint32_t port);

  <% if ($consistentRegion) { %>
    ConsistentRegionContext * const crContext;
    void checkpoint(Checkpoint &ckpt);
    void reset(Checkpoint &ckpt);
    void resetToInitialState();
    <% } %> ;

  // ----------- additional operator methods ----------

  void processPCAPfile(const std::string pcapFilename);
  void fileThread();
  void metricsThread();

 private:

  // ----------- operator parameters (constant after constructor executes) ----------

  std::string pcapFilename;
  double initDelay;
  int32_t processorAffinity;
  double metricsInterval;
  std::string inputFilter;

  // ----------- input and output tuples ----------

  <% if ($model->getNumberOfInputPorts()) { print "IPort0Type* inTuple;"; } %> ;
  <% for (my $i=0; $i<$model->getNumberOfOutputPorts(); $i++) { print "OPort$i\Type outTuple$i;"; } %> ;

  // ----------- operator state variables ----------

  Mutex processMutex;
  uint64_t startTimeInNanoseconds;
  double now, then;
  uint64_t packetCounter, packetCounterNow, packetCounterThen;
  uint64_t byteCounter, byteCounterNow, byteCounterThen;
  bool metricsUpdate;
  boolean done;

  // ----------- libpcap-specific variables ----------

  pcap_t* pcapDescriptor;
  struct pcap_pkthdr* pcapHeader;
  const u_char* pcapBuffer;
  struct bpf_program inputFilterProgram;

  // ----------- packet header parser ----------

  char* packetBuffer;
  uint32_t packetBufferLength;
  NetworkHeaderParser headers;

  // ----------- DNS message parser and flattener ----------

  DNSMessageParser parser;
  DNSPacketFlattener flattener;

  // ----------- assignment functions for output attributes ----------

  inline __attribute__((always_inline))
  SPL::uint64 packetsReceived() { return 0; }

  inline __attribute__((always_inline))
  SPL::uint64 packetsDropped() { return 0; }

  inline __attribute__((always_inline))
  SPL::uint64 bytesReceived() { return 0; }

  inline __attribute__((always_inline))
  SPL::uint64 packetsProcessed() { return packetCounter; }

  inline __attribute__((always_inline))
  SPL::uint64 bytesProcessed() { return byteCounter; }

  inline __attribute__((always_inline))
  SPL::float64 metricsIntervalElapsed() { return then ? now-then : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsReceived() { return 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsDropped() { return 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalBytesReceived() { return 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalPacketsProcessed() { return then ? packetCounterNow - packetCounterThen : 0; }

  inline __attribute__((always_inline))
  SPL::uint64 metricsIntervalBytesProcessed() { return then ? byteCounterNow - byteCounterThen : 0; }

  inline __attribute__((always_inline))
  SPL::boolean metricsUpdated() { return then && metricsUpdate; }

  inline __attribute__((always_inline))
  SPL::uint32 CAPTURE_SECONDS() { return pcapHeader->ts.tv_sec; }

  inline __attribute__((always_inline))
  SPL::uint32 CAPTURE_MICROSECONDS() { return pcapHeader->ts.tv_usec; }

  inline __attribute__((always_inline))
  SPL::uint32 PACKET_LENGTH() { return pcapHeader->len; }

  inline __attribute__((always_inline))
  SPL::blob PACKET_DATA() { return SPL::blob((const unsigned char*)headers.packetBuffer, headers.packetLength); }

  inline __attribute__((always_inline))
  SPL::uint32 PAYLOAD_LENGTH() { return headers.payloadLength; }

  inline __attribute__((always_inline))
  SPL::blob PAYLOAD_DATA() { return headers.payload ? SPL::blob((const unsigned char*)headers.payload, headers.payloadLength) : SPL::blob(); }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> ETHER_SRC_ADDRESS() { return headers.etherHeader ? SPL::list<SPL::uint8>(headers.etherHeader->h_source, headers.etherHeader->h_source+sizeof(headers.etherHeader->h_source)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> ETHER_DST_ADDRESS() { return headers.etherHeader ? SPL::list<SPL::uint8>(headers.etherHeader->h_dest, headers.etherHeader->h_dest+sizeof(headers.etherHeader->h_dest)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::uint64 ETHER_DST_ADDRESS_64() { return headers.etherHeader ? (((uint64_t)headers.etherHeader->h_dest[0] << 40) | ((uint64_t)headers.etherHeader->h_dest[1] << 32) | ((uint64_t)headers.etherHeader->h_dest[2] << 24) | ((uint64_t)headers.etherHeader->h_dest[3] << 16) | ((uint64_t)headers.etherHeader->h_dest[4] << 8) | ((uint64_t)headers.etherHeader->h_dest[5] << 0)) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 ETHER_PROTOCOL() { return headers.etherHeader ? ntohs(headers.etherHeader->h_proto) : 0; }

  inline __attribute__((always_inline))
  SPL::list<uint16> VLAN_TAGS() { return (headers.convertVlanTagsToList()); }  

  inline __attribute__((always_inline))
  SPL::uint8 IP_VERSION() { return headers.ipv4Header ? headers.ipv4Header->version : ( headers.ipv6Header ? headers.ipv6Header->ip6_vfc>>4 : 0 ); }

  inline __attribute__((always_inline))
  SPL::uint8 IP_PROTOCOL() { return headers.ipv4Header ? headers.ipv4Header->protocol : ( headers.ipv6Header ? headers.ipv6Header->ip6_nxt : 0 ); }

  inline __attribute__((always_inline))
  SPL::uint32 IPV4_SRC_ADDRESS() { return headers.ipv4Header ? ntohl(headers.ipv4Header->saddr) : 0; }

  inline __attribute__((always_inline))
  SPL::uint32 IPV4_DST_ADDRESS() { return headers.ipv4Header ? ntohl(headers.ipv4Header->daddr) : 0; }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> IPV6_SRC_ADDRESS() { return headers.ipv6Header ? SPL::list<SPL::uint8>(headers.ipv6Header->ip6_src.s6_addr, headers.ipv6Header->ip6_src.s6_addr+sizeof(headers.ipv6Header->ip6_src.s6_addr)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> IPV6_DST_ADDRESS() { return headers.ipv6Header ? SPL::list<SPL::uint8>(headers.ipv6Header->ip6_dst.s6_addr, headers.ipv6Header->ip6_dst.s6_addr+sizeof(headers.ipv6Header->ip6_dst.s6_addr)) : SPL::list<uint8>(); }

  inline __attribute__((always_inline))
  SPL::boolean UDP_PORT(SPL::uint16 port) { return headers.udpHeader ? ( ntohs(headers.udpHeader->source)==port || ntohs(headers.udpHeader->dest)==port ) : false; }

  inline __attribute__((always_inline))
  SPL::uint16 UDP_SRC_PORT() { return headers.udpHeader ? ntohs(headers.udpHeader->source) : 0; }

  inline __attribute__((always_inline))
  SPL::uint16 UDP_DST_PORT() { return headers.udpHeader ? ntohs(headers.udpHeader->dest) : 0; }

  inline __attribute__((always_inline))
  SPL::boolean parseError() { return parser.error ? true : false; }

  inline __attribute__((always_inline))
  SPL::int32 parseErrorCode() { return parser.error; }

  inline __attribute__((always_inline))
  SPL::rstring parseErrorDescription() { return parser.errorDescriptions.description[parser.error]; }

  inline __attribute__((always_inline))
  SPL::uint32 parseErrorOffset() { return parser.error ? ( parser.dnsPointer - parser.dnsStart ) : 0; }

  inline __attribute__((always_inline))
  SPL::uint16 DNS_IDENTIFIER() { return ntohs(parser.dnsHeader->identifier); }

  inline __attribute__((always_inline))
  SPL::uint8 DNS_OPCODE() { return parser.dnsHeader->flags.indFlags.opcodeField; }

  inline __attribute__((always_inline))
  SPL::uint8 DNS_RESPONSE_CODE() { return parser.dnsHeader->flags.indFlags.responseCode; }

  inline __attribute__((always_inline))
  SPL::boolean DNS_RESPONSE_FLAG() { return parser.dnsHeader->flags.indFlags.responseFlag; }

  inline __attribute__((always_inline))
  SPL::boolean DNS_AUTHORITATIVE_FLAG() { return parser.dnsHeader->flags.indFlags.authoritativeFlag; }

  inline __attribute__((always_inline))
  SPL::boolean DNS_TRUNCATION_FLAG() { return parser.dnsHeader->flags.indFlags.truncatedFlag; }
  
  inline __attribute__((always_inline))
  SPL::uint16 DNS_ALL_FLAGS() { return ntohs(parser.dnsHeader->flags.allFlags); }
  
  inline __attribute__((always_inline))
  SPL::uint16 DNS_QUESTION_COUNT() { return parser.questionCount; }

  inline __attribute__((always_inline))
  SPL::rstring DNS_QUESTION_NAME() { return parser.questionRecordCount>0 ? parser.convertDNSEncodedNameToString(parser.questionRecords[0].name) : ""; }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_QUESTION_NAMES() { return parser.convertResourceNamesToStringList(parser.questionRecords, parser.questionRecordCount); }

  inline __attribute__((always_inline))
  SPL::uint16 DNS_QUESTION_TYPE() { return parser.questionRecordCount>0 ? parser.questionRecords[0].type : 0; }

  inline __attribute__((always_inline))
  SPL::list<uint16> DNS_QUESTION_TYPES() { return parser.convertResourceTypesToIntegerList(parser.questionRecords, parser.questionRecordCount); }

  inline __attribute__((always_inline))
  SPL::uint16 DNS_QUESTION_CLASS() { return parser.questionRecordCount>0 ? parser.questionRecords[0].classs : 0; }

  inline __attribute__((always_inline))
  SPL::list<uint16> DNS_QUESTION_CLASSES() { return parser.convertResourceClassesToIntegerList(parser.questionRecords, parser.questionRecordCount); }

  inline __attribute__((always_inline))
  SPL::uint16 DNS_ANSWER_COUNT() { return parser.answerCount; }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_ANSWER_NAMES() { return parser.convertResourceNamesToStringList(parser.answerRecords, parser.answerRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint16> DNS_ANSWER_TYPES() { return parser.convertResourceTypesToIntegerList(parser.answerRecords, parser.answerRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint16> DNS_ANSWER_CLASSES() { return parser.convertResourceClassesToIntegerList(parser.answerRecords, parser.answerRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint32> DNS_ANSWER_TTLS() { return parser.convertResourceTTLsToIntegerList(parser.answerRecords, parser.answerRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_ANSWER_DATA() { return parser.convertResourceDataToStringList(parser.answerRecords, parser.answerRecordCount); }

  inline __attribute__((always_inline))
  SPL::rstring DNS_ANSWER_CANONICAL() { return parser.canonicalRecordCount>0 ? parser.convertResourceDataToString(parser.canonicalRecords[0]) : ""; }

  inline __attribute__((always_inline))
  SPL::rstring DNS_ANSWER_ADDRESS() { return parser.addressRecordCount>0 ? parser.convertResourceDataToString(parser.addressRecords[0]) : ""; }

  inline __attribute__((always_inline))
  SPL::uint32 DNS_ANSWER_IPV4_ADDRESS() { return parser.addressRecordCount>0 && parser.addressRecords[0].type==1 ? ntohl(*((uint32*)parser.addressRecords[0].rdata)) : 0; }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint8> DNS_ANSWER_IPV6_ADDRESS() { return parser.addressRecordCount>0 && parser.addressRecords[0].type==28 ? SPL::list<SPL::uint8>(parser.addressRecords[0].rdata,parser.addressRecords[0].rdata+16) : SPL::list<SPL::uint8>(); }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_ANSWER_ADDRESSES() { return parser.convertResourceDataToStringList(parser.addressRecords, parser.addressRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<SPL::uint32> DNS_ANSWER_IPV4_ADDRESSES() { return parser.convertResourceDataToIPv4AddressList(parser.addressRecords, parser.addressRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<SPL::list<SPL::uint8> > DNS_ANSWER_IPV6_ADDRESSES() { return parser.convertResourceDataToIPv6AddressList(parser.addressRecords, parser.addressRecordCount); }

  inline __attribute__((always_inline))
  SPL::uint16 DNS_NAMESERVER_COUNT() { return parser.nameserverCount; }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_NAMESERVER_NAMES() { return parser.convertResourceNamesToStringList(parser.nameserverRecords, parser.nameserverRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint16> DNS_NAMESERVER_TYPES() { return parser.convertResourceTypesToIntegerList(parser.nameserverRecords, parser.nameserverRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint16> DNS_NAMESERVER_CLASSES() { return parser.convertResourceClassesToIntegerList(parser.nameserverRecords, parser.nameserverRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint32> DNS_NAMESERVER_TTLS() { return parser.convertResourceTTLsToIntegerList(parser.nameserverRecords, parser.nameserverRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_NAMESERVER_DATA() { return parser.convertResourceDataToStringList(parser.nameserverRecords, parser.nameserverRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_NAMESERVER_DATA(SPL::rstring fieldDelimiter) { return parser.convertResourceDataToStringList(parser.nameserverRecords, parser.nameserverRecordCount, fieldDelimiter); }

  inline __attribute__((always_inline))
  SPL::uint16 DNS_ADDITIONAL_COUNT() { return parser.additionalCount; }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_ADDITIONAL_NAMES() { return parser.convertResourceNamesToStringList(parser.additionalRecords, parser.additionalRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint16> DNS_ADDITIONAL_TYPES() { return parser.convertResourceTypesToIntegerList(parser.additionalRecords, parser.additionalRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint16> DNS_ADDITIONAL_CLASSES() { return parser.convertResourceClassesToIntegerList(parser.additionalRecords, parser.additionalRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<uint32> DNS_ADDITIONAL_TTLS() { return parser.convertResourceTTLsToIntegerList(parser.additionalRecords, parser.additionalRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_ADDITIONAL_DATA() { return parser.convertResourceDataToStringList(parser.additionalRecords, parser.additionalRecordCount); }

  inline __attribute__((always_inline))
  SPL::list<rstring> DNS_ADDITIONAL_DATA(SPL::rstring fieldDelimiter) { return parser.convertResourceDataToStringList(parser.additionalRecords, parser.additionalRecordCount, fieldDelimiter); }

  inline __attribute__((always_inline))
  SPL::rstring DNS_ALL_FIELDS(SPL::rstring recordDelimiter, SPL::rstring fieldDelimiter, SPL::rstring subfieldDelimiter) { SPL::list<SPL::uint16> empty = SPL::list<SPL::uint16>(); return flattener.dnsAllFields( (double)pcapHeader->ts.tv_sec + ((double)pcapHeader->ts.tv_usec)/1000000.0, pcapHeader->len, headers, parser, recordDelimiter.c_str(), fieldDelimiter.c_str(), subfieldDelimiter.c_str(), empty); }

  inline __attribute__((always_inline))
  SPL::rstring DNS_ALL_FIELDS(SPL::rstring recordDelimiter, SPL::rstring fieldDelimiter, SPL::rstring subfieldDelimiter, SPL::list<SPL::uint16> rrTypes) { return flattener.dnsAllFields( (double)pcapHeader->ts.tv_sec + ((double)pcapHeader->ts.tv_usec)/1000000.0, pcapHeader->len, headers, parser, recordDelimiter.c_str(), fieldDelimiter.c_str(), subfieldDelimiter.c_str(), rrTypes); }

  inline __attribute__((always_inline))
  SPL::int32 DNS_INCOMPATIBLE_FLAGS() { return parser.incompatibleFlags(); }



  // ------------------------------------------------------------------------------------------

};



<%SPL::CodeGen::headerEpilogue($model);%>
