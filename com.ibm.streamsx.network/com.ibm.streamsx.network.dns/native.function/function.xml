<?xml version="1.0" encoding="ASCII"?>
<function:functionModel xmlns:function="http://www.ibm.com/xmlns/prod/streams/spl/function">



  <function:functionSet>
    <function:headerFileName></function:headerFileName>
    <function:cppNamespaceName>common_result_functions</function:cppNamespaceName>
    <function:functions>

      <function:function>
        <function:description>
          This DNS parser result function returns `true` if an encoding error was detected while decoding the current packet,
          or `false` otherwise. Note that a value of `false` does not necessarily mean the packet has
          no encoding errors, since the operator only decodes the fields needed.
        </function:description>
        <function:prototype>public boolean parseError()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This DNS parser result function returns a non-zero integer to indicate that an encoding error was found while decoding the current packet,
          or zero if no enoding errors were found. The error codes are:

          * 102 for 'label overruns packet': The length of an uncompressed domain name label extends beyond the end of the DNS message. The packet containing the DNS message may have been truncated.

          * 103 for 'label compression length overruns packet': The length field of a compressed domain name label extends beyond the end of the DNS message. The packet containing the DNS message may have been truncated.

          * 104 for 'label compression offset underruns packet': The offset of a compressed domain name label points before the beginning of the DNS message. The sender misencoded the DNS message.

          * 105 for 'label compression offset overruns packet': The offset of a compressed domain name label points beyond the end of the DNS message. The packet containing the DNS message may have been truncated.

          * 106 for 'label compression offset loop': The offset of a compressed domain name label points to itself. The sender misencoded the DNS message.

          * 107 for 'label flags invalid': The flag field of a compressed domain name label is invalid. The sender misencoded the DNS message.

          * 108 for 'label limit exceeded': A compressed domain name contains too many labels. The sender misencoded the DNS message.

          * 110 for 'resource record missing': The DNS message contains fewer resource records than the 'count' fields in the message header indicate. The DNS message may have been truncated.

          * 111 for 'question resource record truncated': The DNS 'question' resource record was truncated. The packet containing the message was probably truncated.

          * 112 for 'resource record truncated': A DNS resouerce record was truncated. The packet containing the DNS message was probably truncated.

          * 113 for 'resource record data truncated': The 'rdata' field of a DNS resouerce record was truncated. The packet containing the DNS message was probably truncated.

          * 114 for 'invalid address family': The 'class' field of a DNS resource record was neither 'AF_INET' nor 'AF_INET6' (meaning IP version 4 or IP version 6, respectively).

          * 116 for 'message too short': The DNS message is shorter than the length of the DNS heaer. The packet containing the message was probably truncated.

          * 117 for 'counts too large': A 'count' field in the DNS message header is larger than the maximum supported. The sender probably misencoded the DNS message.

          * 118 for 'text string overruns resource record': The text string length in a DNS 'TXT' resoure record is larger than the record's data field. The sender probably misencoded the DNS message.

          *Note:* [https://www.ietf.org/rfc/rfc1035.txt|RFC 1035] explains the format of DNS messages; 
          in particular, section 4.1.4 explains the format of compressed domain names in DNS messages.
        </function:description>
        <function:prototype>public int32 parseErrorCode()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This DNS parser result function returns a description of an encoding error found while decoding the current packet,
          or an empty string if no enoding errors were found.
        </function:description>
        <function:prototype>public rstring parseErrorDescription()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This DNS parser result function returns the offset from the beginning of the message to the encoding error found,
          or zero if no encoding errors were found.
        </function:description>
        <function:prototype>public uint32 parseErrorOffset()</function:prototype>
      </function:function>

    </function:functions>
  </function:functionSet>



  <function:functionSet>
    <function:headerFileName></function:headerFileName>
    <function:cppNamespaceName>DNSPacketSource_result_functions</function:cppNamespaceName>
    <function:functions>

          <function:function>
            <function:description>

This function returns the number of packets received from the network interface
since the operator started, as of the most recent metrics interval, if there is one, or zero if not.
This function always returns zero for the DNSPacketFileSource operator.

            </function:description>
            <function:prototype>public uint64 packetsReceived()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of packets dropped by the network interface
since the operator started, as of the most recent metrics interval, if there is one, or zero if not.
This function always returns zero for the DNSPacketFileSource operator.

            </function:description>
            <function:prototype>public uint64 packetsDropped()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of bytes received from the network interface
since the operator started, as of the most recent metrics interval, if there is one, or zero if not.
This function always returns zero for the DNSPacketLiveSource and DNSPacketFileSource operators.

            </function:description>
            <function:prototype>public uint64 bytesReceived()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of packets received from the network interface 
during the most recent metrics interval, if there is one, or zero if not.
This function always returns zero for the DNSPacketFileSource operator.

            </function:description>
            <function:prototype>public uint64 metricsIntervalPacketsReceived()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of packets dropped by the network interface
during the most recent metrics interval, if there is one, or zero if not.
This function always returns zero for the DNSPacketFileSource operator.

            </function:description>
            <function:prototype>public uint64 metricsIntervalPacketsDropped()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of bytes received from the network interface 
during the most recent metrics interval, if there is one, or zero if not.
This function always returns zero for the DNSPacketLiveSource and DNSPacketFileSource operators.

            </function:description>
            <function:prototype>public uint64 metricsIntervalBytesReceived()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of network packets processed by the operator since it started,
including the current packet, but excluding any packets that were ignored by the input filter,
if the `inputFilter` parameter was specified.

            </function:description>
            <function:prototype>public uint64 packetsProcessed()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the number of bytes of network data processed by the operator since it started,
including the current packet, excluding any packets that were ignored by the input filter,
if the `inputFilter` parameter was specified.

            </function:description>
            <function:prototype>public uint64 bytesProcessed()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the duration of the most recent metrics interval,
in seconds with a resolution of at least microseconds,
if there is one, or zero if not. 

            </function:description>
            <function:prototype>public float64 metricsIntervalElapsed()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of network packets processed by the operator during the most recent
metrics interval,
excluding any packets that were ignored by the input filter,
if the `inputFilter` parameter was specified.

            </function:description>
            <function:prototype>public uint64 metricsIntervalPacketsProcessed()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of bytes of network data processed by the operator during the most recent
metrics interval,
excluding any packets that were ignored by the input filter,
if the `inputFilter` parameter was specified.

            </function:description>
            <function:prototype>public uint64 metricsIntervalBytesProcessed()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns `true` for the first tuple produced after a new metrics interval begins,
and returns `false` for all subsequent tuples produced in the same metrics interval.

            </function:description>
            <function:prototype>public boolean metricsUpdated()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of seconds since the beginning of the Unix epoch
(midnight on January 1st, 1970 in Greenwich, England) until the current packet was captured,
according to the system clock on the machine that captured it.

            </function:description>
            <function:prototype>public uint32 CAPTURE_SECONDS()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the number of microseconds since the value of the CAPTURE_SECONDS() function
until the current packet was captured,
according to the system clock on the machine that captured it.

            </function:description>
            <function:prototype>public uint32 CAPTURE_MICROSECONDS()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the value of the machine's timestamp counter when the packet was 
captured, that is, the number of microseconds since the machine was booted. Note that 
unlike the CAPTURE_SECONDS() and CAPTURE_MICROSECONDS() functions, this function's value 
is not relative to the Unix 'epoch'.

            </function:description>
            <function:prototype>public uint64 CAPTURE_TSC_MICROSECONDS()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the number of bytes of network data in the current packet,
including all network headers.
Note that this value may be larger than the length of the
binary data returned by the `PACKET_DATA()` function
if the packet was truncated when it was captured.

            </function:description>
            <function:prototype>public uint32 PACKET_LENGTH()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the network data in the current packet,
including all network headers.
Note that the data may have been truncated when the packet was captured.

            </function:description>
            <function:prototype>public blob PACKET_DATA()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the number of bytes of payload data in the current packet,
excluding all network headers.
Note that this value may be larger than the length of the binary data returned by
the `PAYLOAD_DATA()` function if the
packet was truncated when it was captured.

            </function:description>
            <function:prototype>public uint32 PAYLOAD_LENGTH()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the payload data in the current packet,
excluding all network headers.
Note that the data may have been truncated when the packet was captured.

            </function:description>
            <function:prototype>public blob PAYLOAD_DATA()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns the ethernet source address of the current packet.

            </function:description>
            <function:prototype>public list&lt;uint8>[6] ETHER_SRC_ADDRESS()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the ethernet destination address of the current packet.

            </function:description>
            <function:prototype>public list&lt;uint8>[6] ETHER_DST_ADDRESS()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the ethernet protocol (that is, the EtherType) of the
current packet, for example, '2048' for IP version 4, or '34,525' for IP version 6.

            </function:description>
            <function:prototype>public uint16 ETHER_PROTOCOL()</function:prototype>
          </function:function>

          <function:function>
            <function:description>

This function returns a list of 0 to N VLAN tags found in the current packet.

            </function:description>
            <function:prototype>public list&lt;uint16> VLAN_TAGS()</function:prototype>
          </function:function>          



          <function:function>
            <function:description>

This function returns the IP version of the current packet
('4' for IP version 4, or '6' for IP version 6), 
if the ethernet packet contains an IP packet, or zero otherwise.

            </function:description>
            <function:prototype>public uint8 IP_VERSION()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the IP protocol of the current packet,
for example, '6' for TCP, or '17' for UDP,
or zero if the ethernet packet does not contain an IP packet.

            </function:description>
            <function:prototype>public uint8 IP_PROTOCOL()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the IP version 4 source address of the current packet,
if it has one, or zero otherwise.

            </function:description>
            <function:prototype>public uint32 IPV4_SRC_ADDRESS()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the IP version 4 destination address of the current packet,
if it has one, or zero otherwise.

            </function:description>
            <function:prototype>public uint32 IPV4_DST_ADDRESS()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the IP version 6 source address of the current packet,
if it has one, or an empty list otherwise.

            </function:description>
            <function:prototype>public list&lt;uint8>[16] IPV6_SRC_ADDRESS()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the IP version 6 destination address of the current packet,
if it has one, or an empty list otherwise.

            </function:description>
            <function:prototype>public list&lt;uint8>[16] IPV6_DST_ADDRESS()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns `true` if the current packet is a UDP packet
and the argument matches its source or destination port,
or `false` otherwise.

            </function:description>
            <function:prototype>public boolean UDP_PORT(uint16)</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the UDP source port number of the current packet, 
if it has one, or zero otherwise.

            </function:description>
            <function:prototype>public uint16 UDP_SRC_PORT()</function:prototype>
          </function:function>
          <function:function>
            <function:description>

This function returns the UDP destination port number of the current packet, 
if it has one, or zero otherwise.

            </function:description>
            <function:prototype>public uint16 UDP_DST_PORT()</function:prototype>
          </function:function>

      <function:function>
        <function:description>
          This parser result function returns the DNS client's request correlator in the current message, and returned by the server in its response.
        </function:description>
        <function:prototype>public uint16 DNS_IDENTIFIER()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the operation code requested by the DNS client in the current message, for example,

          * '1' for standard queries, 
          * '2' for inverse queries, or
          * '3' for server status requests.
        </function:description>
        <function:prototype>public uint8 DNS_OPCODE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the response code from the DNS server in the current message, for example,

          * '0' for OK, 
          * '1' for Format Error, 
          * '2' for Server Failure, 
          * '3' for Name Error, 
          * '4' for not implemented, or
          * '5' for Server Refused.
        </function:description>
        <function:prototype>public uint8 DNS_RESPONSE_CODE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns `true` if the current message is a response sent by a DNS server,
          or `false` if it is a request sent by a DNS client.
        </function:description>
        <function:prototype>public boolean DNS_RESPONSE_FLAG()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns `true` if the 'authoritative' flag is set in the current message, 
          or `false` if not.
        </function:description>
        <function:prototype>public boolean DNS_AUTHORITATIVE_FLAG()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns `true` if the 'truncation' flag is set in the current message, 
          or `false` if not.
        </function:description>
        <function:prototype>public boolean DNS_TRUNCATION_FLAG()</function:prototype>
      </function:function>
      
      <function:function>
        <function:description>
          This parser result function returns a 16-bit value containing all of the DNS header flags from the current message.
          The value is in host byte order, so, for example, 
          `DNS_ALL_FLAGS()&amp; 0x8000 == 0x8000` has the same value as DNS_RESPONSE_FLAG(), 
          `DNS_ALL_FLAGS() >> 11 &amp; 0x000F` has the same value as DNS_OPCODE(), and
          `DNS_ALL_FLAGS() &amp; 0x000F` has the same value as DNS_RESPONSE_CODE().
         </function:description>
        <function:prototype>public uint16 DNS_ALL_FLAGS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the number of 'question' resource records in the current message.
        </function:description>
        <function:prototype>public uint16 DNS_QUESTION_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the 'name' field of the first 'question' resource record in the current message,
          if there is one, or an empty string if not.
          Note that if the DNS message does contain a 'question'
          resource record, and the name is encoded incorrecty, this function may
          return an empty or truncated string.  In this case, the `parseError()`
          function will return `true`.
        </function:description>
        <function:prototype>public rstring DNS_QUESTION_NAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'name' fields in the 'question' resource records in the current message.
          Note that if any of the names are encoded
          incorrectly, this function may return an empty or truncated list, and
          some or all of the names may be empty or truncated. In this case, the
          `parseError()` function will return `true`.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_QUESTION_NAMES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the 'type' field of the first 'question' resource record in the current message,
          for example:

          * '1' for IP version 4 address to domain name lookup ('A' records),
          * '5' for domain name to canonical domain name lookup ('CNAME' records),
          * '12' for domain name to IP address lookup ('TXT' records), or
          * '28' for IP version 6 address to domain name lookup ('AAAA' records).
        </function:description>
        <function:prototype>public uint16 DNS_QUESTION_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'type' fields in the 'question' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint16> DNS_QUESTION_TYPES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the 'class' field of the first 'question' resource record in the current message,
          for example, '1' for Internet adddresses ('IN' records),
        </function:description>
        <function:prototype>public uint16 DNS_QUESTION_CLASS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'class' fields in the 'question' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint16> DNS_QUESTION_CLASSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the number of 'answer' resource records in the current message.
        </function:description>
        <function:prototype>public uint16 DNS_ANSWER_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'name' fields in the 'answer' resource records in the current message.
          Note that if any of the names are encoded
          incorrectly, this function may return an empty or truncated list, and
          some or all of the names may be empty or truncated. In this case, the
          `parseError()` function will return `true`.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_ANSWER_NAMES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'type' fields in the 'answer' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint16> DNS_ANSWER_TYPES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'class' fields in the 'answer' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint16> DNS_ANSWER_CLASSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'time to live' fields in the 'answer' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint32> DNS_ANSWER_TTLS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'data' fields in the 'answer' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_ANSWER_DATA()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the 'data' field of the first 'answer' resource record,
          if there is one with
          a 'type' value of '5' (meaning, the answer is a canonical domain name from a type 'CNAME' record),
          or an empty string if not.
        </function:description>
        <function:prototype>public rstring DNS_ANSWER_CANONICAL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the 'data' field of the first 'answer' resource record,
          if there is one with a 'type' value 
          of '1' or '28' (meaning, the answer is an IP version 4 or version 6 address from a type 'A' or 'AAAA' record, respectively),
          as a string value,
          or an empty string if not.
        </function:description>
        <function:prototype>public rstring DNS_ANSWER_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the 'data' field of the first 'answer' resource record, if 
          there is one with a
          'type' value of '1' (meaning, the answer is an IP version 4 address from a type 'A' record),
          as a binary value,
          or zero if not.
        </function:description>
        <function:prototype>public uint32 DNS_ANSWER_IPV4_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the 'data' field of the first 'answer' resource record, if 
          there is one with a 
          'type' value of '28' (meaning, the answer is an IP version 6 address from a type 'AAAA' record),
          as a binary value,
          or zero if not.
        </function:description>
        <function:prototype>public list&lt;uint8>[16] DNS_ANSWER_IPV6_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'data' fields in the 'answer' resource records 
          that have a 'type' value of 
          '1' or '28' (meaning, the answer is an IP version 4 or version 6 address from a type 'A' or 'AAAA' record, respectively),
          as string values.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_ANSWER_ADDRESSES()</function:prototype>
      </function:function>


      <function:function>
        <function:description>
          This parser result function returns the 'data' fields of the 'answer' resource records that have 
          'type' values of '1' (meaning, the answers are IP version 4 addresses from type 'A' records),
          as a list of binary values.
        </function:description>
        <function:prototype>public list&lt;uint32> DNS_ANSWER_IPV4_ADDRESSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the 'data' fields of the 'answer' resource records that have 
          'type' values of '28' (meaning, the answers IP version 6 addresses from type 'AAAA' records),
          as a binary values.
        </function:description>
        <function:prototype>public list&lt;list&lt;uint8>[16]> DNS_ANSWER_IPV6_ADDRESSES()</function:prototype>
      </function:function>


      <function:function>
        <function:description>
          This parser result function returns the number of 'name server' resource records in the current message.
        </function:description>
        <function:prototype>public uint16 DNS_NAMESERVER_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'name' fields in the 'name server' resource records in the current message.
          Note that if any of the names are encoded
          incorrectly, this function may return an empty or truncated list, and
          some or all of the names may be empty or truncated. In this case, the
          `parseError()` function will return `true`.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_NAMESERVER_NAMES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'type' fields in the 'name server' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint16> DNS_NAMESERVER_TYPES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'class' fields in the 'name server' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint16> DNS_NAMESERVER_CLASSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'time to live' fields in the 'name server' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint32> DNS_NAMESERVER_TTLS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'data' fields in the 'name server' resource records in the current message.
          For resource records containing multiple fields, such as SOA records, only the first field is returned.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_NAMESERVER_DATA()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'data' fields in the 'name server' resource records in the current message.
          For resource records containing multiple fields, such as SOA records, all fields are returned, in order, 
          separated by the string specified as the function's argument.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_NAMESERVER_DATA(rstring)</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns the number of 'additional' resource records in the current message.
        </function:description>
        <function:prototype>public uint16 DNS_ADDITIONAL_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'name' fields in the 'additional' resource records in the current message.
          Note that if any of the names are encoded
          incorrectly, this function may return an empty or truncated list, and
          some or all of the names may be empty or truncated. In this case, the
          `parseError()` function will return `true`.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_ADDITIONAL_NAMES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'type' fields in the 'additional' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint16> DNS_ADDITIONAL_TYPES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'class' fields in the 'additional' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint16> DNS_ADDITIONAL_CLASSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'time to live' fields in the 'additional' resource records in the current message.
        </function:description>
        <function:prototype>public list&lt;uint32> DNS_ADDITIONAL_TTLS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'data' fields in the 'additional' resource records in the current message.
          For resource records containing multiple fields, such as SOA records, only the first field is returned.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_ADDITIONAL_DATA()</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a list of the 'data' fields in the 'additional' resource records in the current message.
          For resource records containing multiple fields, such as SOA records, all fields are returned, in the order, 
          separated by the string specified as the function's argument.
        </function:description>
        <function:prototype>public list&lt;rstring> DNS_ADDITIONAL_DATA(rstring)</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a string containing 'flattened' representation
          of the DNS packet, including selected fields from the IP and UDP headers, all 
          fields from the DNS header, and all fields from all DNS resource records, 
          represented as appropriate, separated by the specified
          record and field delimiters, and for SOA resource records, 
          a subfield delimiter.
        </function:description>
        <function:prototype>public rstring DNS_ALL_FIELDS(rstring, rstring, rstring)</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This parser result function returns a string containing 'flattened' representation
          of the DNS packet, including selected fields from the IP and UDP headers, all 
          fields from the DNS header, and all fields from seleccted DNS resource records, 
          represented as appropriate, separated by the specified
          record and field delimiters, and for SOA resource records, 
          a subfield delimiter. DNS resource records are selected by specifying DNS types in a list of unsigned 16-bit integers as the fourth parameter of the function.
        </function:description>
        <function:prototype>public rstring DNS_ALL_FIELDS(rstring, rstring, rstring, list&lt;uint16>)</function:prototype>
      </function:function>

      <function:function>
        <function:description>
          This DNS parser result function returns a non-zero integer to indicate that an encoding error was found while decoding the current packet,
          or zero if no enoding errors were found. The error codes are:

          * 1 indicates that the Authoritative flag is set in the DNS header but the Response flag is not set.

          * 2 indicates that the Truncated flag is set in the DNS header but not the Response flag is not set.

          * 3 indicates that the Authoritative and Truncated flags in the DNS header are both set.

          * 4 indicates that the Authoritative, Truncated, Recursion Desired, and Recursion Available flags in the DNS header are all set.
        </function:description>
        <function:prototype>public int32 DNS_INCOMPATIBLE_FLAGS()</function:prototype>
      </function:function>

    </function:functions>
  </function:functionSet>



</function:functionModel>
