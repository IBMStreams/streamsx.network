/*******************************************************************************
 * Copyright (C) 2016, International Business Machines Corporation
 * All Rights Reserved
 *******************************************************************************/
/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

// Constructor
MY_OPERATOR::MY_OPERATOR()
{ 
    // Initialization code goes here
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    // Finalization code goes here
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    // Notifies that all ports are ready. No tuples should be submitted before
    // this. Source operators can use this method to spawn threads.

    /*
      createThreads(1); // Create source thread
    */
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    // This is an asynchronous call
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
    // A typical implementation will loop until shutdown
    /*
      while(!getPE().getShutdownRequested()) {
          // do work ...
      }
    */
}

int16_t  MY_OPERATOR::MuLaw_Decode(int8_t number)
{
   const uint16_t MULAW_BIAS = 33;
   uint8_t sign = 0, position = 0;
   int16_t decoded = 0;
   number = ~number;
   if (number & 0x80)
   {
      number &= ~(1 << 7);
      sign = -1;
   }
   position = ((number & 0xF0) >> 4) + 5;
   decoded = ((1 << position) | ((number & 0x0F) << (position - 4))
             | (1 << (position - 5))) - MULAW_BIAS;
   return (sign == 0) ? (decoded) : (-(decoded));
} 

unsigned int MY_OPERATOR::getNumberOfSamples(unsigned int length){
    return length;
}

SPL::blob MY_OPERATOR::getPcmPayload(unsigned char * decompressed, unsigned int length){
    return blob(decompressed, length * sizeof(int16_t));
}

// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{ 
	<% 
	my $inputPort = $model->getInputPortAt(0);
	my $inputTuple = $inputPort->getCppTupleName();
	%>
	IPort0Type const & <%=$inputTuple%> = static_cast<IPort0Type const&> (tuple); 

	char * incomingPayload = (char *)<%=$inputTuple%>.get_payload().getData(); 
	unsigned char * decompressed = (unsigned char *)malloc(5000);  
   
	int length = <%=$inputTuple%>.get_payloadLength(); 
	for ( int i = 0; i < length; i++ ) 
	{  
	   int8_t oneByte = (int8_t)incomingPayload[i]; 	
	   int16_t twoBytes =  MuLaw_Decode(oneByte);         
	   *(int16_t *)(decompressed+(i*2)) = twoBytes;         
	}
	OPort0Type otuple;
	
    // Forward Tuples we have chosen
    <% 
      my $oport = $model->getOutputPortAt(0); 
      foreach my $attribute (@{$oport->getAttributes()}) { 
        my $name = $attribute->getName(); 
        my $operation = $attribute->getAssignmentOutputFunctionName();  
       
        if ($operation eq "AsIs") { 
        	
          my $init = $attribute->getAssignmentOutputFunctionParameterValueAt(0)->getCppExpression();%> 
          otuple.set_<%=$name%>(<%=$init%>); 
         <%} elsif ($operation eq "getPcmPayload") { %>
			otuple.set_<%=$name%>( 
			MY_OPERATOR::<%=$operation%>(decompressed, length)); 
         <%} elsif ($operation eq "getNumberOfSamples") { %>
         			otuple.set_<%=$name%>( 
         			MY_OPERATOR::<%=$operation%>(length));
         <%} else { %>
          	  otuple.set_<%=$name%>( 
          	  MY_OPERATOR::<%=$operation%>()); 
        <%}     
      }%> 
	
	submit(otuple, 0);
       free(decompressed);

}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    // Sample submit code
    /* 
      OPort0Type otuple;
      submit(otuple, 0); // submit to output port 0
    */
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
    /*
      if(punct==Punctuation::WindowMarker) {
        // ...;
      } else if(punct==Punctuation::FinalMarker) {
        // ...;
      }
    */
}

<%SPL::CodeGen::implementationEpilogue($model);%>

