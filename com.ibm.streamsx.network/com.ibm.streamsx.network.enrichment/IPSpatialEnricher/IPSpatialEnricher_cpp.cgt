<%
## Copyright (C) 2015  International Business Machines Corporation
## All Rights Reserved
%>

/* Additional includes go here */
#include <fstream>
#include <string>
#include <streams_boost/filesystem.hpp>
#include <streams_boost/tokenizer.hpp>
#include <streams_boost/token_iterator.hpp>
#include <streams_boost/algorithm/string/trim.hpp>
#include <streams_boost/algorithm/string/classification.hpp>
#include <streams_boost/lexical_cast.hpp>
#include <arpa/inet.h>

#define IP_SPATIAL "IP_SPATIAL"

<%
use IPSpatialEnricherCommon;
IPSpatialEnricherCommon::init($model);
IPSpatialEnricherCommon::validate($model);
%>

<%SPL::CodeGen::implementationPrologue($model);%>

using namespace SPL;
using namespace std;

#define MIN_BLOCKSFILE_FIELD_COUNT 9
#define LOCATIONFILE_FIELD_COUNT 13

#define BLOCKS_CAPACITY 3000000
#define LOCATION_HASHMAP_BUCKETS 800000

#define INVALID_LAT_LNG -999.99
#define DEFAULT_ID 0
#define DEFAULT_LOCALE "en"

#define IS_EQUAL_TO_IPV6(a,b) \
			((a[0] == b[0]) \
			&& (a[1] == b[1]) \
			&& (a[2] == b[2]) \
			&& (a[3] == b[3]))

#define	IS_LESS_THAN_IPV6(a,b) \
			((a[0] < b[0]) \
			|| (a[0] == b[0] && a[1] < b[1]) \
			|| (a[0] == b[0] && a[1] == b[1] && a[2] < b[2]) \
			|| (a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] < b[3]))

#define	IS_GREATER_THAN_IPV6(a,b) \
			((a[0] > b[0]) \
			|| (a[0] == b[0] && a[1] > b[1]) \
			|| (a[0] == b[0] && a[1] == b[1] && a[2] > b[2]) \
			|| (a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] > b[3]))

#define ntohl6(a) \
{ \
	a[0] = ntohl(a[0]); \
	a[1] = ntohl(a[1]); \
	a[2] = ntohl(a[2]); \
	a[3] = ntohl(a[3]); \
}

#define htonl6(a) \
{ \
	a[0] = htonl(a[0]); \
	a[1] = htonl(a[1]); \
	a[2] = htonl(a[2]); \
	a[3] = htonl(a[3]); \
}

static bool sortIPv6(MY_OPERATOR::blocks_record_t br1, MY_OPERATOR::blocks_record_t br2)
{
	// if startIP1 == startIP2, check end IP
	if(IS_EQUAL_TO_IPV6(br1.start_ip, br2.start_ip))
		if(IS_EQUAL_TO_IPV6(br1.end_ip, br2.end_ip))
			return false; // IP range is identical
		else
			return IS_LESS_THAN_IPV6(br1.end_ip, br2.end_ip); 		
	else
		return IS_LESS_THAN_IPV6(br1.start_ip, br2.start_ip);
}

static bool sortIPv4(MY_OPERATOR::blocks_record_t br1, MY_OPERATOR::blocks_record_t br2)
{
	if(br1.start_ip[0] == br2.start_ip[0])
		if(br1.end_ip[0] == br2.end_ip[0])
			return false; // IP range is identical
		else
			return br1.end_ip[0] < br2.end_ip[0];
	else
		return br1.start_ip[0] < br2.start_ip[0];
}

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
	blocks4List_ = new BlocksList();
	blocks6List_ = new BlocksList();
	locationTable_ = new LocationTable(LOCATION_HASHMAP_BUCKETS);
	
	blocks4List_->reserve(BLOCKS_CAPACITY);
	blocks6List_->reserve(BLOCKS_CAPACITY);
	
	<% if(defined $::blocksIPv4FileParam) {%>
		parseBlocksFile(<%=$::blocksIPv4FileParamCppValue%>, IPv4);
	<%}%>
	
	<% if(defined $::blocksIPv6FileParam) {%>
		parseBlocksFile(<%=$::blocksIPv6FileParamCppValue%>, IPv6);
	<%}%>
	
	<% if(defined $::locationFileParam) {%>
		parseLocationFile(<%=$::locationFileParamCppValue%>);
	<%}%>
	
	<% if(defined $::localeParam) {%>
		<%
			my $locale = $::localeParamCppValue;
			$locale =~ s/_/-/;
			$locale = "\"" . $locale . "\"";
		%>
		locale_ = <%=$locale%> ;
	<%} else {%>
		locale_ = DEFAULT_LOCALE;
	<%}%>
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
	delete blocks4List_;
	delete blocks6List_;
	delete locationTable_;
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    // Notifies that all ports are ready. No tuples should be submitted before
    // this. Source operators can use this method to spawn threads.

    /*
      createThreads(1); // Create source thread
    */ 
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    // This is an asynchronous call
}

  // Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
	Tuple const & t = tuple;
	process(t,port);
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    if(port == 0)
    {
    	<% if(defined $::baseCppOutputType) {%>
    	const IPort0Type & <%=$::inputPort0CppName%> = static_cast <IPort0Type>(tuple);
    	// enrich IP
		
		<%=$::outputAttributeCppType%> ipLocResults;
		<%=$::outputAttributeCppType%> regCountryResults;
		<%=$::outputAttributeCppType%> repCountryResults;
 
    	<% if($::isScalar) {%>
    		spatial_info_t ip_info = {};
			{
				AutoPortMutex am(mutex_, *this);
				lookupIP(<%=$::inputIPAttrParamCppValue%>, ip_info);
			}
			
//			cout << "ip=" << addrStr << ", geoname_id=" << ip_info.block_record.geoname_id << endl;
			
			blocks_record_t empty_record = {} ;
			
			<% if(defined $::usingIPLocationData) { %>
				getMaxMindLocation(ipLocResults, ip_info.ip_loc, ip_info.block_record);
			<%}%>
			
			<% if(defined $::usingRegCountryData) {%>
				getMaxMindLocation(regCountryResults, ip_info.reg_country_loc, empty_record);
			<%}%>
			
			<% if(defined $::usingRepCountryData) {%>
				getMaxMindLocation(repCountryResults, ip_info.rep_country_loc, empty_record);
			<%}%>
			
    	<%} elsif($::isVector) {%>  
    		<%=$::inputIPAttrParamCppType%>::iterator it;
    		<%=$::inputIPAttrParamCppType%> data = <%=$::inputIPAttrParamCppValue%>;
    		for(it = data.begin(); it != data.end(); ++it)
    		{ 
    			spatial_info_t ip_info = {};
    			{
					AutoPortMutex am(mutex_, *this);
					lookupIP(*it, ip_info);
				} 
    			
				blocks_record_t empty_record = {} ;
				<%=$::baseCppOutputType%> ipLocEntry;
				<%=$::baseCppOutputType%> regCountryEntry;
				<%=$::baseCppOutputType%> repCountryEntry;
				
				<% if(defined $::usingIPLocationData) { %>
					getMaxMindLocation(ipLocEntry, ip_info.ip_loc, ip_info.block_record);
					ipLocResults.push_back(ipLocEntry);
				<%}%>
				
				<% if(defined $::usingRegCountryData) {%>
					getMaxMindLocation(regCountryEntry, ip_info.reg_country_loc, empty_record);
					regCountryResults.push_back(regCountryEntry);
				<%}%>
				
				<% if(defined $::usingRepCountryData) {%>
					getMaxMindLocation(repCountryEntry, ip_info.rep_country_loc, empty_record);
					repCountryResults.push_back(repCountryEntry);
				<%}%>				
    		}
    		
    	<%} elsif($::isMatrix) {%>
    		<%=$::inputIPAttrParamCppType%>::iterator matrixIt;
    		<%=$::inputIPAttrParamCppType%> data = <%=$::inputIPAttrParamCppValue%>;
    		for(matrixIt = data.begin(); matrixIt != data.end(); ++matrixIt)
    		{
    			<%=$::outputAttributeCppType%>::value_type ipLocResultList;
    			<%=$::outputAttributeCppType%>::value_type regCountryResultList;
    			<%=$::outputAttributeCppType%>::value_type repCountryResultList;
    			<%=$::inputIPAttrParamCppType%>::value_type::iterator vectorIt;
    			for(vectorIt = (*matrixIt).begin(); vectorIt != (*matrixIt).end(); ++vectorIt)
    			{
    				spatial_info_t ip_info = {};
    				{
    					AutoPortMutex am(mutex_, *this);
						lookupIP(*vectorIt, ip_info);
    				}
    				
					blocks_record_t empty_record = {} ;
					<%=$::baseCppOutputType%> ipLocEntry;
					<%=$::baseCppOutputType%> regCountryEntry;
					<%=$::baseCppOutputType%> repCountryEntry;
					
					<% if(defined $::usingIPLocationData) { %>
						getMaxMindLocation(ipLocEntry, ip_info.ip_loc, ip_info.block_record);
						ipLocResultList.push_back(ipLocEntry);
					<%}%>
					
					<% if(defined $::usingRegCountryData) {%>
						getMaxMindLocation(regCountryEntry, ip_info.reg_country_loc, empty_record);
						regCountryResultList.push_back(regCountryEntry);
					<%}%>
					
					<% if(defined $::usingRepCountryData) {%>
						getMaxMindLocation(repCountryEntry, ip_info.rep_country_loc, empty_record);
						repCountryResultList.push_back(repCountryEntry);
					<%}%>
    			}
    			
    			ipLocResults.push_back(ipLocResultList);
    			regCountryResults.push_back(regCountryResultList);
    			repCountryResults.push_back(repCountryResultList);
    		}	
    	<%}%>
    	
        OPort0Type otuple;
    	<%  foreach my $attribute (@{ $::outputPort0->getAttributes()}) {
            my $name = $attribute->getName();
            my $operation = $attribute->getAssignmentOutputFunctionName();
            if ($operation eq "AsIs") {
                    my $init = $attribute->getAssignmentValue()->getCppExpression();%>
                    otuple.set_<%=$name%>(<%=$init%>);
            <%} elsif($operation eq "getIPLocationData") {%>
                    otuple.set_<%=$name%>(ipLocResults);
			<%} elsif($operation eq "getRegisteredCountryData") {%>
                    otuple.set_<%=$name%>(regCountryResultList);
			<%} elsif($operation eq "getRepresentedCountryData") {%>
                    otuple.set_<%=$name%>(repCountryResultList);                                        
            <%}%>
        <%}%>
	
		submit(otuple,0);
		<%}%> // baseCppOutputType
    }
    <% if(defined $::inputPort1) {%>
    else if(port == 1)
    {
    	const <%=$::inputPort1CppType%> & <%=$::inputPort1CppName%> = static_cast <<%=$::inputPort1CppType%>>(tuple);
    	
    	// regex to determine if incoming file is BLOCKS or LOCATION
    	streams_boost::filesystem::path filePath(<%=$::inputPort1CppName%>.get_<%=$::filenameAttribute%>());
		SPL::list<rstring> blocksMatch;
		
		// Blocks IPv4
		const rstring blocksIPv4Regex("^(GeoIP2|GeoLite2)-City-Blocks-IPv4.csv");
		blocksMatch = SPL::Functions::String::regexMatchPerl(filePath.filename().string(), blocksIPv4Regex);
		if(blocksMatch.size() > 1)
		{
			{
				AutoPortMutex am(mutex_, *this);
				blocks4List_->clear();
				parseBlocksFile(filePath.string(), IPv4);
			}
			
			return;
		}
		
		// Blocks IPv6
		const rstring blocksIPv6Regex("^(GeoIP2|GeoLite2)-City-Blocks-IPv6.csv");
		blocksMatch = SPL::Functions::String::regexMatchPerl(filePath.filename().string(), blocksIPv6Regex);
		if(blocksMatch.size() > 1) 
		{
			{
				AutoPortMutex am(mutex_, *this);
				blocks6List_->clear();
				parseBlocksFile(filePath.string(), IPv6);
			}
			
			return;
		}		
		
		// Location Regex
		const rstring locationRegex("^(GeoIP2|GeoLite2)-City-Locations-" + locale_ + ".csv");
		SPL::list<rstring> locationMatch = SPL::Functions::String::regexMatchPerl(filePath.filename().string(), locationRegex);
		
		if(locationMatch.size() > 1)
		{
			{
				AutoPortMutex am(mutex_, *this);
				locationTable_->clear();
				parseLocationFile(filePath.string());
			}

			return;
		}
    }
    <%}%>
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{

}

<% if(defined $::baseCppOutputType) {%>
void inline MY_OPERATOR::getMaxMindLocation(<%=$::baseCppOutputType%> &outputLoc, 
	location_record_t &loc_record, blocks_record_t &block_record)
{
	outputLoc.get_localeCode() = loc_record.locale_code;
	outputLoc.get_continentCode() = loc_record.continent_code;
	outputLoc.get_continentName() = loc_record.continent_name;
	outputLoc.get_countryISOCode() = loc_record.country_iso_code;
	outputLoc.get_countryName() = loc_record.country_name;
	outputLoc.get_subdivisionISOCode1() = loc_record.subdivision_iso_1;
	outputLoc.get_subdivisionISOName1() = loc_record.subdivision_name_1;
	outputLoc.get_subdivisionISOCode2() = loc_record.subdivision_iso_2;
	outputLoc.get_subdivisionISOName1() = loc_record.subdivision_name_1;
	outputLoc.get_cityName() = loc_record.city_name;
	outputLoc.get_metroCode() = loc_record.metro_code;
	outputLoc.get_timezone() = loc_record.timezone;
	outputLoc.get_postalCode() = (block_record.geoname_id == 0 ? "" : block_record.postal_code);
	outputLoc.get_latitude() = (block_record.geoname_id == 0 ? INVALID_LAT_LNG : block_record.latitude);
	outputLoc.get_longitude() = (block_record.geoname_id == 0 ? INVALID_LAT_LNG : block_record.longitude);		

}
<%}%>
 
void MY_OPERATOR::parseBlocksFile(rstring filename, protocol proto)
{
	rstring absPath = convertToAbsolutePath(filename);
	SPLAPPTRC(L_DEBUG, "Parsing " << proto << " blocks file: " << absPath << "'", IP_SPATIAL);
	
	// parse file and store in list
	ifstream blockFile;
	blockFile.open(absPath.c_str());
	std::string line;
	 
	typedef streams_boost::tokenizer<streams_boost::escaped_list_separator<char> > LineTokenizer;
	
	// skip processing the first line
	std::getline(blockFile, line);

	while(std::getline(blockFile, line))
	{
		LineTokenizer tokens(line);
		std::vector<string> lineTokens;
		for(LineTokenizer::iterator it = tokens.begin(); it != tokens.end(); ++it)
		{
			lineTokens.push_back(streams_boost::trim_copy_if(*it, streams_boost::is_any_of("\"")));
		}
		
		if(lineTokens.size() < MIN_BLOCKSFILE_FIELD_COUNT)
		{
			SPLAPPLOG(L_ERROR, "Number of fields in record is less than expected (found: " << lineTokens.size() << ", min_expected: " << MIN_BLOCKSFILE_FIELD_COUNT << ", line: " << line << ")", IP_SPATIAL);
			continue;
		}
		
		try {
			blocks_record_t b = {};
			rstring networkCIDR = lineTokens[0];
							
			// calculate start and end IP values
			SPL::list<rstring> netTokens = SPL::Functions::String::tokenize(networkCIDR, "/", false);
			if(netTokens.size() != 2)
			{
				SPLAPPLOG(L_ERROR, "Unable to parse network CIDR from blocks file: " << networkCIDR, IP_SPATIAL);
				continue;					
			}

			uint32 prefix = SPL::Functions::Utility::strtoll(netTokens[1], 10);
			if(proto == IPv4)
			{
				uint32_t networkIP;
				if(inet_pton(AF_INET, netTokens[0].c_str(), &networkIP) == 0)
				{
					SPLAPPLOG(L_ERROR, "Unable to convert start IPv4 to decimal: " << netTokens[0], IP_SPATIAL);
					continue;
				}
				
				uint32 startIP, endIP;
				calculateIPv4Range(startIP, endIP, networkIP, prefix);
				
				b.start_ip[0] = startIP;
				b.end_ip[0] = endIP;		
			}
			else if(proto == IPv6)
			{
				uint32_t networkIP[4];
				if(inet_pton(AF_INET6, netTokens[0].c_str(), &networkIP) == 0)
				{
					SPLAPPLOG(L_ERROR, "Unable to convert start IPv6 to decimal: " << netTokens[0], IP_SPATIAL);
					continue;
				}
				ntohl6(networkIP);
				
				uint32 startIP[4], endIP[4];
				calculateIPv6Range(startIP, endIP, networkIP, prefix);
				
				memcpy(&b.start_ip, startIP, 4 * sizeof(uint32));
				memcpy(&b.end_ip, endIP, 4 * sizeof(uint32));								
			}
			
			b.geoname_id = (lineTokens[1].empty() ? DEFAULT_ID : streams_boost::lexical_cast<uint32>(lineTokens[1]));
			b.reg_country_id = (lineTokens[2].empty() ? DEFAULT_ID : streams_boost::lexical_cast<uint32>(lineTokens[2]));
			b.rep_country_id = (lineTokens[3].empty() ? DEFAULT_ID : streams_boost::lexical_cast<uint32>(lineTokens[3]));
//			b.is_anon= streams_boost::lexical_cast<boolean>(lineTokens[4]); // deprecated
//			b.is_sat = streams_boost::lexical_cast<boolean>(lineTokens[5]); // deprecated
			b.postal_code = lineTokens[6];
			b.latitude = (lineTokens[7].empty() ? INVALID_LAT_LNG : streams_boost::lexical_cast<float64>(lineTokens[7]));
			b.longitude = (lineTokens[8].empty() ? INVALID_LAT_LNG : streams_boost::lexical_cast<float64>(lineTokens[8]));
			
			if(proto == IPv4)
			{
				blocks4List_->push_back(b);	
			}
			else if(proto == IPv6)
			{
				blocks6List_->push_back(b);
			}
						
		} 
		catch (streams_boost::bad_lexical_cast &e)
		{
			SPLAPPLOG(L_ERROR, "(" << e.what() << ") - Error parsing blocks record: " << line, IP_SPATIAL);
		} 	
	}
	
	if(proto == IPv4)
	{
		SPLAPPTRC(L_DEBUG, "Sorting IPv4 list", IP_SPATIAL);
		std::sort(blocks4List_->begin(), blocks4List_->end(), sortIPv4);
	}
	else if(proto == IPv6)
	{
		SPLAPPTRC(L_DEBUG, "Sorting IPv6 list", IP_SPATIAL);
		std::sort(blocks6List_->begin(), blocks6List_->end(), sortIPv6);		
	}	
	
	SPLAPPTRC(L_DEBUG, "Blocks IPv4 list size=" << blocks4List_->size(), IP_SPATIAL);
	SPLAPPTRC(L_DEBUG, "Blocks IPv6 list size=" << blocks6List_->size(), IP_SPATIAL);
}

void MY_OPERATOR::parseLocationFile(rstring filename)
{
	rstring absPath = convertToAbsolutePath(filename);
	SPLAPPTRC(L_DEBUG, "Parsing location file: '" << absPath << "'", IP_SPATIAL);
	
	// parse file
	ifstream locationFile;
	locationFile.open(absPath.c_str());
	std::string line;
	 
	typedef streams_boost::tokenizer<streams_boost::escaped_list_separator<char> > tokenizer;

	// skip processing the first line
	std::getline(locationFile, line);

	while(std::getline(locationFile, line))
	{
		tokenizer tokens(line);
		std::vector<string> toks;
		for(tokenizer::iterator it = tokens.begin(); it != tokens.end(); ++it)
		{
			toks.push_back(streams_boost::trim_copy_if(*it, streams_boost::is_any_of("\"")));
		}
		
		if(toks.size() == LOCATIONFILE_FIELD_COUNT)
		{
			try {
				location_record_t loc;
				loc.geoname_id = streams_boost::lexical_cast<uint32>(toks[0]);
				loc.locale_code = toks[1];
				loc.continent_code = toks[2];
				loc.continent_name = toks[3];
				loc.country_iso_code = toks[4];
				loc.country_name = toks[5];
				loc.subdivision_iso_1 = toks[6];
				loc.subdivision_name_1 = toks[7];
				loc.subdivision_iso_2 = toks[8];
				loc.subdivision_name_2 = toks[9];
				loc.city_name = toks[10];
				loc.metro_code = toks[11];
				loc.timezone = toks[12];

				(*locationTable_)[loc.geoname_id] = loc;		
			} 
			catch (streams_boost::bad_lexical_cast &e)
			{
				SPLAPPLOG(L_ERROR, "(" << e.what() << ") - Error parsing location record: " << line, IP_SPATIAL);
			} 
		}
		else
		{
			SPLAPPLOG(L_ERROR, "Unknown error while parsing location record: " << line, IP_SPATIAL);
		}		
	}	
	
	SPLAPPTRC(L_DEBUG, "Location table size: " << locationTable_->size(), IP_SPATIAL);
}

rstring MY_OPERATOR::convertToAbsolutePath(rstring filename)
{
	// check file path
	streams_boost::filesystem::path absPath(filename);
	if(!absPath.is_absolute()) {
		absPath = getPE().getDataDirectory();
		absPath /= filename.string();
	}
	string pathName = absPath.string();
	
	if(!streams_boost::filesystem::exists(pathName))
	{
		// TODO - fix error handling
		string const msg = "File does not exist: " + pathName;
		SPLAPPLOG(L_ERROR, msg, IP_SPATIAL);
		throw new SPLRuntimeException("parseLocationFile", msg);
	}
	
	return pathName;	
}

void inline MY_OPERATOR::lookupIP(const rstring &ipStr, MY_OPERATOR::spatial_info_t &ip_info)
{	
	// IPv4 lookup
	in_addr ip;
	if(inet_pton(AF_INET, ipStr.c_str(), &ip) != 0)
	{
		lookupIPv4(ip.s_addr, ip_info);
	}
	
	// IPv6 lookup
	uint32 numIP[4];
	if(inet_pton(AF_INET6, ipStr.c_str(), &numIP) != 0)
	{
		lookupIPv6(numIP, ip_info);
	}
	
//	/* DEBUG */
//	{
//		char startIP[INET6_ADDRSTRLEN];
//		char endIP[INET6_ADDRSTRLEN];
//		uint32 sIP[4];
//		uint32 eIP[4];
//		memcpy(&sIP, ip_info.block_record.start_ip, 4 * sizeof(uint32));
//		memcpy(&eIP, ip_info.block_record.end_ip, 4 * sizeof(uint32));
//		
//		htonl6(sIP);
//		htonl6(eIP);
//		
//		inet_ntop(AF_INET6, sIP, startIP, INET6_ADDRSTRLEN);
//		inet_ntop(AF_INET6, eIP, endIP, INET6_ADDRSTRLEN);
//
//		cout << "IP=" << ipStr;
//		cout << ", numIP(host)=[" << ntohl(numIP[0]) << "," << ntohl(numIP[1]) << "," << ntohl(numIP[2]) << "," << ntohl(numIP[3]);
//		cout << "], geoname_id=" << ip_info.block_record.geoname_id;
//		cout << ", startIPRange=" << startIP;
//		cout << ", endIPRange=" << endIP << endl;
//	}
		
	if(ip_info.ip_loc.geoname_id == 0)
		SPLAPPTRC(L_DEBUG, "Unable to find range for IP: " << ipStr, IP_SPATIAL);
}

void inline MY_OPERATOR::lookupIPv4(const uint32 &numIP, MY_OPERATOR::spatial_info_t &ip_info)
{
	unsigned int first = 0;
	unsigned int last = blocks4List_->size();
	unsigned int blocksList_size = blocks4List_->size();
	
	uint32 hostIP = ntohl(numIP);
	
	while(first <= last)
	{
		unsigned int middle = (first+last)/2;
		
		if(middle >= blocksList_size)
		{
			SPLAPPLOG(L_DEBUG, "Unable to find range for numeric IP: " << hostIP, IP_SPATIAL);
			break;
		}
		
		if(hostIP > (*blocks4List_)[middle].end_ip[0])
		{
			first = middle + 1;
		}
		else if(hostIP < (*blocks4List_)[middle].start_ip[0])
		{
			last = middle - 1;
		}
		else
		{
			<% if(defined $::usingIPLocationData) { %>
				ip_info.ip_loc = (*locationTable_)[(*blocks4List_)[middle].geoname_id];
			<%}%>
			<% if(defined $::usingRegCountryData) { %>
				ip_info.reg_country_loc = (*locationTable_)[(*blocks4List_)[middle].reg_country_id];
			<%}%>
			<% if(defined $::usingRepCountryData) { %>
				ip_info.rep_country_loc = (*locationTable_)[(*blocks4List_)[middle].rep_country_id];
			<%}%>
			ip_info.block_record = (*blocks4List_)[middle];
			break;
		}
	}
}

void MY_OPERATOR::lookupIPv6(const uint32 (&numIP)[4], MY_OPERATOR::spatial_info_t &ip_info)
{
	unsigned int first = 0;
	unsigned int last = blocks6List_->size() ;
	unsigned int blocksList_size = blocks6List_->size();
	
	uint32 hostIP[4];
	memcpy(&hostIP, numIP, 4 * sizeof(uint32));
	ntohl6(hostIP);
	
	while(first <= last)
	{
		unsigned int middle = (first+last)/2;
		
		if(middle >= blocksList_size)
		{
			SPLAPPLOG(L_DEBUG, "Unable to find range for numeric IPv6: [" << hostIP[0] << "," << hostIP[1] << "," << hostIP[2] << "," << hostIP[3] << "]", IP_SPATIAL);
			break;
		}
		
		if(IS_GREATER_THAN_IPV6(hostIP, (*blocks6List_)[middle].end_ip))
		{
			first = middle + 1;
		}
		else if(IS_LESS_THAN_IPV6(hostIP, (*blocks6List_)[middle].start_ip))
		{
			last = middle - 1;
		}
		else
		{
			<% if(defined $::usingIPLocationData) { %>
				ip_info.ip_loc = (*locationTable_)[(*blocks6List_)[middle].geoname_id];
			<%}%>
			<% if(defined $::usingRegCountryData) { %>
				ip_info.reg_country_loc = (*locationTable_)[(*blocks6List_)[middle].reg_country_id];
			<%}%>
			<% if(defined $::usingRepCountryData) { %>
				ip_info.rep_country_loc = (*locationTable_)[(*blocks6List_)[middle].rep_country_id];
			<%}%>
			ip_info.block_record = (*blocks6List_)[middle];
			break;
		}
	}
}

void inline MY_OPERATOR::calculateIPv4Range(uint32 &startIP, uint32 &endIP, uint32 &networkIP, uint32 &prefix) 
{
	startIP = ntohl(networkIP);
	endIP = startIP + (uint32_t)(1 << (32-prefix));
}

void MY_OPERATOR::calculateIPv6Range(uint32 (&startIP)[4], uint32 (&endIP)[4], uint32 (&networkIP)[4], uint32 &prefix)
{
	memcpy(&startIP, networkIP, 4 * sizeof(uint32));
	memcpy(&endIP, networkIP, 4 * sizeof(uint32));
	
	uint32 diff = 128 - prefix;
	for(unsigned int i = 3; i >= 0; i--)
	{
		if(diff >= 32)
		{
			startIP[i] = 0;
			endIP[i] = 0xFFFFFFFF;
			diff -= 32;
		}
		else if(diff > 0)
		{
			uint32 sMask = 0xFFFFFFFF << diff;
			uint32 eMask = 0xFFFFFFFF >> (32-diff);
			
			startIP[i] &= sMask;
			endIP[i] |= eMask;
			
			diff = 0;		
		}
		
		if(diff == 0) break;
	}
}

<%SPL::CodeGen::implementationEpilogue($model);%>















