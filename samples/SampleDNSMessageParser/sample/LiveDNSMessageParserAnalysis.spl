/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.source::*;
use com.ibm.streamsx.network.parse::*;

composite LiveDNSMessageParserAnalysis {

    param
    expression<rstring> $networkInterface: getSubmissionTimeValue("networkInterface", "eth0");
    expression<uint32> $processorAffinity: (uint32)getSubmissionTimeValue("processorAffinity", "1");
    expression<rstring> $inputFilter: getSubmissionTimeValue("inputFilter", "udp port 53");
    expression<float64> $metricsInterval: (float64)getSubmissionTimeValue("metricsInterval", "1.0" );
    expression<float64> $timeoutInterval: (float64)getSubmissionTimeValue("timeoutInterval", "10.0" );
    expression<boolean> $errorStream: (boolean)getSubmissionTimeValue("errorStream", "true" );

    type

    // packet output from PacketLiveSource operator
    PacketType =
        timestamp captureTime,          // time that packet was captured, in seconds since Unix epoch
        uint32 srcAddress,              // binary representation of IP source address
        rstring dstAddress,             // string representation of IP destination address
        blob dnsMessage;                // the DNS message from a packet, excluding all network headers

    // metrics output from PacketLiveSource operator
    MetricsType =
        float64 metricsTime,            // time that metrics were produced, in seconds since Unix epoch
        float64 averagePacketsReceived,     // average number of packets received during last metrics interval
        float64 averagePacketsDropped,  // average number of packets dropped during last metrics interval
        float64 averagePacketsProcessed,// average number of packets processed during last metrics interval
        float64 averageBytesProcessed;     // average number of bytes processed during last metrics interval

    // error output from DNSMessageParser operator
    DNSErrorType =
        timestamp captureTime,          // time that packet was captured, in seconds since Unix epoch
        rstring srcAddress,             // binary representation of IP source address
        rstring parseErrorDescription,
        uint32 parseErrorOffset,
        rstring dnsMessage;

    // input to 'predictive blacklisting' analytic
    FullDNSResponseMessage_t =
      timestamp captureTime,
      rstring dstAddress,
      rstring questionName,
      rstring questionType,
      uint8 responseCode,
      uint16 answerCount,
      list<rstring> answerNames,
      list<rstring> answerData,
      list<uint16> answerTypes,
      list<uint32> answerTTLs,
      uint16 nameserverCount,
      list<rstring> nameserverNames,
      list<rstring> nameserverData,
      list<uint16> nameserverTypes,
      list<uint32> nameserverTTLs,
      uint16 additionalCount,
      list<rstring> additionalNames,
      list<rstring> additionalData,
      list<uint16> additionalTypes,
      list<uint32> additionalTTLs;

    // input to 'domain profiling' and 'host profiling' analytics
    ShortDNSResponseMessage_t =
      timestamp captureTime,
      rstring dstAddress,
      rstring questionName,
      rstring questionType,
      uint8 responseCode,
      list<rstring> answerData,

      list<rstring> additionalData;

    graph

    ( stream<PacketType> PacketStream as PacketsOut ;
      stream<MetricsType> MetricsStream as MetricsOut ) = PacketLiveSource() {
        param
            networkInterface: $networkInterface;
            processorAffinity: $processorAffinity;
            metricsInterval: $metricsInterval;
            inputFilter: $inputFilter;
            promiscuous: true;
            outputFilters: true, metricsUpdated();
        output
        PacketsOut:
            captureTime = createTimestamp( (int64)CAPTURE_SECONDS(), CAPTURE_MICROSECONDS() * 1000u ),
            srcAddress = IPV4_SRC_ADDRESS(),
            dstAddress = convertIPV4AddressNumericToString(IPV4_DST_ADDRESS()),
            dnsMessage = PAYLOAD_DATA();
        MetricsOut:
            metricsTime = getTimestampInSecs(),
            averagePacketsReceived = (float64)metricsIntervalPacketsReceived() / metricsIntervalElapsed(),
            averagePacketsDropped = (float64)metricsIntervalPacketsDropped() / metricsIntervalElapsed(),
            averagePacketsProcessed = (float64)metricsIntervalPacketsProcessed() / metricsIntervalElapsed(),
            averageBytesProcessed = (float64)metricsIntervalBytesProcessed() / metricsIntervalElapsed();
    }
    () as PacketSink = FileSink(PacketStream) { param file: "debug.LiveDNSMessageParserAnalysis.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }
    () as MetricsSink = FileSink(MetricsStream) { param file: "debug.LiveDNSMessageParserAnalysis.MetricsStream.out"; format: txt; hasDelayField: true; flush: 1u; }

    ( stream<FullDNSResponseMessage_t> FullDNSResponseMessageStream as OutFull ;
      stream<ShortDNSResponseMessage_t> ShortDNSResponseMessageStream as OutShort ;
      stream<DNSErrorType> DNSErrorStream as OutError ) = DNSMessageParser(PacketStream) {
      logic state: {
        map<uint16,rstring> dnsTypes = { 1: "A", 2: "NS", 3: "MD", 4: "MF", 5: "CNAME", 6: "SOA", 7: "MB", 8: "MG", 9: "MR", 10: "NULL", 11: "WKS", 12: "PTR", 13: "HINFO", 14: "MINFO", 15: "MX", 16: "TXT", 28: "AAAA" };
        map<uint16,boolean> dnsAnalysisTypes = { 1: true, 2: true, 5: true, 12: true, 28: true }; // analyze only types A, NS, CNAME, PTR, and AAAA
      }
      param
          messageAttribute: dnsMessage;
          outputFilters: DNS_RESPONSE_FLAG() && DNS_QUESTION_TYPE() in dnsAnalysisTypes && !parseError(), // for FullDNSResponseMessageStream
                         DNS_RESPONSE_FLAG() && DNS_QUESTION_TYPE() in dnsAnalysisTypes && !parseError(), // for ShortDNSResponseMessageStream
                         $errorStream && parseError(); // for DNSErrorStream
      output
      OutFull:
          questionName = DNS_QUESTION_NAME(),
          questionType = DNS_QUESTION_TYPE() in dnsTypes ? dnsTypes[DNS_QUESTION_TYPE()] : (rstring)DNS_QUESTION_TYPE(),
          responseCode = DNS_RESPONSE_CODE(),
          answerCount = DNS_ANSWER_COUNT(),
          answerNames = DNS_ANSWER_NAMES(),
          answerData = DNS_ANSWER_DATA(),
          answerTypes = DNS_ANSWER_TYPES(),
          answerTTLs = DNS_ANSWER_TTLS(),
          nameserverCount = DNS_NAMESERVER_COUNT(),
          nameserverNames = DNS_NAMESERVER_NAMES(),
          nameserverData = DNS_NAMESERVER_DATA(),
          nameserverTypes = DNS_NAMESERVER_TYPES(),
          nameserverTTLs = DNS_NAMESERVER_TTLS(),
          additionalCount = DNS_ADDITIONAL_COUNT(),
          additionalNames = DNS_ADDITIONAL_NAMES(),
          additionalData = DNS_ADDITIONAL_DATA(),
          additionalTypes = DNS_ADDITIONAL_TYPES(),
          additionalTTLs = DNS_ADDITIONAL_TTLS();
      OutShort:
          questionName = DNS_QUESTION_NAME(),
          questionType = DNS_QUESTION_TYPE() in dnsTypes ? dnsTypes[DNS_QUESTION_TYPE()] : (rstring)DNS_QUESTION_TYPE(),
          responseCode = DNS_RESPONSE_CODE(),
          answerData = DNS_ANSWER_DATA(),
          additionalData = DNS_ADDITIONAL_DATA();
      OutError:
          srcAddress = convertIPV4AddressNumericToString(srcAddress),
          parseErrorDescription = parseErrorDescription(),
          parseErrorOffset = parseErrorOffset(),
          dnsMessage = substring((rstring)dnsMessage, 0, 2*(int32)parseErrorOffset()) + "_" + substring((rstring)dnsMessage, 2*(int32)parseErrorOffset(), 2*size(dnsMessage)-2*(int32)parseErrorOffset());

    }
    () as FullDNSResponseMessageSink = FileSink(FullDNSResponseMessageStream) { param file: "debug.LiveDNSMessageParserAnalysis.FullDNSResponseMessageStream.out"; format: txt; hasDelayField: true; flush: 1u; }
    () as ShortDNSResponseMessageSink = FileSink(ShortDNSResponseMessageStream) { param file: "debug.LiveDNSMessageParserAnalysis.ShortDNSResponseMessageStream.out"; format: txt; hasDelayField: true; flush: 1u; }
    () as DNSErrorSink = FileSink(DNSErrorStream) { param file: "debug.LiveDNSMessageParserAnalysis.DNSErrorStream.out"; format: txt; hasDelayField: true; flush: 1u; }

    () as Timeout = Custom() { logic onProcess: { block($timeoutInterval); shutdownPE(); } }
}
