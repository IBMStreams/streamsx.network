/*
** Copyright (C) 2011, 2020  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.ipv6::*;
use com.ibm.streamsx.network.dns::*;


public composite DNSPacketFileSourceSample {

    type

    DNSMessageType =
        uint64 packetNumber,            // sequence number of packet
        float64 captureTime,             // time that packet was captured, in seconds since Unix epoch
        rstring ipSourceAddress,         // IP source address
        rstring ipDestinationAddress,    // IP destination address
        boolean isResponse,
        rstring responseCode,
        rstring questionName,
        rstring questionType,
        list<rstring> answerNames,
        list<uint32> answerTTLs,
        list<rstring> answerData,
        list<rstring> nameserverNames;

    FlattenedDNSMessageType = 
        uint64 packetNumber,            // sequence number of packet
        rstring flattenedDNSMessage;

    graph

    ( stream<DNSMessageType> DNSMessageStream ; 
      stream<FlattenedDNSMessageType> FlattenedDNSMessageStream )= DNSPacketFileSource() {
        logic state: {
            map<uint16,rstring> dnsTypes = { 1: "A", 2: "NS", 3: "MD", 4: "MF", 5: "CNAME", 6: "SOA", 7: "MB", 8: "MG", 9: "MR", 10: "NULL", 11: "WKS", 12: "PTR", 13: "HINFO", 14: "MINFO", 15: "MX", 16: "TXT", 28: "AAAA" };
            map<uint8,rstring> dnsResponseCodes = { 0: "OK", 1: "Format Error", 2: "Server Failure", 3: "Name Error", 4: "[not implemented]", 5: "Server Refused" }; }
        param
            pcapFilename: getThisToolkitDir()+ "/opt/sample_dns+dhcp.pcap";
            //inputFilter: "udp port 30030"; // ... for 'jmirror' packets only
            metricsInterval: 0.0;
        output 
        DNSMessageStream:
          packetNumber = packetsProcessed(),
          captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
          ipSourceAddress = convertIPV4AddressNumericToString(IPV4_SRC_ADDRESS()),
          ipDestinationAddress = convertIPV4AddressNumericToString(IPV4_DST_ADDRESS()),
          isResponse = DNS_RESPONSE_FLAG(),
          responseCode = DNS_RESPONSE_CODE() in dnsResponseCodes ? dnsResponseCodes[DNS_RESPONSE_CODE()] : (rstring)DNS_RESPONSE_CODE(),
          questionName = DNS_QUESTION_NAME(),
          questionType = DNS_QUESTION_TYPE() in dnsTypes ? dnsTypes[DNS_QUESTION_TYPE()] : (rstring)DNS_QUESTION_TYPE(),
          answerNames = DNS_ANSWER_NAMES(),
          answerTTLs = DNS_ANSWER_TTLS(),
          answerData = DNS_ANSWER_DATA(),
          nameserverNames = DNS_NAMESERVER_NAMES();
        FlattenedDNSMessageStream:
          packetNumber = packetsProcessed(),
          flattenedDNSMessage = DNS_ALL_FIELDS("\n", "|", "^"); 
    }

	stream<rstring result> Result = Custom(FlattenedDNSMessageStream as I){
		logic
			onTuple I : {
				printStringLn((rstring)I);
				submit ({result=""}, Result);
			}
	}
}
