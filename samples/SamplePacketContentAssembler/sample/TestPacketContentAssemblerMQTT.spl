/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use spl.file::*;
use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.source::*;
use com.ibm.streamsx.network.content::*;
use com.ibm.streamsx.network.datetimeformat::*;


int32 getByte(rstring data, int32 index) {
  if (index>length(data)) return 0;
  return (int32)(toCharacterCode(substring(data,index,1)) & 0x000000FFu);
}


rstring formatMQTTMessage(rstring message) {

  if (length(message)<1) return "[empty]";

  int32 mqttHeaderFlags = getByte(message,0);
  int32 mqttMessageType = mqttHeaderFlags>>4;
  if (mqttMessageType==1) {
    if (length(message)<12) return "[MQTT Connect Command too short]";
    int32 mqttMessageLength = getByte(message,1);
    //int32 mqttZero = getByte(message,2);
    int32 mqttProtocolNameLength = getByte(message,3);
    rstring mqttProtocolName = substring(message, 4, mqttProtocolNameLength);
    int32 mqttVersion = getByte(message,4+mqttProtocolNameLength);
    int32 mqttClientIDLength = getByte(message,4+mqttProtocolNameLength+5)*256 + getByte(message,4+mqttProtocolNameLength+4);
    rstring mqttClientID = substring(message, 4+mqttProtocolNameLength+6, mqttClientIDLength);
    return "MQTT Connect Command: protocol="+mqttProtocolName+", version="+(rstring)mqttVersion+", clientID="+mqttClientID;
  } else if (mqttMessageType==2) {
    if (length(message)<4) return "[MQTT Connect Ack too short]";
    int32 mqttMessageLength = getByte(message,1);
    int32 mqttConnectionAck = getByte(message,3)*256 + getByte(message,2);
    if (mqttConnectionAck==0) return "MQTT Connect Ack: accepted";
    return "[MQTT Connect Ack "+(rstring)mqttConnectionAck+"]";
  } else if (mqttMessageType==3) {
    if (length(message)<7) return "[MQTT Publish too short]";
    int32 mqttMessageLength = getByte(message,2)*256 + getByte(message,1);
    //int32 mqttZero = getByte(message,3);
    int32 mqttTopicLength = getByte(message,4);
    rstring mqttTopic = substring(message, 5, mqttTopicLength);
    rstring mqttMessage = substring(message, 5+mqttTopicLength, length(message)-mqttTopicLength-5);
    return "MQTT Publish: topic="+mqttTopic+", message="+mqttMessage;
  } else if (mqttMessageType==14) {
    return "MQTT Disconnect Request.";
  } else {
    return "[MQTT "+(rstring)mqttMessageType+" message]";
  }
}


composite TestPacketContentAssemblerMQTT {

  param
    expression<rstring> $pcapFilename: getSubmissionTimeValue("pcapFilename", "../../SampleNetworkToolkitData/data/sample_mqtt_iot.pcap");

  type

  PacketType =
    float64 captureTime,    // time that packet was captured, in seconds since Unix epoch
    blob rawPacket ;        // contents of packet captured, including all headers

  FlowDataType =
    rstring eventTime,
    rstring eventType,
    rstring ipSource,
    rstring ipDestination,
    uint32 transactionID,
    rstring flowDirection,
    uint64 flowID,
    rstring flowProtocol,
    boolean flowDataInitial,
    rstring flowData;

  FileChunkType =
    uint64 flowID,
    uint32 transactionID,
    uint64 fileID,
    rstring fileExtension,
    boolean fileChunkInitial,
    blob fileChunk;

  graph

    stream<PacketType> PacketStream as Out = PacketFileSource() {
    param
      pcapFilename: $pcapFilename;
      inputFilter: "tcp port 1883";
      metricsInterval: 0.0;
    output Out:
      captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
      rawPacket = PACKET_DATA(); }
    //() as PacketSink = FileSink(PacketStream) { param file: "debug.TestPacketContentAssemblerMQTT.PacketStream.out" ; format: csv ; hasDelayField: true ; }

  stream<FlowDataType> FlowDataStream as Flow = PacketContentAssembler(PacketStream) {
    param
    timestampAttribute: captureTime;
    packetAttribute: rawPacket;
    output
    Flow:
      eventTime = formatEpochDateTime(FLOW_EVENT_TIME()),
      eventType = EVENT(),
      ipSource = convertIPV4AddressNumericToString(FLOW_IPV4_SRC_ADDRESS()) + ":" + (rstring)FLOW_SRC_PORT(),
      ipDestination = convertIPV4AddressNumericToString(FLOW_IPV4_DST_ADDRESS()) + ":" + (rstring)FLOW_DST_PORT(),
      transactionID = FLOW_TRANSACTION_ID(),
      flowDirection = FLOW_DIRECTION(),
      flowID = FLOW_ID(),
      flowProtocol = EVENT_FLOW_TLS() ? "tls" : length(FLOW_PROTOCOL())>0 ? FLOW_PROTOCOL() : "unknown",
      flowDataInitial = FLOW_DATA_COUNTER()==0ul,
      flowData = FLOW_DATA_STRING();
  }
  () as FlowDataSink = FileSink(FlowDataStream) { param file: "debug.TestPacketContentAssemblerMQTT.FlowDataStream.out" ; suppress: flowData; format: txt ; hasDelayField: true ; }

  () as FlowDataStore = Custom(FlowDataStream as In) {
    logic state: {
      mutable boolean res=createDir(dataDirectory() + "/debug.TestPacketContentAssemblerMQTT");
      map<rstring,rstring> directionFlags = {
        "?"        : "???",
        ""         : "---",
        "SrcToDst" : "-->",
        "DstToSrc" : "<--" }; }
    onTuple In: {
      rstring filename = dataDirectory() + "/debug.TestPacketContentAssemblerMQTT/debug.flow_" + leadingZeros(flowID,6) + "." + flowProtocol;
      rstring filemode = flowDataInitial ? "w" : "a";
      mutable int32 error = 0;
      uint64 handle = fopen(filename, filemode, error);
      assert(error==0, "Sorry, could not open output file '" + filename + "', " + strerror(error));
      fwriteString("\n" + eventTime + "   " + ipSource + " " + directionFlags[flowDirection] + " " + ipDestination + "   " + (rstring)length(flowData) + " bytes   " + formatMQTTMessage(flowData) + "\n", handle, error);
      assert(error==0, "Sorry, could not write output file '" + filename + "', " + strerror(error));      
      fclose(handle, error);
      assert(error==0, "Sorry, could not close output file '" + filename + "', " + strerror(error)); } }

}
