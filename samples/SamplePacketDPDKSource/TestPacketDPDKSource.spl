/*
 * Copyright (C) 2015, International Business Machines Corporation
 * All Rights Reserved
 */

use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.ipv6::*;
use com.ibm.streamsx.network.source::*;

/* 
 * Simple example application which configures the DPDP source and 
 * sends the packet data to a file.  In this sample, we configure ingest
 * to run on 1 NIC port with 2 queues.
 */

type PacketData = uint64 timestampMicroseconds,
     blob   packet,
     uint64 length;

public composite TestPacketDPDKSource {   
	graph   
        // One DPDK operator per NIC port/queue.  In this example we have 1 port 
        // with 2 queues, so 2 PacketDPDKSource operators are required.

        (stream<PacketData>  PacketStream_0 ) = PacketDPDKSource() {
            param
                // Parameters for the DPDK environment on this host.
                lcoreMaster: 0;     // Run the master operator on core 0.

                // Parameters for this specific operator.
                lcore   : 1;     // Run this ingest operator on core 1.
                nicPort : 0;     // Bind to NIC port 0
                nicQueue: 0;     // Bind to NIC queue 0
                promiscuous: true;
                metricsInterval: 1.0;
            output
                PacketStream_0:
                    timestampMicroseconds = (uint64) CAPTURE_MICROSECONDS(),
                    packet = PACKET_DATA(),
                    length = (uint64) PACKET_LENGTH();
        }

        (stream<PacketData>  PacketStream_1 ) = PacketDPDKSource() {
            param
                // Parameters for this specific operator.
                lcore   : 2;     // Run this ingest operator on core 2.
                nicPort : 0;     // Bind to NIC port 0
                nicQueue: 1;     // Bind to NIC queue 1
                promiscuous: true;
                metricsInterval: 1.0;
            output
                PacketStream_1:
                    timestampMicroseconds = (uint64) CAPTURE_MICROSECONDS(),
                    packet = PACKET_DATA(),
                    length = (uint64) PACKET_LENGTH();
        }

        () as FS_PacketData_0 = FileSink( PacketStream_0 ) {
            param
                file : "PacketStream0.out";
        }

        () as FS_PacketData_1 = FileSink( PacketStream_1 ) {
            param
                file : "PacketStream1.out";
        }

        // All of the PacketDPDKSource operators must run in the same PE (process).
	config
	    placement : partitionColocation('SinglePE');
	    tracing   : trace;
}


