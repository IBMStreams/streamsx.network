/*
** Copyright (C) 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.source::*;
use com.ibm.streamsx.network.location::*;

composite TestIPAddressLocationBasic2 {

    param
    expression<rstring> $geographyDirectory: getSubmissionTimeValue("geographyDirectory", "./www.maxmind.com" );
    expression<rstring> $pcapFilename: getSubmissionTimeValue("pcapFilename", "../../SampleNetworkToolkitData/sample_locations_ipv4_only.pcap" );
    expression<uint32> $localSubnetAddress: 0x09000000u;

    type

    PacketType =
        uint64 packetNumber,            // sequence number of packet, as emitted by operator
        float64 captureTime,            // time that packet was captured, in seconds since Unix epoch
        uint32 ipSourceAddress,         // IP source address, or empty if not IP packet
        uint16 ipSourcePort,            // IP source port, or zero if not UDP or TCP packet
        uint32 ipDestinationAddress,    // IP destination address, or empty if not IP packet
        uint16 ipDestinationPort,       // IP destination port, or zero if not UDP or TCP packet
        uint32 packetLength;            // original length of packet (not necessarily all captured)

    LocatedPacketType =
        uint64 packetNumber,            // sequence number of packet, as emitted by operator
        float64 captureTime,            // time that packet was captured, in seconds since Unix epoch
        uint32 packetLength, 
        rstring ipSourceAddress,  
        rstring ipSourceSubnet,  
        rstring ipSourceLabel,
        rstring ipSourceCoordinates,
        rstring ipDestinationAddress,  
        rstring ipDestinationSubnet,  
        rstring ipDestinationLabel,
        rstring ipDestinationCoordinates;

    UnlocatedPacketType =
        uint64 packetNumber,            // sequence number of packet, as emitted by operator
        float64 captureTime,            // time that packet was captured, in seconds since Unix epoch
        rstring ipAddress,  
        rstring subnetAddress,  
        rstring country;

    graph

    stream<PacketType> PacketStream as Out = PacketFileSource() {
        param
            pcapFilename: $pcapFilename;
            outputFilters: IP_VERSION()==4ub;
        output Out:
            packetNumber = packetsProcessed() - 1ul,
            captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
            ipSourceAddress = IPV4_SRC_ADDRESS(),
            ipSourcePort = IP_SRC_PORT(),
            ipDestinationAddress = IPV4_DST_ADDRESS(),
            ipDestinationPort = IP_DST_PORT(),
            packetLength = PACKET_LENGTH();
    }
    () as PacketSink = FileSink(PacketStream) { param file: "debug.TestIPAddressLocationBasic2.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }


    ( stream<LocatedPacketType> LocatedPacketStream as OutLocated ;
      stream<UnlocatedPacketType> UnlocatedPacketStream as OutUnlocated ) = IPAddressLocation(PacketStream) {
      param
        geographyDirectory: $geographyDirectory;
        outputFilters: locationCityName(ipSourceAddress)!="" && locationCityName(ipDestinationAddress)!="",
                       locationCityName(ipSourceAddress)=="" || locationCityName(ipDestinationAddress)=="";
      output 
      OutLocated:
        ipSourceAddress = convertIPV4AddressNumericToString(ipSourceAddress),
        ipSourceSubnet = locationSubnet(ipSourceAddress),
        ipSourceLabel = locationCityName(ipSourceAddress) + ", " + locationSubdivision1Name(ipSourceAddress) + ", " + locationCountryName(ipSourceAddress),
        ipSourceCoordinates = (rstring)locationLatitude(ipSourceAddress) + ", " + (rstring)locationLongitude(ipSourceAddress),
        ipDestinationAddress = convertIPV4AddressNumericToString(ipDestinationAddress),
        ipDestinationSubnet = locationSubnet(ipDestinationAddress),
        ipDestinationLabel = locationCityName(ipDestinationAddress) + ", " + locationSubdivision1Name(ipDestinationAddress) + ", " + locationCountryName(ipDestinationAddress),
        ipDestinationCoordinates = (rstring)locationLatitude(ipDestinationAddress) + ", " + (rstring)locationLongitude(ipDestinationAddress);
      OutUnlocated:
        ipAddress = convertIPV4AddressNumericToString( locationSubnetAddress(ipSourceAddress)!=$localSubnetAddress ? ipSourceAddress : ipDestinationAddress ),
        subnetAddress = locationSubnetAddress(ipSourceAddress)!=$localSubnetAddress ? locationSubnet(ipSourceAddress) : locationSubnet(ipDestinationAddress),
        country = locationSubnetAddress(ipSourceAddress)!=$localSubnetAddress ? locationCountryName(ipSourceAddress) : locationCountryName(ipDestinationAddress);
    }
    () as LocatedPacketSink = FileSink(LocatedPacketStream) { param file: "debug.TestIPAddressLocationBasic2.LocatedPacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }
    () as UnlocatedPacketSink = FileSink(UnlocatedPacketStream) { param file: "debug.TestIPAddressLocationBasic2.UnlocatedPacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }


}
