/*
** Copyright (C) 2017  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.source::*;
use com.ibm.streamsx.network.sink::*;

composite TestPacketFileSinkTimestamps {

    param
    expression<rstring> $inputFilename: getSubmissionTimeValue("inputFilename", "../../SampleNetworkToolkitData/data/sample_dns+dhcp.pcap" );

    type

    PacketType =
        uint64 packetNumber,            // sequence number of packet, as emitted by operator
        int64 packetTimeSeconds,        // time that packet was captured, in seconds since Unix epoch
        uint32 packetTimeMicroseconds,  // time that packet was captured, in microseconds after 'packetTimeSeconds'
        float64 packetTimeAsFloat,      // time that packet was captured, in seconds since Unix epoch
        timestamp packetTimeAsTimestamp,// time that packet was captured, in seconds since Unix epoch
        uint32 packetLength,            // original length of packet (not necessarily all captured)
        blob packetData;                // contents of packet captured, including network headers (possibly truncated)

    graph

    stream<PacketType> PacketStream = PacketFileSource() {
        param
            pcapFilename: $inputFilename;
            metricsInterval: 0.0;
        output PacketStream:
            packetNumber = packetsProcessed() - 1ul,
            packetTimeSeconds = (int64)CAPTURE_SECONDS(),
            packetTimeMicroseconds = CAPTURE_MICROSECONDS(),
            packetTimeAsFloat = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
            packetTimeAsTimestamp = createTimestamp((int64)CAPTURE_SECONDS(), CAPTURE_MICROSECONDS()*1000u),
            packetLength = PACKET_LENGTH(),
            packetData = PACKET_DATA();
    }
    () as PacketSink = FileSink(PacketStream) { param file: "debug.TestPacketFileSinkTimestamps.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }

    () as OutInteger = PacketFileSink(PacketStream) {
      param
        pcapFilename: "./data/debug.TestPacketFileSinkTimestamps.packetTimeAsInteger.pcap";
        packetAttribute: packetData;
        timestampAttribute: packetTimeSeconds;
        timestampMicrosecondsAttribute: packetTimeMicroseconds; }

    () as OutFloat = PacketFileSink(PacketStream) {
      param
        pcapFilename: "./data/debug.TestPacketFileSinkTimestamps.packetTimeAsFloat.pcap";
        packetAttribute: packetData;
        timestampAttribute: packetTimeAsFloat; }

    () as OutTimestamp = PacketFileSink(PacketStream) {
      param
        pcapFilename: "./data/debug.TestPacketFileSinkTimestamps.packetTimeAsTimestamp.pcap";
        packetAttribute: packetData;
        timestampAttribute: packetTimeAsTimestamp; }

}
