/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.ipv6::*;
use com.ibm.streamsx.network.mac::*;
use com.ibm.streamsx.network.source::*;
use com.ibm.streamsx.network.parse::*;
use com.ibm.streamsx.network.datetimeformat::*;

composite TestNetflowMessageParserFullVersion9 {

    param
    expression<rstring> $pcapFilename: getSubmissionTimeValue("pcapFilename", "../../SampleNetworkToolkitData/sample_netflow9_new.pcap" );

    type

    PacketType =
        float64 captureTime,            // time that packet was captured, in seconds since Unix epoch
        uint32 netflowSource,           // IP source address of Netflow message
        blob netflowMessage;            // the Netflow message from a packet, excluding all network headers

    NetflowMessageType =
        rstring captureTime,            // time that packet was captured, in seconds since Unix epoch
        boolean parseError,
        rstring parseErrorDescription,
        uint32 parseErrorOffset,
        uint64 messagesProcessed,
        uint16 NETFLOW_VERSION, // header: Netflow version
        uint16 NETFLOW_COUNT, // header: number of records (including templates, options, and flows)
        rstring NETFLOW_SYSTEM_UPTIME, // header: time since source was booted, in milliseconds, converted to seconds
        rstring NETFLOW_UNIX_SECONDS, // header: time since beginning of Unix epoch, in seconds
        uint32 NETFLOW_SEQUENCE_NUMBER, // header: sequence number of this message
        uint32 NETFLOW_SOURCE_ID, // header: identifier of source of this message
        uint64 NETFLOW_IN_BYTES, // field 1: Incoming counter with length N x 8 bits for number of bytes associated with an IP Flow.
        uint64 NETFLOW_IN_PKTS, // field 2: Incoming counter with length N x 8 bits for the number of packets associated with an IP Flow
        uint64 NETFLOW_FLOWS, // field 3: Number of flows that were aggregated; default for N is 4
        uint8 NETFLOW_PROTOCOL, // field 4: IP protocol byte
        uint8 NETFLOW_SRC_TOS, // field 5: Type of Service byte setting when entering incoming interface
        uint8 NETFLOW_TCP_FLAGS, // field 6: Cumulative of all the TCP flags seen for this flow
        uint16 NETFLOW_SRC_PORT, // field 7: TCP/UDP source port number i.e.: FTP, Telnet, or equivalent
        rstring NETFLOW_IPV4_SRC_ADDR, // field 8: IPv4 source address
        uint8 NETFLOW_SRC_MASK, // field 9: The number of contiguous bits in the source address subnet mask i.e.: the submask in slash notation
        uint32 NETFLOW_INPUT_INTERFACE, // field 10: Input interface index; default for N is 2 but higher values could be used
        uint16 NETFLOW_DST_PORT, // field 11: TCP/UDP destination port number i.e.: FTP, Telnet, or equivalent
        rstring NETFLOW_IPV4_DST_ADDR, // field 12: IPv4 destination address
        uint8 NETFLOW_DST_MASK, // field 13: The number of contiguous bits in the destination address subnet mask i.e.: the submask in slash notation
        uint32 NETFLOW_OUTPUT_INTERFACE, // field 14: Output interface index; default for N is 2 but higher values could be used
        rstring NETFLOW_IPV4_NEXT_HOP, // field 15: IPv4 address of next-hop router
        uint32 NETFLOW_SRC_AS, // field 16: Source BGP autonomous system number where N could be 2 or 4
        uint32 NETFLOW_DST_AS, // field 17: Destination BGP autonomous system number where N could be 2 or 4
        rstring NETFLOW_BGP_IPV4_NEXT_HOP, // field 18: Next-hop router's IP in the BGP domain
        uint64 NETFLOW_MUL_DST_PKTS, // field 19: IP multicast outgoing packet counter with length N x 8 bits for packets associated with the IP Flow
        uint64 NETFLOW_MUL_DST_BYTES, // field 20: IP multicast outgoing byte counter with length N x 8 bits for bytes associated with the IP Flow
        rstring NETFLOW_LAST_SWITCHED, // field 21: System uptime at which the last packet of this flow was switched
        rstring NETFLOW_FIRST_SWITCHED, // field 22: System uptime at which the first packet of this flow was switched
        uint64 NETFLOW_OUT_BYTES, // field 23: Outgoing counter with length N x 8 bits for the number of bytes associated with an IP Flow
        uint64 NETFLOW_OUT_PKTS, // field 24: Outgoing counter with length N x 8 bits for the number of packets associated with an IP Flow.
        uint16 NETFLOW_MIN_PKT_LNGTH, // field 25: Minimum IP packet length on incoming packets of the flow
        uint16 NETFLOW_MAX_PKT_LNGTH, // field 26: Maximum IP packet length on incoming packets of the flow
        rstring NETFLOW_IPV6_SRC_ADDR, // field 27: IPv6 Source Address
        rstring NETFLOW_IPV6_DST_ADDR, // field 28: IPv6 Destination Address
        uint8 NETFLOW_IPV6_SRC_MASK, // field 29: Length of the IPv6 source mask in contiguous bits
        uint8 NETFLOW_IPV6_DST_MASK, // field 30: Length of the IPv6 destination mask in contiguous bits
        uint32 NETFLOW_IPV6_FLOW_LABEL, // field 31: IPv6 flow label as per RFC 2460 definition
        uint16 NETFLOW_ICMP_TYPE, // field 32: Internet Control Message Protocol (ICMP) packet type; reported as ((ICMP Type*256) + ICMP code)
        uint8 NETFLOW_MUL_IGMP_TYPE, // field 33: Internet Group Management Protocol (IGMP) packet type
        uint32 NETFLOW_SAMPLING_INTERVAL, // field 34: When using sampled NetFlow, the rate at which packets are sampled i.e.: a value of 100 indicates that one of every 100 packets is sampled
        uint8 NETFLOW_SAMPLING_ALGORITHM, // field 35: The type of algorithm used for sampled NetFlow: 0x01 Deterministic Sampling ,0x02 Random Sampling
        uint16 NETFLOW_FLOW_ACTIVE_TIMEOUT, // field 36: Timeout value (in seconds) for active flow entries in the NetFlow cache
        uint16 NETFLOW_FLOW_INACTIVE_TIMEOUT, // field 37: Timeout value (in seconds) for inactive flow entries in the NetFlow cache
        uint8 NETFLOW_ENGINE_TYPE, // field 38: Type of flow switching engine: RP = 0, VIP/Linecard = 1
        uint8 NETFLOW_ENGINE_ID, // field 39: ID number of the flow switching engine
        uint64 NETFLOW_TOTAL_BYTES_EXP, // field 40: Counter with length N x 8 bits for bytes for the number of bytes exported by the Observation Domain
        uint64 NETFLOW_TOTAL_PKTS_EXP, // field 41: Counter with length N x 8 bits for bytes for the number of packets exported by the Observation Domain
        uint64 NETFLOW_TOTAL_FLOWS_EXP, // field 42: Counter with length N x 8 bits for bytes for the number of flows exported by the Observation Domain
        uint32 NETFLOW_IPV4_SRC_PREFIX, // field 44: IPv4 source address prefix (specific for Catalyst architecture)
        uint32 NETFLOW_IPV4_DST_PREFIX, // field 45: IPv4 destination address prefix (specific for Catalyst architecture)
        uint8 NETFLOW_MPLS_TOP_LABEL_TYPE, // field 46: MPLS Top Label Type: 0x00 UNKNOWN 0x01 TE-MIDPT 0x02 ATOM 0x03 VPN 0x04 BGP 0x05 LDP
        uint32 NETFLOW_MPLS_TOP_LABEL_IPV4_ADDR, // field 47: Forwarding Equivalent Class corresponding to the MPLS Top Label
        uint8 NETFLOW_FLOW_SAMPLER_ID, // field 48: Identifier shown in "show flow-sampler"
        uint8 NETFLOW_FLOW_SAMPLER_MODE, // field 49: The type of algorithm used for sampling data: 0x02 random sampling. Use in connection with FLOW_SAMPLER_MODE
        uint32 NETFLOW_FLOW_SAMPLER_RANDOM_INTERVAL, // field 50: Packet interval at which to sample. Use in connection with FLOW_SAMPLER_MODE
        uint8 NETFLOW_MIN_TTL, // field 52: Minimum TTL on incoming packets of the flow
        uint8 NETFLOW_MAX_TTL, // field 53: Maximum TTL on incoming packets of the flow
        uint16 NETFLOW_IPV4_IDENT, // field 54: The IP v4 identification field
        uint8 NETFLOW_DST_TOS, // field 55: Type of Service byte setting when exiting outgoing interface
        rstring NETFLOW_MAC_SRC_ADDR_IN, // field 56: Incoming source MAC address
        rstring NETFLOW_MAC_DST_ADDR_OUT, // field 57: Outgoing destination MAC address
        uint16 NETFLOW_SRC_VLAN, // field 58: Virtual LAN identifier associated with ingress interface
        uint16 NETFLOW_DST_VLAN, // field 59: Virtual LAN identifier associated with egress interface
        uint8 NETFLOW_IP_PROTOCOL_VERSION, // field 60: Internet Protocol Version Set to 4 for IPv4, set to 6 for IPv6. If not present in the template, then version 4 is assumed.
        uint8 NETFLOW_DIRECTION, // field 61: Flow direction: 0 - ingress flow, 1 - egress flow
        rstring NETFLOW_IPV6_NEXT_HOP, // field 62: IPv6 address of the next-hop router
        rstring NETFLOW_BPG_IPV6_NEXT_HOP, // field 63: Next-hop router in the BGP domain
        uint32 NETFLOW_IPV6_OPTION_HEADERS, // field 64: Bit-encoded field identifying IPv6 option headers found in the flow
        list<uint8> NETFLOW_MPLS_LABEL_1, // field 70: MPLS label at position 1 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_2, // field 71: MPLS label at position 2 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_3, // field 72: MPLS label at position 3 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_4, // field 73: MPLS label at position 4 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_5, // field 74: MPLS label at position 5 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_6, // field 75: MPLS label at position 6 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_7, // field 76: MPLS label at position 7 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_8, // field 77: MPLS label at position 8 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_9, // field 78: MPLS label at position 9 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        list<uint8> NETFLOW_MPLS_LABEL_10, // field 79: MPLS label at position 10 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        rstring NETFLOW_MAC_DST_ADDR_IN, // field 80: Incoming destination MAC address
        rstring NETFLOW_MAC_SRC_ADDR_OUT, // field 81: Outgoing source MAC address
        rstring NETFLOW_IF_NAME, // field 82: Shortened interface name i.e.: "FE1/0"
        rstring NETFLOW_IF_DESC, // field 83: Full interface name i.e.: "FastEthernet 1/0"
        rstring NETFLOW_SAMPLER_NAME, // field 84: Name of the flow sampler
        uint64 NETFLOW_IN_PERMANENT_BYTES, // field 85: Running byte counter for a permanent flow
        uint64 NETFLOW_IN_PERMANENT_PKTS, // field 86: Running packet counter for a permanent flow
        uint16 NETFLOW_FRAGMENT_OFFSET, // field 88: The fragment-offset value from fragmented IP packets
        uint8 NETFLOW_FORWARDING_STATUS, // field 89: Forwarding status is encoded on 1 byte with the 2 left bits giving the status and the 6 remaining bits giving the reason code.
        list<uint8> NETFLOW_MPLS_PAL_RD, // field 90: MPLS PAL Route Distinguisher.
        uint8 NETFLOW_MPLS_PREFIX_LEN, // field 91: Number of consecutive bits in the MPLS prefix length.
        uint32 NETFLOW_SRC_TRAFFIC_INDEX, // field 92: BGP Policy Accounting Source Traffic Index
        uint32 NETFLOW_DST_TRAFFIC_INDEX, // field 93: BGP Policy Accounting Destination Traffic Index
        rstring NETFLOW_APPLICATION_DESCRIPTION, // field 94: Application description.
        list<uint8> NETFLOW_APPLICATION_TAG, // field 95: 8 bits of engine ID, followed by n bits of classification.
        rstring NETFLOW_APPLICATION_NAME, // field 96: Name associated with a classification.
        uint8 NETFLOW_POST_IP_DSCP, // field 98: The value of a Differentiated Services Code Point (DSCP) encoded in the Differentiated Services Field, after modification.
        uint32 NETFLOW_REPLICATION_FACTOR, // field 99: Multicast replication factor.
        uint32 NETFLOW_FIELD_8_AS_INTEGER,
        list<uint8> NETFLOW_FIELD_8_AS_BYTE_LIST,
        rstring NETFLOW_FIELD_82_AS_STRING;

    graph

    stream<PacketType> PacketStream as Out = PacketFileSource() {
        param
            pcapFilename: $pcapFilename;
            inputFilter: "udp port 2055";
            metricsInterval: 0.0;
        output Out:
            captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
            netflowSource = IPV4_SRC_ADDRESS(),
            netflowMessage = PAYLOAD_DATA();
    }
    () as PacketSink = FileSink(PacketStream) { param file: "debug.TestNetflowMessageParserFullVersion9.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }

    stream<NetflowMessageType> NetflowMessageStream as Out = NetflowMessageParser(PacketStream) {
      param
          messageAttribute: netflowMessage;
          sourceAttribute: netflowSource;
      output Out:
        captureTime = formatEpochDateTime(captureTime),
        parseError = parseError(),
        parseErrorDescription = parseErrorDescription(),
        parseErrorOffset = parseErrorOffset(),
        messagesProcessed = messagesProcessed(),
        NETFLOW_VERSION = NETFLOW_VERSION(), // header: Netflow version
        NETFLOW_COUNT = NETFLOW_COUNT(), // header: number of records (including templates, options, and flows)
        NETFLOW_SYSTEM_UPTIME = formatElapsedTime((float64)NETFLOW_SYSTEM_UPTIME()/1000.0, 3u), // header: time since source was booted, in milliseonds, converted to seconds
        NETFLOW_UNIX_SECONDS = formatEpochTime(NETFLOW_UNIX_SECONDS()), // header: time since beginning of Unix epoch, in seconds
        NETFLOW_SEQUENCE_NUMBER = NETFLOW_SEQUENCE_NUMBER(), // header: sequence number of this message
        NETFLOW_SOURCE_ID = NETFLOW_SOURCE_ID(), // header: identifier of source of this message
        NETFLOW_IN_BYTES = NETFLOW_IN_BYTES(), // field 1: Incoming counter with length N x 8 bits for number of bytes associated with an IP Flow.
        NETFLOW_IN_PKTS = NETFLOW_IN_PKTS(), // field 2: Incoming counter with length N x 8 bits for the number of packets associated with an IP Flow
        NETFLOW_FLOWS = NETFLOW_FLOWS(), // field 3: Number of flows that were aggregated; default for N is 4
        NETFLOW_PROTOCOL = NETFLOW_PROTOCOL(), // field 4: IP protocol byte
        NETFLOW_SRC_TOS = NETFLOW_SRC_TOS(), // field 5: Type of Service byte setting when entering incoming interface
        NETFLOW_TCP_FLAGS = NETFLOW_TCP_FLAGS(), // field 6: Cumulative of all the TCP flags seen for this flow
        NETFLOW_SRC_PORT = NETFLOW_SRC_PORT(), // field 7: TCP/UDP source port number i.e.: FTP, Telnet, or equivalent
        NETFLOW_IPV4_SRC_ADDR = convertIPV4AddressNumericToString(NETFLOW_IPV4_SRC_ADDR()), // field 8: IPv4 source address
        NETFLOW_SRC_MASK = NETFLOW_SRC_MASK(), // field 9: The number of contiguous bits in the source address subnet mask i.e.: the submask in slash notation
        NETFLOW_INPUT_INTERFACE = NETFLOW_INPUT_INTERFACE(), // field 10: Input interface index; default for N is 2 but higher values could be used
        NETFLOW_DST_PORT = NETFLOW_DST_PORT(), // field 11: TCP/UDP destination port number i.e.: FTP, Telnet, or equivalent
        NETFLOW_IPV4_DST_ADDR = convertIPV4AddressNumericToString(NETFLOW_IPV4_DST_ADDR()), // field 12: IPv4 destination address
        NETFLOW_DST_MASK = NETFLOW_DST_MASK(), // field 13: The number of contiguous bits in the destination address subnet mask i.e.: the submask in slash notation
        NETFLOW_OUTPUT_INTERFACE = NETFLOW_OUTPUT_INTERFACE(), // field 14: Output interface index; default for N is 2 but higher values could be used
        NETFLOW_IPV4_NEXT_HOP = convertIPV4AddressNumericToString(NETFLOW_IPV4_NEXT_HOP()), // field 15: IPv4 address of next-hop router
        NETFLOW_SRC_AS = NETFLOW_SRC_AS(), // field 16: Source BGP autonomous system number where N could be 2 or 4
        NETFLOW_DST_AS = NETFLOW_DST_AS(), // field 17: Destination BGP autonomous system number where N could be 2 or 4
        NETFLOW_BGP_IPV4_NEXT_HOP = convertIPV4AddressNumericToString(NETFLOW_BGP_IPV4_NEXT_HOP()), // field 18: Next-hop router's IP in the BGP domain
        NETFLOW_MUL_DST_PKTS = NETFLOW_MUL_DST_PKTS(), // field 19: IP multicast outgoing packet counter with length N x 8 bits for packets associated with the IP Flow
        NETFLOW_MUL_DST_BYTES = NETFLOW_MUL_DST_BYTES(), // field 20: IP multicast outgoing byte counter with length N x 8 bits for bytes associated with the IP Flow
        NETFLOW_LAST_SWITCHED = formatElapsedTime((float64)NETFLOW_LAST_SWITCHED()/1000.0, 3u), // flow: System uptime at which the last packet of this flow was switched
        NETFLOW_FIRST_SWITCHED = formatElapsedTime((float64)NETFLOW_FIRST_SWITCHED()/1000.0, 3u), // flow: System uptime at which the first packet of this flow was switched
        NETFLOW_OUT_BYTES = NETFLOW_OUT_BYTES(), // field 23: Outgoing counter with length N x 8 bits for the number of bytes associated with an IP Flow
        NETFLOW_OUT_PKTS = NETFLOW_OUT_PKTS(), // field 24: Outgoing counter with length N x 8 bits for the number of packets associated with an IP Flow.
        NETFLOW_MIN_PKT_LNGTH = NETFLOW_MIN_PKT_LNGTH(), // field 25: Minimum IP packet length on incoming packets of the flow
        NETFLOW_MAX_PKT_LNGTH = NETFLOW_MAX_PKT_LNGTH(), // field 26: Maximum IP packet length on incoming packets of the flow
        NETFLOW_IPV6_SRC_ADDR = convertIPV6AddressNumericToString(NETFLOW_IPV6_SRC_ADDR()), // field 27: IPv6 Source Address
        NETFLOW_IPV6_DST_ADDR = convertIPV6AddressNumericToString(NETFLOW_IPV6_DST_ADDR()), // field 28: IPv6 Destination Address
        NETFLOW_IPV6_SRC_MASK = NETFLOW_IPV6_SRC_MASK(), // field 29: Length of the IPv6 source mask in contiguous bits
        NETFLOW_IPV6_DST_MASK = NETFLOW_IPV6_DST_MASK(), // field 30: Length of the IPv6 destination mask in contiguous bits
        NETFLOW_IPV6_FLOW_LABEL = NETFLOW_IPV6_FLOW_LABEL(), // field 31: IPv6 flow label as per RFC 2460 definition
        NETFLOW_ICMP_TYPE = NETFLOW_ICMP_TYPE(), // field 32: Internet Control Message Protocol (ICMP) packet type; reported as ((ICMP Type*256) + ICMP code)
        NETFLOW_MUL_IGMP_TYPE = NETFLOW_MUL_IGMP_TYPE(), // field 33: Internet Group Management Protocol (IGMP) packet type
        NETFLOW_SAMPLING_INTERVAL = NETFLOW_SAMPLING_INTERVAL(), // field 34: When using sampled NetFlow, the rate at which packets are sampled i.e.: a value of 100 indicates that one of every 100 packets is sampled
        NETFLOW_SAMPLING_ALGORITHM = NETFLOW_SAMPLING_ALGORITHM(), // field 35: The type of algorithm used for sampled NetFlow: 0x01 Deterministic Sampling ,0x02 Random Sampling
        NETFLOW_FLOW_ACTIVE_TIMEOUT = NETFLOW_FLOW_ACTIVE_TIMEOUT(), // field 36: Timeout value (in seconds) for active flow entries in the NetFlow cache
        NETFLOW_FLOW_INACTIVE_TIMEOUT = NETFLOW_FLOW_INACTIVE_TIMEOUT(), // field 37: Timeout value (in seconds) for inactive flow entries in the NetFlow cache
        NETFLOW_ENGINE_TYPE = NETFLOW_ENGINE_TYPE(), // field 38: Type of flow switching engine: RP = 0, VIP/Linecard = 1
        NETFLOW_ENGINE_ID = NETFLOW_ENGINE_ID(), // field 39: ID number of the flow switching engine
        NETFLOW_TOTAL_BYTES_EXP = NETFLOW_TOTAL_BYTES_EXP(), // field 40: Counter with length N x 8 bits for bytes for the number of bytes exported by the Observation Domain
        NETFLOW_TOTAL_PKTS_EXP = NETFLOW_TOTAL_PKTS_EXP(), // field 41: Counter with length N x 8 bits for bytes for the number of packets exported by the Observation Domain
        NETFLOW_TOTAL_FLOWS_EXP = NETFLOW_TOTAL_FLOWS_EXP(), // field 42: Counter with length N x 8 bits for bytes for the number of flows exported by the Observation Domain
        NETFLOW_IPV4_SRC_PREFIX = NETFLOW_IPV4_SRC_PREFIX(), // field 44: IPv4 source address prefix (specific for Catalyst architecture)
        NETFLOW_IPV4_DST_PREFIX = NETFLOW_IPV4_DST_PREFIX(), // field 45: IPv4 destination address prefix (specific for Catalyst architecture)
        NETFLOW_MPLS_TOP_LABEL_TYPE = NETFLOW_MPLS_TOP_LABEL_TYPE(), // field 46: MPLS Top Label Type: 0x00 UNKNOWN 0x01 TE-MIDPT 0x02 ATOM 0x03 VPN 0x04 BGP 0x05 LDP
        NETFLOW_MPLS_TOP_LABEL_IPV4_ADDR = NETFLOW_MPLS_TOP_LABEL_IPV4_ADDR(), // field 47: Forwarding Equivalent Class corresponding to the MPLS Top Label
        NETFLOW_FLOW_SAMPLER_ID = NETFLOW_FLOW_SAMPLER_ID(), // field 48: Identifier shown in "show flow-sampler"
        NETFLOW_FLOW_SAMPLER_MODE = NETFLOW_FLOW_SAMPLER_MODE(), // field 49: The type of algorithm used for sampling data: 0x02 random sampling. Use in connection with FLOW_SAMPLER_MODE
        NETFLOW_FLOW_SAMPLER_RANDOM_INTERVAL = NETFLOW_FLOW_SAMPLER_RANDOM_INTERVAL(), // field 50: Packet interval at which to sample. Use in connection with FLOW_SAMPLER_MODE
        NETFLOW_MIN_TTL = NETFLOW_MIN_TTL(), // field 52: Minimum TTL on incoming packets of the flow
        NETFLOW_MAX_TTL = NETFLOW_MAX_TTL(), // field 53: Maximum TTL on incoming packets of the flow
        NETFLOW_IPV4_IDENT = NETFLOW_IPV4_IDENT(), // field 54: The IP v4 identification field
        NETFLOW_DST_TOS = NETFLOW_DST_TOS(), // field 55: Type of Service byte setting when exiting outgoing interface
        NETFLOW_MAC_SRC_ADDR_IN = convertMACAddressNumericToString(NETFLOW_MAC_SRC_ADDR_IN()), // field 56: Incoming source MAC address
        NETFLOW_MAC_DST_ADDR_OUT = convertMACAddressNumericToString(NETFLOW_MAC_DST_ADDR_OUT()), // field 57: Outgoing destination MAC address
        NETFLOW_SRC_VLAN = NETFLOW_SRC_VLAN(), // field 58: Virtual LAN identifier associated with ingress interface
        NETFLOW_DST_VLAN = NETFLOW_DST_VLAN(), // field 59: Virtual LAN identifier associated with egress interface
        NETFLOW_IP_PROTOCOL_VERSION = NETFLOW_IP_PROTOCOL_VERSION(), // field 60: Internet Protocol Version Set to 4 for IPv4, set to 6 for IPv6. If not present in the template, then version 4 is assumed.
        NETFLOW_DIRECTION = NETFLOW_DIRECTION(), // field 61: Flow direction: 0 - ingress flow, 1 - egress flow
        NETFLOW_IPV6_NEXT_HOP = convertIPV6AddressNumericToString(NETFLOW_IPV6_NEXT_HOP()), // field 62: IPv6 address of the next-hop router
        NETFLOW_BPG_IPV6_NEXT_HOP = convertIPV6AddressNumericToString(NETFLOW_BPG_IPV6_NEXT_HOP()), // field 63: Next-hop router in the BGP domain
        NETFLOW_IPV6_OPTION_HEADERS = NETFLOW_IPV6_OPTION_HEADERS(), // field 64: Bit-encoded field identifying IPv6 option headers found in the flow
        NETFLOW_MPLS_LABEL_1 = NETFLOW_MPLS_LABEL(1), // field 70: MPLS label at position 1 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_2 = NETFLOW_MPLS_LABEL(2), // field 71: MPLS label at position 2 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_3 = NETFLOW_MPLS_LABEL(3), // field 72: MPLS label at position 3 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_4 = NETFLOW_MPLS_LABEL(4), // field 73: MPLS label at position 4 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_5 = NETFLOW_MPLS_LABEL(5), // field 74: MPLS label at position 5 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_6 = NETFLOW_MPLS_LABEL(6), // field 75: MPLS label at position 6 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_7 = NETFLOW_MPLS_LABEL(7), // field 76: MPLS label at position 7 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_8 = NETFLOW_MPLS_LABEL(8), // field 77: MPLS label at position 8 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_9 = NETFLOW_MPLS_LABEL(9), // field 78: MPLS label at position 9 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MPLS_LABEL_10 = NETFLOW_MPLS_LABEL(10), // field 79: MPLS label at position 10 in the stack. This comprises 20 bits of MPLS label, 3 EXP (experimental) bits and 1 S (end-of-stack) bit.
        NETFLOW_MAC_DST_ADDR_IN = convertMACAddressNumericToString(NETFLOW_MAC_DST_ADDR_IN()), // field 80: Incoming destination MAC address
        NETFLOW_MAC_SRC_ADDR_OUT = convertMACAddressNumericToString(NETFLOW_MAC_SRC_ADDR_OUT()), // field 81: Outgoing source MAC address
        NETFLOW_IF_NAME = NETFLOW_IF_NAME(), // field 82: Shortened interface name i.e.: "FE1/0"
        NETFLOW_IF_DESC = NETFLOW_IF_DESC(), // field 83: Full interface name i.e.: "FastEthernet 1/0"
        NETFLOW_SAMPLER_NAME = NETFLOW_SAMPLER_NAME(), // field 84: Name of the flow sampler
        NETFLOW_IN_PERMANENT_BYTES = NETFLOW_IN_PERMANENT_BYTES(), // field 85: Running byte counter for a permanent flow
        NETFLOW_IN_PERMANENT_PKTS = NETFLOW_IN_PERMANENT_PKTS(), // field 86: Running packet counter for a permanent flow
        NETFLOW_FRAGMENT_OFFSET = NETFLOW_FRAGMENT_OFFSET(), // field 88: The fragment-offset value from fragmented IP packets
        NETFLOW_FORWARDING_STATUS = NETFLOW_FORWARDING_STATUS(), // field 89: Forwarding status is encoded on 1 byte with the 2 left bits giving the status and the 6 remaining bits giving the reason code.
        NETFLOW_MPLS_PAL_RD = NETFLOW_MPLS_PAL_RD(), // field 90: MPLS PAL Route Distinguisher.
        NETFLOW_MPLS_PREFIX_LEN = NETFLOW_MPLS_PREFIX_LEN(), // field 91: Number of consecutive bits in the MPLS prefix length.
        NETFLOW_SRC_TRAFFIC_INDEX = NETFLOW_SRC_TRAFFIC_INDEX(), // field 92: BGP Policy Accounting Source Traffic Index
        NETFLOW_DST_TRAFFIC_INDEX = NETFLOW_DST_TRAFFIC_INDEX(), // field 93: BGP Policy Accounting Destination Traffic Index
        NETFLOW_APPLICATION_DESCRIPTION = NETFLOW_APPLICATION_DESCRIPTION(), // field 94: Application description.
        NETFLOW_APPLICATION_TAG = NETFLOW_APPLICATION_TAG(), // field 95: 8 bits of engine ID, followed by n bits of classification.
        NETFLOW_APPLICATION_NAME = NETFLOW_APPLICATION_NAME(), // field 96: Name associated with a classification.
        NETFLOW_POST_IP_DSCP = NETFLOW_POST_IP_DSCP(), // field 98: The value of a Differentiated Services Code Point (DSCP) encoded in the Differentiated Services Field, after modification.
        NETFLOW_REPLICATION_FACTOR = NETFLOW_REPLICATION_FACTOR(), // field 99: Multicast replication factor.
        NETFLOW_FIELD_8_AS_INTEGER = (uint32)NETFLOW_FIELD_AS_INTEGER(8),
        NETFLOW_FIELD_8_AS_BYTE_LIST = NETFLOW_FIELD_AS_BYTE_LIST(8),
        NETFLOW_FIELD_82_AS_STRING = NETFLOW_FIELD_AS_STRING(82);


    }
    () as NetflowMessageSink = FileSink(NetflowMessageStream) { param file: "debug.TestNetflowMessageParserFullVersion9.NetflowMessageStream.out"; format: txt; hasDelayField: true; flush: 1u; }


}
